
Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800457c  0800457c  00025150  2**0
                  CONTENTS
  4 .ARM          00000008  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004584  08004584  00025150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005150  20000000  0800458c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20005150  080096dc  00025150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005340  080096dc  00025340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001008e  00000000  00000000  00025180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000211f  00000000  00000000  0003520e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e60  00000000  00000000  00037330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  00038190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024855  00000000  00000000  00038f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c6df  00000000  00000000  0005d755  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000da730  00000000  00000000  00069e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca4  00000000  00000000  001445e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20005150 	.word	0x20005150
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004044 	.word	0x08004044

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20005154 	.word	0x20005154
 80001e8:	08004044 	.word	0x08004044

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f001 fd99 	bl	8002028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f851 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 fa7f 	bl	80009fc <MX_GPIO_Init>
  MX_DMA2D_Init();
 80004fe:	f000 f8d7 	bl	80006b0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000502:	f000 fa2d 	bl	8000960 <MX_FMC_Init>
  MX_I2C3_Init();
 8000506:	f000 f905 	bl	8000714 <MX_I2C3_Init>
  MX_LTDC_Init();
 800050a:	f000 f943 	bl	8000794 <MX_LTDC_Init>
  MX_SPI5_Init();
 800050e:	f000 f9f1 	bl	80008f4 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
    //HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
  	//HAL_Delay(10);
  	//HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);

  	ILI9341_Init();
 8000512:	f000 fe8d 	bl	8001230 <ILI9341_Init>
  	ILI9341_setRotation(3);
 8000516:	2003      	movs	r0, #3
 8000518:	f001 fd3a 	bl	8001f90 <ILI9341_setRotation>

  	ILI9341_Fill(COLOR_WHITE);
 800051c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000520:	f000 ff2a 	bl	8001378 <ILI9341_Fill>

  	//Draw and fill circle
  	ILI9341_drawCircle(50,50, 40, COLOR_GREEN);
 8000524:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000528:	2228      	movs	r2, #40	; 0x28
 800052a:	2132      	movs	r1, #50	; 0x32
 800052c:	2032      	movs	r0, #50	; 0x32
 800052e:	f000 ff9d 	bl	800146c <ILI9341_drawCircle>
  	ILI9341_fillCircle(110,190, 80, COLOR_RED);
 8000532:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000536:	2250      	movs	r2, #80	; 0x50
 8000538:	21be      	movs	r1, #190	; 0xbe
 800053a:	206e      	movs	r0, #110	; 0x6e
 800053c:	f001 f91a 	bl	8001774 <ILI9341_fillCircle>
  	//Print text
  	ILI9341_printText("HELLO", 60, 90, COLOR_YELLOW, COLOR_YELLOW, 5);
 8000540:	2305      	movs	r3, #5
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800054e:	225a      	movs	r2, #90	; 0x5a
 8000550:	213c      	movs	r1, #60	; 0x3c
 8000552:	4810      	ldr	r0, [pc, #64]	; (8000594 <main+0xa8>)
 8000554:	f001 fca4 	bl	8001ea0 <ILI9341_printText>
  	//Print-Fill triangle
  	ILI9341_fillTriangle(10, 160, 110, 160, 190, 300, COLOR_BLACK);
 8000558:	2300      	movs	r3, #0
 800055a:	9302      	str	r3, [sp, #8]
 800055c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	23be      	movs	r3, #190	; 0xbe
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	23a0      	movs	r3, #160	; 0xa0
 8000568:	226e      	movs	r2, #110	; 0x6e
 800056a:	21a0      	movs	r1, #160	; 0xa0
 800056c:	200a      	movs	r0, #10
 800056e:	f001 fa18 	bl	80019a2 <ILI9341_fillTriangle>

  	HAL_Delay(1000);
 8000572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000576:	f001 fdc9 	bl	800210c <HAL_Delay>


  	ILI9341_printImage(50, 50, 80, 130, myImage, sizeof(myImage));
 800057a:	f245 1340 	movw	r3, #20800	; 0x5140
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <main+0xac>)
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2382      	movs	r3, #130	; 0x82
 8000586:	2250      	movs	r2, #80	; 0x50
 8000588:	2132      	movs	r1, #50	; 0x32
 800058a:	2032      	movs	r0, #50	; 0x32
 800058c:	f001 fcc9 	bl	8001f22 <ILI9341_printImage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0xa4>
 8000592:	bf00      	nop
 8000594:	0800405c 	.word	0x0800405c
 8000598:	20000000 	.word	0x20000000

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0a0      	sub	sp, #128	; 0x80
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fd42 	bl	8004034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2230      	movs	r2, #48	; 0x30
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fd33 	bl	8004034 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 80005ce:	4b36      	ldr	r3, [pc, #216]	; (80006a8 <SystemClock_Config+0x10c>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005d6:	4a34      	ldr	r2, [pc, #208]	; (80006a8 <SystemClock_Config+0x10c>)
 80005d8:	f043 0310 	orr.w	r3, r3, #16
 80005dc:	6053      	str	r3, [r2, #4]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80005de:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <SystemClock_Config+0x10c>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	4a31      	ldr	r2, [pc, #196]	; (80006a8 <SystemClock_Config+0x10c>)
 80005e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80005e8:	6053      	str	r3, [r2, #4]
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <SystemClock_Config+0x10c>)
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	4a2d      	ldr	r2, [pc, #180]	; (80006a8 <SystemClock_Config+0x10c>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	6413      	str	r3, [r2, #64]	; 0x40
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <SystemClock_Config+0x10c>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0x110>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000612:	4a26      	ldr	r2, [pc, #152]	; (80006ac <SystemClock_Config+0x110>)
 8000614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	4b24      	ldr	r3, [pc, #144]	; (80006ac <SystemClock_Config+0x110>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000632:	2300      	movs	r3, #0
 8000634:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2300      	movs	r3, #0
 8000638:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fd64 	bl	800310c <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800064a:	f000 fa6b 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000652:	2300      	movs	r3, #0
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000662:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f002 ffbf 	bl	80035ec <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000674:	f000 fa56 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000678:	2308      	movs	r3, #8
 800067a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 800067c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000680:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4618      	mov	r0, r3
 8000690:	f003 f964 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x102>
  {
    Error_Handler();
 800069a:	f000 fa43 	bl	8000b24 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3780      	adds	r7, #128	; 0x80
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_DMA2D_Init+0x5c>)
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <MX_DMA2D_Init+0x60>)
 80006b8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_DMA2D_Init+0x5c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_DMA2D_Init+0x5c>)
 80006c2:	2202      	movs	r2, #2
 80006c4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_DMA2D_Init+0x5c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_DMA2D_Init+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_DMA2D_Init+0x5c>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_DMA2D_Init+0x5c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_DMA2D_Init+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <MX_DMA2D_Init+0x5c>)
 80006e6:	f001 fe18 	bl	800231a <HAL_DMA2D_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006f0:	f000 fa18 	bl	8000b24 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006f4:	2101      	movs	r1, #1
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_DMA2D_Init+0x5c>)
 80006f8:	f001 fe58 	bl	80023ac <HAL_DMA2D_ConfigLayer>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000702:	f000 fa0f 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200052c8 	.word	0x200052c8
 8000710:	4002b000 	.word	0x4002b000

08000714 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_I2C3_Init+0x74>)
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <MX_I2C3_Init+0x78>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_I2C3_Init+0x74>)
 8000720:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MX_I2C3_Init+0x7c>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_I2C3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_I2C3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_I2C3_Init+0x74>)
 8000732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000736:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_I2C3_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2C3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_I2C3_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_I2C3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_I2C3_Init+0x74>)
 8000752:	f002 f881 	bl	8002858 <HAL_I2C_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800075c:	f000 f9e2 	bl	8000b24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	4809      	ldr	r0, [pc, #36]	; (8000788 <MX_I2C3_Init+0x74>)
 8000764:	f002 f9b0 	bl	8002ac8 <HAL_I2CEx_ConfigAnalogFilter>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800076e:	f000 f9d9 	bl	8000b24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000772:	2100      	movs	r1, #0
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_I2C3_Init+0x74>)
 8000776:	f002 f9e3 	bl	8002b40 <HAL_I2CEx_ConfigDigitalFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000780:	f000 f9d0 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20005174 	.word	0x20005174
 800078c:	40005c00 	.word	0x40005c00
 8000790:	000186a0 	.word	0x000186a0

08000794 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09a      	sub	sp, #104	; 0x68
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800079a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800079e:	2234      	movs	r2, #52	; 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fc46 	bl	8004034 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2234      	movs	r2, #52	; 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fc40 	bl	8004034 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007b4:	4b4d      	ldr	r3, [pc, #308]	; (80008ec <MX_LTDC_Init+0x158>)
 80007b6:	4a4e      	ldr	r2, [pc, #312]	; (80008f0 <MX_LTDC_Init+0x15c>)
 80007b8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007ba:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <MX_LTDC_Init+0x158>)
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007c0:	4b4a      	ldr	r3, [pc, #296]	; (80008ec <MX_LTDC_Init+0x158>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007c6:	4b49      	ldr	r3, [pc, #292]	; (80008ec <MX_LTDC_Init+0x158>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007cc:	4b47      	ldr	r3, [pc, #284]	; (80008ec <MX_LTDC_Init+0x158>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80007d2:	4b46      	ldr	r3, [pc, #280]	; (80008ec <MX_LTDC_Init+0x158>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80007d8:	4b44      	ldr	r3, [pc, #272]	; (80008ec <MX_LTDC_Init+0x158>)
 80007da:	2203      	movs	r2, #3
 80007dc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80007de:	4b43      	ldr	r3, [pc, #268]	; (80008ec <MX_LTDC_Init+0x158>)
 80007e0:	220e      	movs	r2, #14
 80007e2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80007e4:	4b41      	ldr	r3, [pc, #260]	; (80008ec <MX_LTDC_Init+0x158>)
 80007e6:	2205      	movs	r2, #5
 80007e8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 80007ea:	4b40      	ldr	r3, [pc, #256]	; (80008ec <MX_LTDC_Init+0x158>)
 80007ec:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 80007f2:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <MX_LTDC_Init+0x158>)
 80007f4:	22f5      	movs	r2, #245	; 0xf5
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 80007f8:	4b3c      	ldr	r3, [pc, #240]	; (80008ec <MX_LTDC_Init+0x158>)
 80007fa:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000800:	4b3a      	ldr	r3, [pc, #232]	; (80008ec <MX_LTDC_Init+0x158>)
 8000802:	22f7      	movs	r2, #247	; 0xf7
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000806:	4b39      	ldr	r3, [pc, #228]	; (80008ec <MX_LTDC_Init+0x158>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800080e:	4b37      	ldr	r3, [pc, #220]	; (80008ec <MX_LTDC_Init+0x158>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <MX_LTDC_Init+0x158>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800081e:	4833      	ldr	r0, [pc, #204]	; (80008ec <MX_LTDC_Init+0x158>)
 8000820:	f002 f9ce 	bl	8002bc0 <HAL_LTDC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 800082a:	f000 f97b 	bl	8000b24 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800083e:	2300      	movs	r3, #0
 8000840:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800084a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000850:	2305      	movs	r3, #5
 8000852:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000872:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	481c      	ldr	r0, [pc, #112]	; (80008ec <MX_LTDC_Init+0x158>)
 800087c:	f002 fa70 	bl	8002d60 <HAL_LTDC_ConfigLayer>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 8000886:	f000 f94d 	bl	8000b24 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008aa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008ac:	2305      	movs	r3, #5
 80008ae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_LTDC_Init+0x158>)
 80008d6:	f002 fa43 	bl	8002d60 <HAL_LTDC_ConfigLayer>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 80008e0:	f000 f920 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3768      	adds	r7, #104	; 0x68
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20005220 	.word	0x20005220
 80008f0:	40016800 	.word	0x40016800

080008f4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_SPI5_Init+0x64>)
 80008fa:	4a18      	ldr	r2, [pc, #96]	; (800095c <MX_SPI5_Init+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI5_Init+0x64>)
 8000900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI5_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_SPI5_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI5_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI5_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI5_Init+0x64>)
 8000920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000924:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI5_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MX_SPI5_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI5_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_SPI5_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI5_Init+0x64>)
 8000940:	220a      	movs	r2, #10
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_SPI5_Init+0x64>)
 8000946:	f003 f9fb 	bl	8003d40 <HAL_SPI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000950:	f000 f8e8 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200051c8 	.word	0x200051c8
 800095c:	40015000 	.word	0x40015000

08000960 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_FMC_Init+0x94>)
 800097a:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <MX_FMC_Init+0x98>)
 800097c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_FMC_Init+0x94>)
 8000980:	2201      	movs	r2, #1
 8000982:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_FMC_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_FMC_Init+0x94>)
 800098c:	2204      	movs	r2, #4
 800098e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_FMC_Init+0x94>)
 8000992:	2210      	movs	r2, #16
 8000994:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_FMC_Init+0x94>)
 8000998:	2240      	movs	r2, #64	; 0x40
 800099a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_FMC_Init+0x94>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_FMC_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_FMC_Init+0x94>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_FMC_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_FMC_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80009ba:	2310      	movs	r3, #16
 80009bc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80009be:	2310      	movs	r3, #16
 80009c0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80009c2:	2310      	movs	r3, #16
 80009c4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80009c6:	2310      	movs	r3, #16
 80009c8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80009ca:	2310      	movs	r3, #16
 80009cc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80009ce:	2310      	movs	r3, #16
 80009d0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80009d2:	2310      	movs	r3, #16
 80009d4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <MX_FMC_Init+0x94>)
 80009dc:	f003 f97c 	bl	8003cd8 <HAL_SDRAM_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80009e6:	f000 f89d 	bl	8000b24 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20005308 	.word	0x20005308
 80009f8:	a0000140 	.word	0xa0000140

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a40      	ldr	r2, [pc, #256]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a1c:	f043 0320 	orr.w	r3, r3, #32
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b3e      	ldr	r3, [pc, #248]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0320 	and.w	r3, r3, #32
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	4b3a      	ldr	r3, [pc, #232]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a39      	ldr	r2, [pc, #228]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2b      	ldr	r2, [pc, #172]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_GPIO_Init+0x120>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_GPIO_Init+0x124>)
 8000adc:	f001 fea2 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ae0:	2340      	movs	r3, #64	; 0x40
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	480a      	ldr	r0, [pc, #40]	; (8000b20 <MX_GPIO_Init+0x124>)
 8000af8:	f001 fcea 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_GPIO_Init+0x124>)
 8000b10:	f001 fcde 	bl	80024d0 <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3730      	adds	r7, #48	; 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020c00 	.word	0x40020c00

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <HAL_DMA2D_MspInit+0x3c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d10d      	bne.n	8000bb2 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_DMA2D_MspInit+0x40>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <HAL_DMA2D_MspInit+0x40>)
 8000ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_DMA2D_MspInit+0x40>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	4002b000 	.word	0x4002b000
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <HAL_I2C_MspInit+0xc4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d14b      	bne.n	8000c82 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c28:	2312      	movs	r3, #18
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c34:	2304      	movs	r3, #4
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4815      	ldr	r0, [pc, #84]	; (8000c94 <HAL_I2C_MspInit+0xcc>)
 8000c40:	f001 fc46 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4a:	2312      	movs	r3, #18
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c56:	2304      	movs	r3, #4
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <HAL_I2C_MspInit+0xd0>)
 8000c62:	f001 fc35 	bl	80024d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40005c00 	.word	0x40005c00
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	; 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a77      	ldr	r2, [pc, #476]	; (8000e98 <HAL_LTDC_MspInit+0x1fc>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f040 80e7 	bne.w	8000e8e <HAL_LTDC_MspInit+0x1f2>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
 8000cc4:	4b75      	ldr	r3, [pc, #468]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc8:	4a74      	ldr	r2, [pc, #464]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cce:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd0:	4b72      	ldr	r3, [pc, #456]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cd8:	623b      	str	r3, [r7, #32]
 8000cda:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
 8000ce0:	4b6e      	ldr	r3, [pc, #440]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4a6d      	ldr	r2, [pc, #436]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000ce6:	f043 0320 	orr.w	r3, r3, #32
 8000cea:	6313      	str	r3, [r2, #48]	; 0x30
 8000cec:	4b6b      	ldr	r3, [pc, #428]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f003 0320 	and.w	r3, r3, #32
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	4b67      	ldr	r3, [pc, #412]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a66      	ldr	r2, [pc, #408]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b64      	ldr	r3, [pc, #400]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	4b60      	ldr	r3, [pc, #384]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a5f      	ldr	r2, [pc, #380]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	4b59      	ldr	r3, [pc, #356]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a58      	ldr	r2, [pc, #352]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b56      	ldr	r3, [pc, #344]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	4b52      	ldr	r3, [pc, #328]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a51      	ldr	r2, [pc, #324]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b4f      	ldr	r3, [pc, #316]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	4b4b      	ldr	r3, [pc, #300]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a4a      	ldr	r2, [pc, #296]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b48      	ldr	r3, [pc, #288]	; (8000e9c <HAL_LTDC_MspInit+0x200>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d96:	230e      	movs	r3, #14
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	483f      	ldr	r0, [pc, #252]	; (8000ea0 <HAL_LTDC_MspInit+0x204>)
 8000da2:	f001 fb95 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8000da6:	f641 0358 	movw	r3, #6232	; 0x1858
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000db8:	230e      	movs	r3, #14
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4838      	ldr	r0, [pc, #224]	; (8000ea4 <HAL_LTDC_MspInit+0x208>)
 8000dc4:	f001 fb84 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000dd8:	2309      	movs	r3, #9
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4831      	ldr	r0, [pc, #196]	; (8000ea8 <HAL_LTDC_MspInit+0x20c>)
 8000de4:	f001 fb74 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000de8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dfa:	230e      	movs	r3, #14
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <HAL_LTDC_MspInit+0x20c>)
 8000e06:	f001 fb63 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000e0a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e1c:	230e      	movs	r3, #14
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4821      	ldr	r0, [pc, #132]	; (8000eac <HAL_LTDC_MspInit+0x210>)
 8000e28:	f001 fb52 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e2c:	23c0      	movs	r3, #192	; 0xc0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e3c:	230e      	movs	r3, #14
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <HAL_LTDC_MspInit+0x214>)
 8000e48:	f001 fb42 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e5c:	230e      	movs	r3, #14
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <HAL_LTDC_MspInit+0x218>)
 8000e68:	f001 fb32 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e7e:	2309      	movs	r3, #9
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4808      	ldr	r0, [pc, #32]	; (8000eac <HAL_LTDC_MspInit+0x210>)
 8000e8a:	f001 fb21 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3738      	adds	r7, #56	; 0x38
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40016800 	.word	0x40016800
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40021400 	.word	0x40021400
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40021800 	.word	0x40021800
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020c00 	.word	0x40020c00

08000eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_SPI_MspInit+0x84>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12c      	bne.n	8000f34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_SPI_MspInit+0x88>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_SPI_MspInit+0x88>)
 8000ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_SPI_MspInit+0x88>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_SPI_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <HAL_SPI_MspInit+0x88>)
 8000f00:	f043 0320 	orr.w	r3, r3, #32
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_SPI_MspInit+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f12:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f24:	2305      	movs	r3, #5
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <HAL_SPI_MspInit+0x8c>)
 8000f30:	f001 face 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40015000 	.word	0x40015000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40021400 	.word	0x40021400

08000f48 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	; (800104c <HAL_FMC_MspInit+0x104>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d16f      	bne.n	8001044 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000f64:	4b39      	ldr	r3, [pc, #228]	; (800104c <HAL_FMC_MspInit+0x104>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <HAL_FMC_MspInit+0x108>)
 8000f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f72:	4a37      	ldr	r2, [pc, #220]	; (8001050 <HAL_FMC_MspInit+0x108>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6393      	str	r3, [r2, #56]	; 0x38
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <HAL_FMC_MspInit+0x108>)
 8000f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f86:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f8a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f98:	230c      	movs	r3, #12
 8000f9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	482c      	ldr	r0, [pc, #176]	; (8001054 <HAL_FMC_MspInit+0x10c>)
 8000fa2:	f001 fa95 	bl	80024d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4826      	ldr	r0, [pc, #152]	; (8001058 <HAL_FMC_MspInit+0x110>)
 8000fc0:	f001 fa86 	bl	80024d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000fc4:	f248 1333 	movw	r3, #33075	; 0x8133
 8000fc8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481f      	ldr	r0, [pc, #124]	; (800105c <HAL_FMC_MspInit+0x114>)
 8000fe0:	f001 fa76 	bl	80024d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000fe4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000fe8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4818      	ldr	r0, [pc, #96]	; (8001060 <HAL_FMC_MspInit+0x118>)
 8001000:	f001 fa66 	bl	80024d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001004:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001008:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001016:	230c      	movs	r3, #12
 8001018:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4811      	ldr	r0, [pc, #68]	; (8001064 <HAL_FMC_MspInit+0x11c>)
 8001020:	f001 fa56 	bl	80024d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001034:	230c      	movs	r3, #12
 8001036:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <HAL_FMC_MspInit+0x120>)
 800103e:	f001 fa47 	bl	80024d0 <HAL_GPIO_Init>
 8001042:	e000      	b.n	8001046 <HAL_FMC_MspInit+0xfe>
    return;
 8001044:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000516c 	.word	0x2000516c
 8001050:	40023800 	.word	0x40023800
 8001054:	40021400 	.word	0x40021400
 8001058:	40020800 	.word	0x40020800
 800105c:	40021800 	.word	0x40021800
 8001060:	40021000 	.word	0x40021000
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40020400 	.word	0x40020400

0800106c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001074:	f7ff ff68 	bl	8000f48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 fffa 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <SystemInit+0x28>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <SystemInit+0x28>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SystemInit+0x28>)
 80010f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f6:	609a      	str	r2, [r3, #8]
#endif
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800110c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800110e:	e003      	b.n	8001118 <LoopCopyDataInit>

08001110 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001112:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001114:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001116:	3104      	adds	r1, #4

08001118 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800111c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800111e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001120:	d3f6      	bcc.n	8001110 <CopyDataInit>
  ldr  r2, =_sbss
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001124:	e002      	b.n	800112c <LoopFillZerobss>

08001126 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001126:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001128:	f842 3b04 	str.w	r3, [r2], #4

0800112c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800112e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001130:	d3f9      	bcc.n	8001126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001132:	f7ff ffd3 	bl	80010dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f002 ff59 	bl	8003fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff f9d7 	bl	80004ec <main>
  bx  lr    
 800113e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001140:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001144:	0800458c 	.word	0x0800458c
  ldr  r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800114c:	20005150 	.word	0x20005150
  ldr  r2, =_sbss
 8001150:	20005150 	.word	0x20005150
  ldr  r3, = _ebss
 8001154:	20005340 	.word	0x20005340

08001158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC_IRQHandler>

0800115a <ILI9341_SendCommand>:
static bool _cp437    = false;

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
	*(__IO uint8_t *)(0x60000000) = com;
 8001164:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	7013      	strb	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	*(__IO uint8_t *)(0x60040000) = data;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <ILI9341_SendData+0x1c>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	7013      	strb	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	60040000 	.word	0x60040000

08001198 <ILI9341_SetCursorPosition>:
//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4604      	mov	r4, r0
 80011a0:	4608      	mov	r0, r1
 80011a2:	4611      	mov	r1, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4623      	mov	r3, r4
 80011a8:	80fb      	strh	r3, [r7, #6]
 80011aa:	4603      	mov	r3, r0
 80011ac:	80bb      	strh	r3, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]
 80011b2:	4613      	mov	r3, r2
 80011b4:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80011b6:	202a      	movs	r0, #42	; 0x2a
 80011b8:	f7ff ffcf 	bl	800115a <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ffd7 	bl	8001178 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ffd2 	bl	8001178 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 80011d4:	887b      	ldrh	r3, [r7, #2]
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ffcb 	bl	8001178 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ffc6 	bl	8001178 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 80011ec:	202b      	movs	r0, #43	; 0x2b
 80011ee:	f7ff ffb4 	bl	800115a <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 80011f2:	88bb      	ldrh	r3, [r7, #4]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ffbc 	bl	8001178 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffb7 	bl	8001178 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 800120a:	883b      	ldrh	r3, [r7, #0]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	b29b      	uxth	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffb0 	bl	8001178 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8001218:	883b      	ldrh	r3, [r7, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffab 	bl	8001178 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 8001222:	202c      	movs	r0, #44	; 0x2c
 8001224:	f7ff ff99 	bl	800115a <ILI9341_SendCommand>
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}

08001230 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(void)
 {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff ff90 	bl	800115a <ILI9341_SendCommand>
   HAL_Delay(100);
 800123a:	2064      	movs	r0, #100	; 0x64
 800123c:	f000 ff66 	bl	800210c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 8001240:	2028      	movs	r0, #40	; 0x28
 8001242:	f7ff ff8a 	bl	800115a <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8001246:	20c0      	movs	r0, #192	; 0xc0
 8001248:	f7ff ff87 	bl	800115a <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 800124c:	2026      	movs	r0, #38	; 0x26
 800124e:	f7ff ff93 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 8001252:	20c1      	movs	r0, #193	; 0xc1
 8001254:	f7ff ff81 	bl	800115a <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 8001258:	2011      	movs	r0, #17
 800125a:	f7ff ff8d 	bl	8001178 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 800125e:	20c5      	movs	r0, #197	; 0xc5
 8001260:	f7ff ff7b 	bl	800115a <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 8001264:	2035      	movs	r0, #53	; 0x35
 8001266:	f7ff ff87 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 800126a:	203e      	movs	r0, #62	; 0x3e
 800126c:	f7ff ff84 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 8001270:	20c7      	movs	r0, #199	; 0xc7
 8001272:	f7ff ff72 	bl	800115a <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 8001276:	20be      	movs	r0, #190	; 0xbe
 8001278:	f7ff ff7e 	bl	8001178 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 800127c:	2036      	movs	r0, #54	; 0x36
 800127e:	f7ff ff6c 	bl	800115a <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 8001282:	2048      	movs	r0, #72	; 0x48
 8001284:	f7ff ff78 	bl	8001178 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8001288:	203a      	movs	r0, #58	; 0x3a
 800128a:	f7ff ff66 	bl	800115a <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 800128e:	2055      	movs	r0, #85	; 0x55
 8001290:	f7ff ff72 	bl	8001178 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 8001294:	20b1      	movs	r0, #177	; 0xb1
 8001296:	f7ff ff60 	bl	800115a <ILI9341_SendCommand>
   ILI9341_SendData(0);
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff ff6c 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 80012a0:	201f      	movs	r0, #31
 80012a2:	f7ff ff69 	bl	8001178 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 80012a6:	202a      	movs	r0, #42	; 0x2a
 80012a8:	f7ff ff57 	bl	800115a <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff ff63 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff ff60 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff ff5d 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 80012be:	20ef      	movs	r0, #239	; 0xef
 80012c0:	f7ff ff5a 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 80012c4:	202b      	movs	r0, #43	; 0x2b
 80012c6:	f7ff ff48 	bl	800115a <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff ff54 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff ff51 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff ff4e 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 80012dc:	203f      	movs	r0, #63	; 0x3f
 80012de:	f7ff ff4b 	bl	8001178 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 80012e2:	2034      	movs	r0, #52	; 0x34
 80012e4:	f7ff ff39 	bl	800115a <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 80012e8:	20b7      	movs	r0, #183	; 0xb7
 80012ea:	f7ff ff36 	bl	800115a <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 80012ee:	2007      	movs	r0, #7
 80012f0:	f7ff ff42 	bl	8001178 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 80012f4:	20b6      	movs	r0, #182	; 0xb6
 80012f6:	f7ff ff30 	bl	800115a <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 80012fa:	200a      	movs	r0, #10
 80012fc:	f7ff ff3c 	bl	8001178 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 8001300:	2082      	movs	r0, #130	; 0x82
 8001302:	f7ff ff39 	bl	8001178 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8001306:	2027      	movs	r0, #39	; 0x27
 8001308:	f7ff ff36 	bl	8001178 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff33 	bl	8001178 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8001312:	2011      	movs	r0, #17
 8001314:	f7ff ff21 	bl	800115a <ILI9341_SendCommand>
   HAL_Delay(100);
 8001318:	2064      	movs	r0, #100	; 0x64
 800131a:	f000 fef7 	bl	800210c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 800131e:	2029      	movs	r0, #41	; 0x29
 8001320:	f7ff ff1b 	bl	800115a <ILI9341_SendCommand>
   HAL_Delay(100);
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	f000 fef1 	bl	800210c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 800132a:	202c      	movs	r0, #44	; 0x2c
 800132c:	f7ff ff15 	bl	800115a <ILI9341_SendCommand>
   HAL_Delay(5);
 8001330:	2005      	movs	r0, #5
 8001332:	f000 feeb 	bl	800210c <HAL_Delay>
 }
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}

0800133a <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	460b      	mov	r3, r1
 8001346:	80bb      	strh	r3, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	88b9      	ldrh	r1, [r7, #4]
 8001352:	88f8      	ldrh	r0, [r7, #6]
 8001354:	f7ff ff20 	bl	8001198 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	b29b      	uxth	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff09 	bl	8001178 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff04 	bl	8001178 <ILI9341_SendData>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8001382:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001386:	60fb      	str	r3, [r7, #12]
	
	if(rotationNum==1 || rotationNum==3)
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <ILI9341_Fill+0x7c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d003      	beq.n	8001398 <ILI9341_Fill+0x20>
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <ILI9341_Fill+0x7c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d107      	bne.n	80013a8 <ILI9341_Fill+0x30>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8001398:	f240 133f 	movw	r3, #319	; 0x13f
 800139c:	22ef      	movs	r2, #239	; 0xef
 800139e:	2100      	movs	r1, #0
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff fef9 	bl	8001198 <ILI9341_SetCursorPosition>
 80013a6:	e00e      	b.n	80013c6 <ILI9341_Fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <ILI9341_Fill+0x7c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d003      	beq.n	80013b8 <ILI9341_Fill+0x40>
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <ILI9341_Fill+0x7c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d116      	bne.n	80013e6 <ILI9341_Fill+0x6e>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 80013b8:	23ef      	movs	r3, #239	; 0xef
 80013ba:	f240 123f 	movw	r2, #319	; 0x13f
 80013be:	2100      	movs	r1, #0
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fee9 	bl	8001198 <ILI9341_SetCursorPosition>
	}
	
	while (n) {
 80013c6:	e00e      	b.n	80013e6 <ILI9341_Fill+0x6e>
			n--;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fece 	bl	8001178 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fec9 	bl	8001178 <ILI9341_SendData>
	while (n) {
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1ed      	bne.n	80013c8 <ILI9341_Fill+0x50>
	}
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20005144 	.word	0x20005144

080013f8 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) { 
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	3301      	adds	r3, #1
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	1a8a      	subs	r2, r1, r2
 8001414:	3201      	adds	r2, #1
 8001416:	fb02 f303 	mul.w	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8001422:	d902      	bls.n	800142a <ILI9341_Fill_Rect+0x32>
 8001424:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001428:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	b298      	uxth	r0, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	b299      	uxth	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	b29a      	uxth	r2, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	f7ff fead 	bl	8001198 <ILI9341_SetCursorPosition>
	while (n) {
 800143e:	e00e      	b.n	800145e <ILI9341_Fill_Rect+0x66>
			n--;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3b01      	subs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 8001446:	8c3b      	ldrh	r3, [r7, #32]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	b29b      	uxth	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fe92 	bl	8001178 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8001454:	8c3b      	ldrh	r3, [r7, #32]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fe8d 	bl	8001178 <ILI9341_SendData>
	while (n) {
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1ed      	bne.n	8001440 <ILI9341_Fill_Rect+0x48>
	}
}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <ILI9341_drawCircle>:

//8. Circle drawing functions
void ILI9341_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4603      	mov	r3, r0
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]
 8001486:	4613      	mov	r3, r2
 8001488:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	f1c3 0301 	rsb	r3, r3, #1
 8001490:	b29b      	uxth	r3, r3
 8001492:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001494:	2301      	movs	r3, #1
 8001496:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	461a      	mov	r2, r3
 800149c:	03d2      	lsls	r2, r2, #15
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	81fb      	strh	r3, [r7, #14]

  ILI9341_DrawPixel(x0  , y0+r, color);
 80014ae:	88f8      	ldrh	r0, [r7, #6]
 80014b0:	88ba      	ldrh	r2, [r7, #4]
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	4413      	add	r3, r2
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	883a      	ldrh	r2, [r7, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff ff3d 	bl	800133a <ILI9341_DrawPixel>
  ILI9341_DrawPixel(x0  , y0-r, color);
 80014c0:	88f8      	ldrh	r0, [r7, #6]
 80014c2:	88ba      	ldrh	r2, [r7, #4]
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	883a      	ldrh	r2, [r7, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff ff34 	bl	800133a <ILI9341_DrawPixel>
  ILI9341_DrawPixel(x0+r, y0  , color);
 80014d2:	88fa      	ldrh	r2, [r7, #6]
 80014d4:	887b      	ldrh	r3, [r7, #2]
 80014d6:	4413      	add	r3, r2
 80014d8:	b29b      	uxth	r3, r3
 80014da:	88b9      	ldrh	r1, [r7, #4]
 80014dc:	883a      	ldrh	r2, [r7, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff2b 	bl	800133a <ILI9341_DrawPixel>
  ILI9341_DrawPixel(x0-r, y0  , color);
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	88b9      	ldrh	r1, [r7, #4]
 80014ee:	883a      	ldrh	r2, [r7, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff22 	bl	800133a <ILI9341_DrawPixel>

  while (x<y) {
 80014f6:	e081      	b.n	80015fc <ILI9341_drawCircle+0x190>
    if (f >= 0) {
 80014f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0e      	blt.n	800151e <ILI9341_drawCircle+0xb2>
      y--;
 8001500:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b29b      	uxth	r3, r3
 800150a:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 800150c:	8a7b      	ldrh	r3, [r7, #18]
 800150e:	3302      	adds	r3, #2
 8001510:	b29b      	uxth	r3, r3
 8001512:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8001514:	8afa      	ldrh	r2, [r7, #22]
 8001516:	8a7b      	ldrh	r3, [r7, #18]
 8001518:	4413      	add	r3, r2
 800151a:	b29b      	uxth	r3, r3
 800151c:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 800151e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001522:	b29b      	uxth	r3, r3
 8001524:	3301      	adds	r3, #1
 8001526:	b29b      	uxth	r3, r3
 8001528:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800152a:	8abb      	ldrh	r3, [r7, #20]
 800152c:	3302      	adds	r3, #2
 800152e:	b29b      	uxth	r3, r3
 8001530:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8001532:	8afa      	ldrh	r2, [r7, #22]
 8001534:	8abb      	ldrh	r3, [r7, #20]
 8001536:	4413      	add	r3, r2
 8001538:	b29b      	uxth	r3, r3
 800153a:	82fb      	strh	r3, [r7, #22]
  
    ILI9341_DrawPixel(x0 + x, y0 + y, color);
 800153c:	88fa      	ldrh	r2, [r7, #6]
 800153e:	8a3b      	ldrh	r3, [r7, #16]
 8001540:	4413      	add	r3, r2
 8001542:	b298      	uxth	r0, r3
 8001544:	88ba      	ldrh	r2, [r7, #4]
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	4413      	add	r3, r2
 800154a:	b29b      	uxth	r3, r3
 800154c:	883a      	ldrh	r2, [r7, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fef3 	bl	800133a <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 - x, y0 + y, color);
 8001554:	88fa      	ldrh	r2, [r7, #6]
 8001556:	8a3b      	ldrh	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	b298      	uxth	r0, r3
 800155c:	88ba      	ldrh	r2, [r7, #4]
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	4413      	add	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	883a      	ldrh	r2, [r7, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fee7 	bl	800133a <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 + x, y0 - y, color);
 800156c:	88fa      	ldrh	r2, [r7, #6]
 800156e:	8a3b      	ldrh	r3, [r7, #16]
 8001570:	4413      	add	r3, r2
 8001572:	b298      	uxth	r0, r3
 8001574:	88ba      	ldrh	r2, [r7, #4]
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	883a      	ldrh	r2, [r7, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fedb 	bl	800133a <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 - x, y0 - y, color);
 8001584:	88fa      	ldrh	r2, [r7, #6]
 8001586:	8a3b      	ldrh	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	b298      	uxth	r0, r3
 800158c:	88ba      	ldrh	r2, [r7, #4]
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	b29b      	uxth	r3, r3
 8001594:	883a      	ldrh	r2, [r7, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fecf 	bl	800133a <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 + y, y0 + x, color);
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	4413      	add	r3, r2
 80015a2:	b298      	uxth	r0, r3
 80015a4:	88ba      	ldrh	r2, [r7, #4]
 80015a6:	8a3b      	ldrh	r3, [r7, #16]
 80015a8:	4413      	add	r3, r2
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	883a      	ldrh	r2, [r7, #0]
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fec3 	bl	800133a <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 - y, y0 + x, color);
 80015b4:	88fa      	ldrh	r2, [r7, #6]
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b298      	uxth	r0, r3
 80015bc:	88ba      	ldrh	r2, [r7, #4]
 80015be:	8a3b      	ldrh	r3, [r7, #16]
 80015c0:	4413      	add	r3, r2
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	883a      	ldrh	r2, [r7, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff feb7 	bl	800133a <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 + y, y0 - x, color);
 80015cc:	88fa      	ldrh	r2, [r7, #6]
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	4413      	add	r3, r2
 80015d2:	b298      	uxth	r0, r3
 80015d4:	88ba      	ldrh	r2, [r7, #4]
 80015d6:	8a3b      	ldrh	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	b29b      	uxth	r3, r3
 80015dc:	883a      	ldrh	r2, [r7, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff feab 	bl	800133a <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 - y, y0 - x, color);
 80015e4:	88fa      	ldrh	r2, [r7, #6]
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	b298      	uxth	r0, r3
 80015ec:	88ba      	ldrh	r2, [r7, #4]
 80015ee:	8a3b      	ldrh	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	883a      	ldrh	r2, [r7, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fe9f 	bl	800133a <ILI9341_DrawPixel>
  while (x<y) {
 80015fc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001600:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001604:	429a      	cmp	r2, r3
 8001606:	f6ff af77 	blt.w	80014f8 <ILI9341_drawCircle+0x8c>
  }
}
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}

08001612 <fillCircleHelper>:
      ILI9341_DrawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8001612:	b590      	push	{r4, r7, lr}
 8001614:	b087      	sub	sp, #28
 8001616:	af00      	add	r7, sp, #0
 8001618:	4604      	mov	r4, r0
 800161a:	4608      	mov	r0, r1
 800161c:	4611      	mov	r1, r2
 800161e:	461a      	mov	r2, r3
 8001620:	4623      	mov	r3, r4
 8001622:	80fb      	strh	r3, [r7, #6]
 8001624:	4603      	mov	r3, r0
 8001626:	80bb      	strh	r3, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	f1c3 0301 	rsb	r3, r3, #1
 8001636:	b29b      	uxth	r3, r3
 8001638:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	461a      	mov	r2, r3
 8001642:	03d2      	lsls	r2, r2, #15
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	b29b      	uxth	r3, r3
 800164a:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001654:	e083      	b.n	800175e <fillCircleHelper+0x14c>
    if (f >= 0) {
 8001656:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0e      	blt.n	800167c <fillCircleHelper+0x6a>
      y--;
 800165e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001662:	b29b      	uxth	r3, r3
 8001664:	3b01      	subs	r3, #1
 8001666:	b29b      	uxth	r3, r3
 8001668:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 800166a:	8a7b      	ldrh	r3, [r7, #18]
 800166c:	3302      	adds	r3, #2
 800166e:	b29b      	uxth	r3, r3
 8001670:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001672:	8afa      	ldrh	r2, [r7, #22]
 8001674:	8a7b      	ldrh	r3, [r7, #18]
 8001676:	4413      	add	r3, r2
 8001678:	b29b      	uxth	r3, r3
 800167a:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 800167c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001680:	b29b      	uxth	r3, r3
 8001682:	3301      	adds	r3, #1
 8001684:	b29b      	uxth	r3, r3
 8001686:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001688:	8abb      	ldrh	r3, [r7, #20]
 800168a:	3302      	adds	r3, #2
 800168c:	b29b      	uxth	r3, r3
 800168e:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8001690:	8afa      	ldrh	r2, [r7, #22]
 8001692:	8abb      	ldrh	r3, [r7, #20]
 8001694:	4413      	add	r3, r2
 8001696:	b29b      	uxth	r3, r3
 8001698:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 800169a:	787b      	ldrb	r3, [r7, #1]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d02b      	beq.n	80016fc <fillCircleHelper+0xea>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80016a4:	88fa      	ldrh	r2, [r7, #6]
 80016a6:	8a3b      	ldrh	r3, [r7, #16]
 80016a8:	4413      	add	r3, r2
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	b218      	sxth	r0, r3
 80016ae:	88ba      	ldrh	r2, [r7, #4]
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	b219      	sxth	r1, r3
 80016b8:	89fb      	ldrh	r3, [r7, #14]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016c0:	4413      	add	r3, r2
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016cc:	f000 f944 	bl	8001958 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80016d0:	88fa      	ldrh	r2, [r7, #6]
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b218      	sxth	r0, r3
 80016da:	88ba      	ldrh	r2, [r7, #4]
 80016dc:	8a3b      	ldrh	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	b219      	sxth	r1, r3
 80016e4:	8a3b      	ldrh	r3, [r7, #16]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016ec:	4413      	add	r3, r2
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016f8:	f000 f92e 	bl	8001958 <ILI9341_drawFastVLine>
    }
    if (cornername & 0x2) {
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d02b      	beq.n	800175e <fillCircleHelper+0x14c>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001706:	88fa      	ldrh	r2, [r7, #6]
 8001708:	8a3b      	ldrh	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	b29b      	uxth	r3, r3
 800170e:	b218      	sxth	r0, r3
 8001710:	88ba      	ldrh	r2, [r7, #4]
 8001712:	89fb      	ldrh	r3, [r7, #14]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	b29b      	uxth	r3, r3
 8001718:	b219      	sxth	r1, r3
 800171a:	89fb      	ldrh	r3, [r7, #14]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001722:	4413      	add	r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	3301      	adds	r3, #1
 8001728:	b29b      	uxth	r3, r3
 800172a:	b21a      	sxth	r2, r3
 800172c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800172e:	f000 f913 	bl	8001958 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001732:	88fa      	ldrh	r2, [r7, #6]
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	b29b      	uxth	r3, r3
 800173a:	b218      	sxth	r0, r3
 800173c:	88ba      	ldrh	r2, [r7, #4]
 800173e:	8a3b      	ldrh	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	b29b      	uxth	r3, r3
 8001744:	b219      	sxth	r1, r3
 8001746:	8a3b      	ldrh	r3, [r7, #16]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800174e:	4413      	add	r3, r2
 8001750:	b29b      	uxth	r3, r3
 8001752:	3301      	adds	r3, #1
 8001754:	b29b      	uxth	r3, r3
 8001756:	b21a      	sxth	r2, r3
 8001758:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800175a:	f000 f8fd 	bl	8001958 <ILI9341_drawFastVLine>
  while (x<y) {
 800175e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001762:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001766:	429a      	cmp	r2, r3
 8001768:	f6ff af75 	blt.w	8001656 <fillCircleHelper+0x44>
    }
  }
}
 800176c:	bf00      	nop
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}

08001774 <ILI9341_fillCircle>:
void ILI9341_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b085      	sub	sp, #20
 8001778:	af02      	add	r7, sp, #8
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4623      	mov	r3, r4
 8001784:	80fb      	strh	r3, [r7, #6]
 8001786:	4603      	mov	r3, r0
 8001788:	80bb      	strh	r3, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	807b      	strh	r3, [r7, #2]
 800178e:	4613      	mov	r3, r2
 8001790:	803b      	strh	r3, [r7, #0]
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 8001792:	88ba      	ldrh	r2, [r7, #4]
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	b29b      	uxth	r3, r3
 800179a:	b219      	sxth	r1, r3
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	883b      	ldrh	r3, [r7, #0]
 80017aa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017ae:	f000 f8d3 	bl	8001958 <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 80017b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017be:	883b      	ldrh	r3, [r7, #0]
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	2300      	movs	r3, #0
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2303      	movs	r3, #3
 80017c8:	f7ff ff23 	bl	8001612 <fillCircleHelper>
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}

080017d4 <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4604      	mov	r4, r0
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4623      	mov	r3, r4
 80017e4:	80fb      	strh	r3, [r7, #6]
 80017e6:	4603      	mov	r3, r0
 80017e8:	80bb      	strh	r3, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	807b      	strh	r3, [r7, #2]
 80017ee:	4613      	mov	r3, r2
 80017f0:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80017f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80017f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001800:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001804:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180c:	1acb      	subs	r3, r1, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	bfb8      	it	lt
 8001812:	425b      	neglt	r3, r3
 8001814:	429a      	cmp	r2, r3
 8001816:	bfcc      	ite	gt
 8001818:	2301      	movgt	r3, #1
 800181a:	2300      	movle	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8001820:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00b      	beq.n	8001840 <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	833b      	strh	r3, [r7, #24]
 800182c:	88bb      	ldrh	r3, [r7, #4]
 800182e:	80fb      	strh	r3, [r7, #6]
 8001830:	8b3b      	ldrh	r3, [r7, #24]
 8001832:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	82fb      	strh	r3, [r7, #22]
 8001838:	883b      	ldrh	r3, [r7, #0]
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	8afb      	ldrh	r3, [r7, #22]
 800183e:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8001840:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001844:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001848:	429a      	cmp	r2, r3
 800184a:	dd0b      	ble.n	8001864 <ILI9341_drawLine+0x90>
    swap(x0, x1);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	82bb      	strh	r3, [r7, #20]
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	80fb      	strh	r3, [r7, #6]
 8001854:	8abb      	ldrh	r3, [r7, #20]
 8001856:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	827b      	strh	r3, [r7, #18]
 800185c:	883b      	ldrh	r3, [r7, #0]
 800185e:	80bb      	strh	r3, [r7, #4]
 8001860:	8a7b      	ldrh	r3, [r7, #18]
 8001862:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001864:	887a      	ldrh	r2, [r7, #2]
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	b29b      	uxth	r3, r3
 800186c:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800186e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001872:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	bfb8      	it	lt
 800187c:	425b      	neglt	r3, r3
 800187e:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8001880:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001884:	0fda      	lsrs	r2, r3, #31
 8001886:	4413      	add	r3, r2
 8001888:	105b      	asrs	r3, r3, #1
 800188a:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 800188c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001890:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001894:	429a      	cmp	r2, r3
 8001896:	da02      	bge.n	800189e <ILI9341_drawLine+0xca>
    ystep = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	83bb      	strh	r3, [r7, #28]
 800189c:	e02d      	b.n	80018fa <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 800189e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a2:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 80018a4:	e029      	b.n	80018fa <ILI9341_drawLine+0x126>
    if (steep) {
 80018a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	88f9      	ldrh	r1, [r7, #6]
 80018b2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fd40 	bl	800133a <ILI9341_DrawPixel>
 80018ba:	e005      	b.n	80018c8 <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	88b9      	ldrh	r1, [r7, #4]
 80018c0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fd39 	bl	800133a <ILI9341_DrawPixel>
    }
    err -= dy;
 80018c8:	8bfa      	ldrh	r2, [r7, #30]
 80018ca:	89fb      	ldrh	r3, [r7, #14]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 80018d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da09      	bge.n	80018ee <ILI9341_drawLine+0x11a>
      y0 += ystep;
 80018da:	88ba      	ldrh	r2, [r7, #4]
 80018dc:	8bbb      	ldrh	r3, [r7, #28]
 80018de:	4413      	add	r3, r2
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80018e4:	8bfa      	ldrh	r2, [r7, #30]
 80018e6:	8a3b      	ldrh	r3, [r7, #16]
 80018e8:	4413      	add	r3, r2
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 80018ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	80fb      	strh	r3, [r7, #6]
 80018fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001902:	429a      	cmp	r2, r3
 8001904:	ddcf      	ble.n	80018a6 <ILI9341_drawLine+0xd2>
    }
  }
}	
 8001906:	bf00      	nop
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd90      	pop	{r4, r7, pc}

0800190e <ILI9341_drawFastHLine>:

void ILI9341_drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800190e:	b590      	push	{r4, r7, lr}
 8001910:	b085      	sub	sp, #20
 8001912:	af02      	add	r7, sp, #8
 8001914:	4604      	mov	r4, r0
 8001916:	4608      	mov	r0, r1
 8001918:	4611      	mov	r1, r2
 800191a:	461a      	mov	r2, r3
 800191c:	4623      	mov	r3, r4
 800191e:	80fb      	strh	r3, [r7, #6]
 8001920:	4603      	mov	r3, r0
 8001922:	80bb      	strh	r3, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
 8001928:	4613      	mov	r3, r2
 800192a:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x+w-1, y, color);
 800192c:	88fa      	ldrh	r2, [r7, #6]
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	4413      	add	r3, r2
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	b29b      	uxth	r3, r3
 8001938:	b21a      	sxth	r2, r3
 800193a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800193e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001942:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001946:	883b      	ldrh	r3, [r7, #0]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4623      	mov	r3, r4
 800194c:	f7ff ff42 	bl	80017d4 <ILI9341_drawLine>
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}

08001958 <ILI9341_drawFastVLine>:

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b085      	sub	sp, #20
 800195c:	af02      	add	r7, sp, #8
 800195e:	4604      	mov	r4, r0
 8001960:	4608      	mov	r0, r1
 8001962:	4611      	mov	r1, r2
 8001964:	461a      	mov	r2, r3
 8001966:	4623      	mov	r3, r4
 8001968:	80fb      	strh	r3, [r7, #6]
 800196a:	4603      	mov	r3, r0
 800196c:	80bb      	strh	r3, [r7, #4]
 800196e:	460b      	mov	r3, r1
 8001970:	807b      	strh	r3, [r7, #2]
 8001972:	4613      	mov	r3, r2
 8001974:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x, y+h-1, color);
 8001976:	88ba      	ldrh	r2, [r7, #4]
 8001978:	887b      	ldrh	r3, [r7, #2]
 800197a:	4413      	add	r3, r2
 800197c:	b29b      	uxth	r3, r3
 800197e:	3b01      	subs	r3, #1
 8001980:	b29b      	uxth	r3, r3
 8001982:	b21c      	sxth	r4, r3
 8001984:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001988:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800198c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001990:	883b      	ldrh	r3, [r7, #0]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4623      	mov	r3, r4
 8001996:	f7ff ff1d 	bl	80017d4 <ILI9341_drawLine>
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}

080019a2 <ILI9341_fillTriangle>:
	ILI9341_drawLine(x0, y0, x1, y1, color);
  ILI9341_drawLine(x1, y1, x2, y2, color);
  ILI9341_drawLine(x2, y2, x0, y0, color);
}
void ILI9341_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80019a2:	b590      	push	{r4, r7, lr}
 80019a4:	b08d      	sub	sp, #52	; 0x34
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4604      	mov	r4, r0
 80019aa:	4608      	mov	r0, r1
 80019ac:	4611      	mov	r1, r2
 80019ae:	461a      	mov	r2, r3
 80019b0:	4623      	mov	r3, r4
 80019b2:	80fb      	strh	r3, [r7, #6]
 80019b4:	4603      	mov	r3, r0
 80019b6:	80bb      	strh	r3, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	803b      	strh	r3, [r7, #0]
	int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
 80019c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019c4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dd0b      	ble.n	80019e4 <ILI9341_fillTriangle+0x42>
    swap(y0, y1); swap(x0, x1);
 80019cc:	88bb      	ldrh	r3, [r7, #4]
 80019ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80019d0:	883b      	ldrh	r3, [r7, #0]
 80019d2:	80bb      	strh	r3, [r7, #4]
 80019d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019d6:	803b      	strh	r3, [r7, #0]
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	843b      	strh	r3, [r7, #32]
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	80fb      	strh	r3, [r7, #6]
 80019e0:	8c3b      	ldrh	r3, [r7, #32]
 80019e2:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 80019e4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019e8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80019ec:	429a      	cmp	r2, r3
 80019ee:	dd0f      	ble.n	8001a10 <ILI9341_fillTriangle+0x6e>
    swap(y2, y1); swap(x2, x1);
 80019f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80019f4:	83fb      	strh	r3, [r7, #30]
 80019f6:	883b      	ldrh	r3, [r7, #0]
 80019f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80019fc:	8bfb      	ldrh	r3, [r7, #30]
 80019fe:	803b      	strh	r3, [r7, #0]
 8001a00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a04:	83bb      	strh	r3, [r7, #28]
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001a0c:	8bbb      	ldrh	r3, [r7, #28]
 8001a0e:	807b      	strh	r3, [r7, #2]
  }
  if (y0 > y1) {
 8001a10:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001a14:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dd0b      	ble.n	8001a34 <ILI9341_fillTriangle+0x92>
    swap(y0, y1); swap(x0, x1);
 8001a1c:	88bb      	ldrh	r3, [r7, #4]
 8001a1e:	837b      	strh	r3, [r7, #26]
 8001a20:	883b      	ldrh	r3, [r7, #0]
 8001a22:	80bb      	strh	r3, [r7, #4]
 8001a24:	8b7b      	ldrh	r3, [r7, #26]
 8001a26:	803b      	strh	r3, [r7, #0]
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	833b      	strh	r3, [r7, #24]
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	80fb      	strh	r3, [r7, #6]
 8001a30:	8b3b      	ldrh	r3, [r7, #24]
 8001a32:	807b      	strh	r3, [r7, #2]
  }

  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8001a34:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001a38:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d137      	bne.n	8001ab0 <ILI9341_fillTriangle+0x10e>
    a = b = x0;
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001a44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a46:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(x1 < a)      a = x1;
 8001a48:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a4c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a50:	429a      	cmp	r2, r3
 8001a52:	da02      	bge.n	8001a5a <ILI9341_fillTriangle+0xb8>
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a58:	e007      	b.n	8001a6a <ILI9341_fillTriangle+0xc8>
    else if(x1 > b) b = x1;
 8001a5a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a5e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dd01      	ble.n	8001a6a <ILI9341_fillTriangle+0xc8>
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(x2 < a)      a = x2;
 8001a6a:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001a6e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a72:	429a      	cmp	r2, r3
 8001a74:	da03      	bge.n	8001a7e <ILI9341_fillTriangle+0xdc>
 8001a76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a7c:	e008      	b.n	8001a90 <ILI9341_fillTriangle+0xee>
    else if(x2 > b) b = x2;
 8001a7e:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001a82:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dd02      	ble.n	8001a90 <ILI9341_fillTriangle+0xee>
 8001a8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ILI9341_drawFastHLine(a, y0, b-a+1, color);
 8001a90:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001aa2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001aa6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001aaa:	f7ff ff30 	bl	800190e <ILI9341_drawFastHLine>
    return;
 8001aae:	e0da      	b.n	8001c66 <ILI9341_fillTriangle+0x2c4>
  }

  int16_t
    dx01 = x1 - x0,
 8001ab0:	887a      	ldrh	r2, [r7, #2]
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	82fb      	strh	r3, [r7, #22]
    dy01 = y1 - y0,
 8001aba:	883a      	ldrh	r2, [r7, #0]
 8001abc:	88bb      	ldrh	r3, [r7, #4]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	82bb      	strh	r3, [r7, #20]
    dx02 = x2 - x0,
 8001ac4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	827b      	strh	r3, [r7, #18]
    dy02 = y2 - y0,
 8001ad0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	823b      	strh	r3, [r7, #16]
    dx12 = x2 - x1,
 8001adc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	81fb      	strh	r3, [r7, #14]
    dy12 = y2 - y1,
 8001ae8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001aec:	883b      	ldrh	r3, [r7, #0]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	81bb      	strh	r3, [r7, #12]
    sa   = 0,
 8001af4:	2300      	movs	r3, #0
 8001af6:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb   = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	84bb      	strh	r3, [r7, #36]	; 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
 8001afc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001b00:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d102      	bne.n	8001b0e <ILI9341_fillTriangle+0x16c>
 8001b08:	883b      	ldrh	r3, [r7, #0]
 8001b0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8001b0c:	e003      	b.n	8001b16 <ILI9341_fillTriangle+0x174>
  else         last = y1-1; // Skip it
 8001b0e:	883b      	ldrh	r3, [r7, #0]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	853b      	strh	r3, [r7, #40]	; 0x28

  for(y=y0; y<=last; y++) {
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001b1a:	e040      	b.n	8001b9e <ILI9341_fillTriangle+0x1fc>
    a   = x0 + sa / dy01;
 8001b1c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001b20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b24:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 8001b32:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001b36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	4413      	add	r3, r2
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 8001b48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b4a:	8afb      	ldrh	r3, [r7, #22]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8001b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b54:	8a7b      	ldrh	r3, [r7, #18]
 8001b56:	4413      	add	r3, r2
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	84bb      	strh	r3, [r7, #36]	; 0x24

    if(a > b) swap(a,b);
 8001b5c:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001b60:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dd05      	ble.n	8001b74 <ILI9341_fillTriangle+0x1d2>
 8001b68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b6a:	813b      	strh	r3, [r7, #8]
 8001b6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b70:	893b      	ldrh	r3, [r7, #8]
 8001b72:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ILI9341_drawFastHLine(a, y, b-a+1, color);
 8001b74:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001b76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b86:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8001b8a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001b8e:	f7ff febe 	bl	800190e <ILI9341_drawFastHLine>
  for(y=y0; y<=last; y++) {
 8001b92:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001b9e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001ba2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	ddb8      	ble.n	8001b1c <ILI9341_fillTriangle+0x17a>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 8001baa:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001bae:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	fb12 f303 	smulbb	r3, r2, r3
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y0);
 8001bc0:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001bc4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	8a7b      	ldrh	r3, [r7, #18]
 8001bce:	fb12 f303 	smulbb	r3, r2, r3
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  for(; y<=y2; y++) {
 8001bd6:	e040      	b.n	8001c5a <ILI9341_fillTriangle+0x2b8>
    a   = x1 + sa / dy12;
 8001bd8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001bdc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001be0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	4413      	add	r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 8001bee:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001bf2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 8001c04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001c06:	89fb      	ldrh	r3, [r7, #14]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8001c0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c10:	8a7b      	ldrh	r3, [r7, #18]
 8001c12:	4413      	add	r3, r2
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	84bb      	strh	r3, [r7, #36]	; 0x24

    if(a > b) swap(a,b);
 8001c18:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001c1c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dd05      	ble.n	8001c30 <ILI9341_fillTriangle+0x28e>
 8001c24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c26:	817b      	strh	r3, [r7, #10]
 8001c28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ILI9341_drawFastHLine(a, y, b-a+1, color);
 8001c30:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001c32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21a      	sxth	r2, r3
 8001c3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c42:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8001c46:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001c4a:	f7ff fe60 	bl	800190e <ILI9341_drawFastHLine>
  for(; y<=y2; y++) {
 8001c4e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001c5a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001c5e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001c62:	429a      	cmp	r2, r3
 8001c64:	ddb8      	ble.n	8001bd8 <ILI9341_fillTriangle+0x236>
	}
}
 8001c66:	3734      	adds	r7, #52	; 0x34
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}

08001c6c <ILI9341_drawChar>:

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	4604      	mov	r4, r0
 8001c74:	4608      	mov	r0, r1
 8001c76:	4611      	mov	r1, r2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4623      	mov	r3, r4
 8001c7c:	80fb      	strh	r3, [r7, #6]
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80bb      	strh	r3, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	70fb      	strb	r3, [r7, #3]
 8001c86:	4613      	mov	r3, r2
 8001c88:	803b      	strh	r3, [r7, #0]
	if((x >= ILI9341_WIDTH)            || // Clip right
 8001c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8e:	2bef      	cmp	r3, #239	; 0xef
 8001c90:	f300 80fd 	bgt.w	8001e8e <ILI9341_drawChar+0x222>
 8001c94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c98:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c9c:	f280 80f7 	bge.w	8001e8e <ILI9341_drawChar+0x222>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8001ca0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001ca4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3b01      	subs	r3, #1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f2c0 80ea 	blt.w	8001e8e <ILI9341_drawChar+0x222>
     ((y + 8 * size - 1) < 0))   // Clip top
 8001cba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3b01      	subs	r3, #1
     ((x + 6 * size - 1) < 0) || // Clip left
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f2c0 80e0 	blt.w	8001e8e <ILI9341_drawChar+0x222>
    return;

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8001cce:	4b72      	ldr	r3, [pc, #456]	; (8001e98 <ILI9341_drawChar+0x22c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <ILI9341_drawChar+0x7c>
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	2baf      	cmp	r3, #175	; 0xaf
 8001ce0:	d902      	bls.n	8001ce8 <ILI9341_drawChar+0x7c>
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e0c9      	b.n	8001e82 <ILI9341_drawChar+0x216>
    uint8_t line;
    if (i == 5) 
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d102      	bne.n	8001cfc <ILI9341_drawChar+0x90>
      line = 0x0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73bb      	strb	r3, [r7, #14]
 8001cfa:	e00b      	b.n	8001d14 <ILI9341_drawChar+0xa8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	461a      	mov	r2, r3
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a63      	ldr	r2, [pc, #396]	; (8001e9c <ILI9341_drawChar+0x230>)
 8001d0e:	4413      	add	r3, r2
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	737b      	strb	r3, [r7, #13]
 8001d18:	e0a8      	b.n	8001e6c <ILI9341_drawChar+0x200>
      if (line & 0x1) {
 8001d1a:	7bbb      	ldrb	r3, [r7, #14]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d04b      	beq.n	8001dbc <ILI9341_drawChar+0x150>
        if (size == 1) // default size
 8001d24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d110      	bne.n	8001d4e <ILI9341_drawChar+0xe2>
          ILI9341_DrawPixel(x+i, y+j, color);
 8001d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	4413      	add	r3, r2
 8001d36:	b298      	uxth	r0, r3
 8001d38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	88bb      	ldrh	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	883a      	ldrh	r2, [r7, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7ff faf7 	bl	800133a <ILI9341_DrawPixel>
 8001d4c:	e085      	b.n	8001e5a <ILI9341_drawChar+0x1ee>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8001d4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d66:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d6a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	461c      	mov	r4, r3
 8001d76:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7e:	441a      	add	r2, r3
 8001d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d84:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	461d      	mov	r5, r3
 8001d90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d9a:	441a      	add	r2, r3
 8001d9c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001da0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	461a      	mov	r2, r3
 8001dac:	883b      	ldrh	r3, [r7, #0]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	462a      	mov	r2, r5
 8001db4:	4621      	mov	r1, r4
 8001db6:	f7ff fb1f 	bl	80013f8 <ILI9341_Fill_Rect>
 8001dba:	e04e      	b.n	8001e5a <ILI9341_drawChar+0x1ee>
        } 
      } else if (bg != color) {
 8001dbc:	8c3a      	ldrh	r2, [r7, #32]
 8001dbe:	883b      	ldrh	r3, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d04a      	beq.n	8001e5a <ILI9341_drawChar+0x1ee>
        if (size == 1) // default size
 8001dc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d110      	bne.n	8001dee <ILI9341_drawChar+0x182>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8001dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b298      	uxth	r0, r3
 8001dd8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	88bb      	ldrh	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	8c3a      	ldrh	r2, [r7, #32]
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7ff faa7 	bl	800133a <ILI9341_DrawPixel>
 8001dec:	e035      	b.n	8001e5a <ILI9341_drawChar+0x1ee>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8001dee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e0a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	461c      	mov	r4, r3
 8001e16:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1e:	441a      	add	r2, r3
 8001e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e24:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	461d      	mov	r5, r3
 8001e30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e3a:	441a      	add	r2, r3
 8001e3c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e40:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	8c3b      	ldrh	r3, [r7, #32]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	462a      	mov	r2, r5
 8001e54:	4621      	mov	r1, r4
 8001e56:	f7ff facf 	bl	80013f8 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001e60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	737b      	strb	r3, [r7, #13]
 8001e6c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e70:	2b07      	cmp	r3, #7
 8001e72:	f77f af52 	ble.w	8001d1a <ILI9341_drawChar+0xae>
  for (int8_t i=0; i<6; i++ ) {
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	f77f af31 	ble.w	8001cee <ILI9341_drawChar+0x82>
 8001e8c:	e000      	b.n	8001e90 <ILI9341_drawChar+0x224>
    return;
 8001e8e:	bf00      	nop
    }
  }
}
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bdb0      	pop	{r4, r5, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20005170 	.word	0x20005170
 8001e9c:	0800407c 	.word	0x0800407c

08001ea0 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	4611      	mov	r1, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	817b      	strh	r3, [r7, #10]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	813b      	strh	r3, [r7, #8]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8001eba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	0052      	lsls	r2, r2, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	82fb      	strh	r3, [r7, #22]
 8001ed0:	e01a      	b.n	8001f08 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8001ed2:	8abb      	ldrh	r3, [r7, #20]
 8001ed4:	8afa      	ldrh	r2, [r7, #22]
 8001ed6:	fb12 f303 	smulbb	r3, r2, r3
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	897b      	ldrh	r3, [r7, #10]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b218      	sxth	r0, r3
 8001ee4:	8afb      	ldrh	r3, [r7, #22]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	88fc      	ldrh	r4, [r7, #6]
 8001eee:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001ef2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	4623      	mov	r3, r4
 8001efe:	f7ff feb5 	bl	8001c6c <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001f02:	8afb      	ldrh	r3, [r7, #22]
 8001f04:	3301      	adds	r3, #1
 8001f06:	82fb      	strh	r3, [r7, #22]
 8001f08:	8afb      	ldrh	r3, [r7, #22]
 8001f0a:	2b27      	cmp	r3, #39	; 0x27
 8001f0c:	d805      	bhi.n	8001f1a <ILI9341_printText+0x7a>
 8001f0e:	8afb      	ldrh	r3, [r7, #22]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1db      	bne.n	8001ed2 <ILI9341_printText+0x32>
	}
}
 8001f1a:	bf00      	nop
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}

08001f22 <ILI9341_printImage>:

//12. Image print (RGB 565, 2 bytes per pixel)
void ILI9341_printImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t *data, uint32_t size)
{
 8001f22:	b590      	push	{r4, r7, lr}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4604      	mov	r4, r0
 8001f2a:	4608      	mov	r0, r1
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4623      	mov	r3, r4
 8001f32:	80fb      	strh	r3, [r7, #6]
 8001f34:	4603      	mov	r3, r0
 8001f36:	80bb      	strh	r3, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	803b      	strh	r3, [r7, #0]
	uint32_t n = size;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	60bb      	str	r3, [r7, #8]
	ILI9341_SetCursorPosition(x, y, w+x-1, h+y-1);
 8001f44:	887a      	ldrh	r2, [r7, #2]
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	4413      	add	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29c      	uxth	r4, r3
 8001f50:	883a      	ldrh	r2, [r7, #0]
 8001f52:	88bb      	ldrh	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	88b9      	ldrh	r1, [r7, #4]
 8001f5e:	88f8      	ldrh	r0, [r7, #6]
 8001f60:	4622      	mov	r2, r4
 8001f62:	f7ff f919 	bl	8001198 <ILI9341_SetCursorPosition>
	for(uint32_t i=0; i<n ; i++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e009      	b.n	8001f80 <ILI9341_printImage+0x5e>
	{
		ILI9341_SendData(data[i]);
 8001f6c:	6a3a      	ldr	r2, [r7, #32]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff f8ff 	bl	8001178 <ILI9341_SendData>
	for(uint32_t i=0; i<n ; i++)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d3f1      	bcc.n	8001f6c <ILI9341_printImage+0x4a>
	}
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}

08001f90 <ILI9341_setRotation>:

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d832      	bhi.n	8002008 <ILI9341_setRotation+0x78>
 8001fa2:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <ILI9341_setRotation+0x18>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fcd 	.word	0x08001fcd
 8001fb0:	08001fe1 	.word	0x08001fe1
 8001fb4:	08001ff5 	.word	0x08001ff5
	{
		case 1:
			rotationNum = 1;
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <ILI9341_setRotation+0x94>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001fbe:	2036      	movs	r0, #54	; 0x36
 8001fc0:	f7ff f8cb 	bl	800115a <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001fc4:	2088      	movs	r0, #136	; 0x88
 8001fc6:	f7ff f8d7 	bl	8001178 <ILI9341_SendData>
			break;
 8001fca:	e027      	b.n	800201c <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <ILI9341_setRotation+0x94>)
 8001fce:	2202      	movs	r2, #2
 8001fd0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001fd2:	2036      	movs	r0, #54	; 0x36
 8001fd4:	f7ff f8c1 	bl	800115a <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001fd8:	2028      	movs	r0, #40	; 0x28
 8001fda:	f7ff f8cd 	bl	8001178 <ILI9341_SendData>
			break;
 8001fde:	e01d      	b.n	800201c <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <ILI9341_setRotation+0x94>)
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001fe6:	2036      	movs	r0, #54	; 0x36
 8001fe8:	f7ff f8b7 	bl	800115a <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8001fec:	2048      	movs	r0, #72	; 0x48
 8001fee:	f7ff f8c3 	bl	8001178 <ILI9341_SendData>
			break;
 8001ff2:	e013      	b.n	800201c <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <ILI9341_setRotation+0x94>)
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001ffa:	2036      	movs	r0, #54	; 0x36
 8001ffc:	f7ff f8ad 	bl	800115a <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002000:	20e8      	movs	r0, #232	; 0xe8
 8002002:	f7ff f8b9 	bl	8001178 <ILI9341_SendData>
			break;
 8002006:	e009      	b.n	800201c <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <ILI9341_setRotation+0x94>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800200e:	2036      	movs	r0, #54	; 0x36
 8002010:	f7ff f8a3 	bl	800115a <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8002014:	2088      	movs	r0, #136	; 0x88
 8002016:	f7ff f8af 	bl	8001178 <ILI9341_SendData>
			break;
 800201a:	bf00      	nop
	}
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20005144 	.word	0x20005144

08002028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_Init+0x40>)
 8002032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_Init+0x40>)
 800203e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_Init+0x40>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002050:	2003      	movs	r0, #3
 8002052:	f000 f92f 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002056:	2000      	movs	r0, #0
 8002058:	f000 f808 	bl	800206c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800205c:	f7fe fd6a 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023c00 	.word	0x40023c00

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x54>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0x58>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002082:	fbb3 f3f1 	udiv	r3, r3, r1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f939 	bl	8002302 <HAL_SYSTICK_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00e      	b.n	80020b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d80a      	bhi.n	80020b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f000 f90f 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <HAL_InitTick+0x5c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20005140 	.word	0x20005140
 80020c4:	2000514c 	.word	0x2000514c
 80020c8:	20005148 	.word	0x20005148

080020cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2000514c 	.word	0x2000514c
 80020f0:	2000533c 	.word	0x2000533c

080020f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	2000533c 	.word	0x2000533c

0800210c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff ffee 	bl	80020f4 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d005      	beq.n	8002132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_Delay+0x40>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002132:	bf00      	nop
 8002134:	f7ff ffde 	bl	80020f4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8f7      	bhi.n	8002134 <HAL_Delay+0x28>
  {
  }
}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000514c 	.word	0x2000514c

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f7ff ff8e 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff47 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff5c 	bl	8002198 <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff8e 	bl	8002208 <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5d 	bl	80021b4 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffb0 	bl	8002270 <SysTick_Config>
 8002310:	4603      	mov	r3, r0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e03b      	b.n	80023a4 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d106      	bne.n	8002346 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe fc1f 	bl	8000b84 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2202      	movs	r2, #2
 800234a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	f023 0107 	bic.w	r1, r3, #7
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68d1      	ldr	r1, [r2, #12]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_DMA2D_ConfigLayer+0x20>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e079      	b.n	80024c0 <HAL_DMA2D_ConfigLayer+0x114>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	3318      	adds	r3, #24
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80023f6:	4b35      	ldr	r3, [pc, #212]	; (80024cc <HAL_DMA2D_ConfigLayer+0x120>)
 80023f8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b0a      	cmp	r3, #10
 8002400:	d003      	beq.n	800240a <HAL_DMA2D_ConfigLayer+0x5e>
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b09      	cmp	r3, #9
 8002408:	d107      	bne.n	800241a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e005      	b.n	8002426 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	061b      	lsls	r3, r3, #24
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d120      	bne.n	800246e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	ea02 0103 	and.w	r1, r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	430a      	orrs	r2, r1
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b0a      	cmp	r3, #10
 8002454:	d003      	beq.n	800245e <HAL_DMA2D_ConfigLayer+0xb2>
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b09      	cmp	r3, #9
 800245c:	d127      	bne.n	80024ae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
 800246c:	e01f      	b.n	80024ae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43db      	mvns	r3, r3
 8002478:	ea02 0103 	and.w	r1, r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	430a      	orrs	r2, r1
 8002484:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b0a      	cmp	r3, #10
 8002496:	d003      	beq.n	80024a0 <HAL_DMA2D_ConfigLayer+0xf4>
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b09      	cmp	r3, #9
 800249e:	d106      	bne.n	80024ae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80024ac:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	ff03000f 	.word	0xff03000f

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	e177      	b.n	80027dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 8166 	bne.w	80027d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d00b      	beq.n	800252a <HAL_GPIO_Init+0x5a>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d007      	beq.n	800252a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800251e:	2b11      	cmp	r3, #17
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b12      	cmp	r3, #18
 8002528:	d130      	bne.n	800258c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 0201 	and.w	r2, r3, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0xfc>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b12      	cmp	r3, #18
 80025ca:	d123      	bne.n	8002614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	08da      	lsrs	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3208      	adds	r2, #8
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80c0 	beq.w	80027d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <HAL_GPIO_Init+0x320>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a64      	ldr	r2, [pc, #400]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002672:	4a60      	ldr	r2, [pc, #384]	; (80027f4 <HAL_GPIO_Init+0x324>)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a57      	ldr	r2, [pc, #348]	; (80027f8 <HAL_GPIO_Init+0x328>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d037      	beq.n	800270e <HAL_GPIO_Init+0x23e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a56      	ldr	r2, [pc, #344]	; (80027fc <HAL_GPIO_Init+0x32c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d031      	beq.n	800270a <HAL_GPIO_Init+0x23a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a55      	ldr	r2, [pc, #340]	; (8002800 <HAL_GPIO_Init+0x330>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d02b      	beq.n	8002706 <HAL_GPIO_Init+0x236>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a54      	ldr	r2, [pc, #336]	; (8002804 <HAL_GPIO_Init+0x334>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d025      	beq.n	8002702 <HAL_GPIO_Init+0x232>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a53      	ldr	r2, [pc, #332]	; (8002808 <HAL_GPIO_Init+0x338>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01f      	beq.n	80026fe <HAL_GPIO_Init+0x22e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_GPIO_Init+0x33c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d019      	beq.n	80026fa <HAL_GPIO_Init+0x22a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a51      	ldr	r2, [pc, #324]	; (8002810 <HAL_GPIO_Init+0x340>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_GPIO_Init+0x226>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a50      	ldr	r2, [pc, #320]	; (8002814 <HAL_GPIO_Init+0x344>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00d      	beq.n	80026f2 <HAL_GPIO_Init+0x222>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4f      	ldr	r2, [pc, #316]	; (8002818 <HAL_GPIO_Init+0x348>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <HAL_GPIO_Init+0x21e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4e      	ldr	r2, [pc, #312]	; (800281c <HAL_GPIO_Init+0x34c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <HAL_GPIO_Init+0x21a>
 80026e6:	2309      	movs	r3, #9
 80026e8:	e012      	b.n	8002710 <HAL_GPIO_Init+0x240>
 80026ea:	230a      	movs	r3, #10
 80026ec:	e010      	b.n	8002710 <HAL_GPIO_Init+0x240>
 80026ee:	2308      	movs	r3, #8
 80026f0:	e00e      	b.n	8002710 <HAL_GPIO_Init+0x240>
 80026f2:	2307      	movs	r3, #7
 80026f4:	e00c      	b.n	8002710 <HAL_GPIO_Init+0x240>
 80026f6:	2306      	movs	r3, #6
 80026f8:	e00a      	b.n	8002710 <HAL_GPIO_Init+0x240>
 80026fa:	2305      	movs	r3, #5
 80026fc:	e008      	b.n	8002710 <HAL_GPIO_Init+0x240>
 80026fe:	2304      	movs	r3, #4
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x240>
 8002702:	2303      	movs	r3, #3
 8002704:	e004      	b.n	8002710 <HAL_GPIO_Init+0x240>
 8002706:	2302      	movs	r3, #2
 8002708:	e002      	b.n	8002710 <HAL_GPIO_Init+0x240>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x240>
 800270e:	2300      	movs	r3, #0
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f002 0203 	and.w	r2, r2, #3
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4093      	lsls	r3, r2
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002720:	4934      	ldr	r1, [pc, #208]	; (80027f4 <HAL_GPIO_Init+0x324>)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272e:	4b3c      	ldr	r3, [pc, #240]	; (8002820 <HAL_GPIO_Init+0x350>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002752:	4a33      	ldr	r2, [pc, #204]	; (8002820 <HAL_GPIO_Init+0x350>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002758:	4b31      	ldr	r3, [pc, #196]	; (8002820 <HAL_GPIO_Init+0x350>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277c:	4a28      	ldr	r2, [pc, #160]	; (8002820 <HAL_GPIO_Init+0x350>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002782:	4b27      	ldr	r3, [pc, #156]	; (8002820 <HAL_GPIO_Init+0x350>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a6:	4a1e      	ldr	r2, [pc, #120]	; (8002820 <HAL_GPIO_Init+0x350>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_GPIO_Init+0x350>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d0:	4a13      	ldr	r2, [pc, #76]	; (8002820 <HAL_GPIO_Init+0x350>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b0f      	cmp	r3, #15
 80027e0:	f67f ae84 	bls.w	80024ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e4:	bf00      	nop
 80027e6:	3724      	adds	r7, #36	; 0x24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40021400 	.word	0x40021400
 8002810:	40021800 	.word	0x40021800
 8002814:	40021c00 	.word	0x40021c00
 8002818:	40022000 	.word	0x40022000
 800281c:	40022400 	.word	0x40022400
 8002820:	40013c00 	.word	0x40013c00

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002834:	787b      	ldrb	r3, [r7, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002840:	e003      	b.n	800284a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	041a      	lsls	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e11f      	b.n	8002aaa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe f9a2 	bl	8000bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	; 0x24
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028bc:	f001 f83a 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 80028c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4a7b      	ldr	r2, [pc, #492]	; (8002ab4 <HAL_I2C_Init+0x25c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d807      	bhi.n	80028dc <HAL_I2C_Init+0x84>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a7a      	ldr	r2, [pc, #488]	; (8002ab8 <HAL_I2C_Init+0x260>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	bf94      	ite	ls
 80028d4:	2301      	movls	r3, #1
 80028d6:	2300      	movhi	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e006      	b.n	80028ea <HAL_I2C_Init+0x92>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a77      	ldr	r2, [pc, #476]	; (8002abc <HAL_I2C_Init+0x264>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	bf94      	ite	ls
 80028e4:	2301      	movls	r3, #1
 80028e6:	2300      	movhi	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e0db      	b.n	8002aaa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4a72      	ldr	r2, [pc, #456]	; (8002ac0 <HAL_I2C_Init+0x268>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	0c9b      	lsrs	r3, r3, #18
 80028fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a64      	ldr	r2, [pc, #400]	; (8002ab4 <HAL_I2C_Init+0x25c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d802      	bhi.n	800292c <HAL_I2C_Init+0xd4>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	3301      	adds	r3, #1
 800292a:	e009      	b.n	8002940 <HAL_I2C_Init+0xe8>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	4a63      	ldr	r2, [pc, #396]	; (8002ac4 <HAL_I2C_Init+0x26c>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	3301      	adds	r3, #1
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	430b      	orrs	r3, r1
 8002946:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002952:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4956      	ldr	r1, [pc, #344]	; (8002ab4 <HAL_I2C_Init+0x25c>)
 800295c:	428b      	cmp	r3, r1
 800295e:	d80d      	bhi.n	800297c <HAL_I2C_Init+0x124>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1e59      	subs	r1, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fbb1 f3f3 	udiv	r3, r1, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	2b04      	cmp	r3, #4
 8002976:	bf38      	it	cc
 8002978:	2304      	movcc	r3, #4
 800297a:	e04f      	b.n	8002a1c <HAL_I2C_Init+0x1c4>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d111      	bne.n	80029a8 <HAL_I2C_Init+0x150>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e58      	subs	r0, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	440b      	add	r3, r1
 8002992:	fbb0 f3f3 	udiv	r3, r0, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e012      	b.n	80029ce <HAL_I2C_Init+0x176>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e58      	subs	r0, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	0099      	lsls	r1, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x17e>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e022      	b.n	8002a1c <HAL_I2C_Init+0x1c4>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10e      	bne.n	80029fc <HAL_I2C_Init+0x1a4>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1e58      	subs	r0, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	440b      	add	r3, r1
 80029ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fa:	e00f      	b.n	8002a1c <HAL_I2C_Init+0x1c4>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	0099      	lsls	r1, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6809      	ldr	r1, [r1, #0]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6911      	ldr	r1, [r2, #16]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	000186a0 	.word	0x000186a0
 8002ab8:	001e847f 	.word	0x001e847f
 8002abc:	003d08ff 	.word	0x003d08ff
 8002ac0:	431bde83 	.word	0x431bde83
 8002ac4:	10624dd3 	.word	0x10624dd3

08002ac8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d129      	bne.n	8002b32 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2224      	movs	r2, #36	; 0x24
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0210 	bic.w	r2, r2, #16
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d12a      	bne.n	8002bb0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2224      	movs	r2, #36	; 0x24
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	f023 030f 	bic.w	r3, r3, #15
 8002b80:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	89fb      	ldrh	r3, [r7, #14]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	89fa      	ldrh	r2, [r7, #14]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0bf      	b.n	8002d52 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe f858 	bl	8000c9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002c02:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6999      	ldr	r1, [r3, #24]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c18:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <HAL_LTDC_Init+0x19c>)
 8002c34:	400b      	ands	r3, r1
 8002c36:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6899      	ldr	r1, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68d9      	ldr	r1, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b3e      	ldr	r3, [pc, #248]	; (8002d5c <HAL_LTDC_Init+0x19c>)
 8002c62:	400b      	ands	r3, r1
 8002c64:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68d9      	ldr	r1, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1a      	ldr	r2, [r3, #32]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6919      	ldr	r1, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4b33      	ldr	r3, [pc, #204]	; (8002d5c <HAL_LTDC_Init+0x19c>)
 8002c90:	400b      	ands	r3, r1
 8002c92:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6919      	ldr	r1, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6959      	ldr	r1, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <HAL_LTDC_Init+0x19c>)
 8002cbe:	400b      	ands	r3, r1
 8002cc0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6959      	ldr	r1, [r3, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0206 	orr.w	r2, r2, #6
 8002d2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	f000f800 	.word	0xf000f800

08002d60 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_LTDC_ConfigLayer+0x1a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e02c      	b.n	8002dd4 <HAL_LTDC_ConfigLayer+0x74>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2202      	movs	r2, #2
 8002d86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2134      	movs	r1, #52	; 0x34
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	461d      	mov	r5, r3
 8002da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f811 	bl	8002ddc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bdb0      	pop	{r4, r5, r7, pc}

08002ddc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	0c1b      	lsrs	r3, r3, #16
 8002df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df8:	4413      	add	r3, r2
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	01db      	lsls	r3, r3, #7
 8002e08:	4413      	add	r3, r2
 8002e0a:	3384      	adds	r3, #132	; 0x84
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	4611      	mov	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	01d2      	lsls	r2, r2, #7
 8002e18:	440a      	add	r2, r1
 8002e1a:	3284      	adds	r2, #132	; 0x84
 8002e1c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002e20:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e32:	4413      	add	r3, r2
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	01db      	lsls	r3, r3, #7
 8002e40:	440b      	add	r3, r1
 8002e42:	3384      	adds	r3, #132	; 0x84
 8002e44:	4619      	mov	r1, r3
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e5a:	4413      	add	r3, r2
 8002e5c:	041b      	lsls	r3, r3, #16
 8002e5e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	01db      	lsls	r3, r3, #7
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3384      	adds	r3, #132	; 0x84
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	4611      	mov	r1, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	01d2      	lsls	r2, r2, #7
 8002e7a:	440a      	add	r2, r1
 8002e7c:	3284      	adds	r2, #132	; 0x84
 8002e7e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002e82:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e92:	4413      	add	r3, r2
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	01db      	lsls	r3, r3, #7
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3384      	adds	r3, #132	; 0x84
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	01db      	lsls	r3, r3, #7
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3384      	adds	r3, #132	; 0x84
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	01d2      	lsls	r2, r2, #7
 8002ec6:	440a      	add	r2, r1
 8002ec8:	3284      	adds	r2, #132	; 0x84
 8002eca:	f023 0307 	bic.w	r3, r3, #7
 8002ece:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	01db      	lsls	r3, r3, #7
 8002eda:	4413      	add	r3, r2
 8002edc:	3384      	adds	r3, #132	; 0x84
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	01db      	lsls	r3, r3, #7
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3384      	adds	r3, #132	; 0x84
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	01db      	lsls	r3, r3, #7
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3384      	adds	r3, #132	; 0x84
 8002f20:	461a      	mov	r2, r3
 8002f22:	2300      	movs	r3, #0
 8002f24:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	01db      	lsls	r3, r3, #7
 8002f40:	440b      	add	r3, r1
 8002f42:	3384      	adds	r3, #132	; 0x84
 8002f44:	4619      	mov	r1, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	01db      	lsls	r3, r3, #7
 8002f56:	4413      	add	r3, r2
 8002f58:	3384      	adds	r3, #132	; 0x84
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	4611      	mov	r1, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	01d2      	lsls	r2, r2, #7
 8002f66:	440a      	add	r2, r1
 8002f68:	3284      	adds	r2, #132	; 0x84
 8002f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	01db      	lsls	r3, r3, #7
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3384      	adds	r3, #132	; 0x84
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	01db      	lsls	r3, r3, #7
 8002f90:	4413      	add	r3, r2
 8002f92:	3384      	adds	r3, #132	; 0x84
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	01d2      	lsls	r2, r2, #7
 8002fa0:	440a      	add	r2, r1
 8002fa2:	3284      	adds	r2, #132	; 0x84
 8002fa4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fa8:	f023 0307 	bic.w	r3, r3, #7
 8002fac:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	6809      	ldr	r1, [r1, #0]
 8002fba:	4608      	mov	r0, r1
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	01c9      	lsls	r1, r1, #7
 8002fc0:	4401      	add	r1, r0
 8002fc2:	3184      	adds	r1, #132	; 0x84
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	01db      	lsls	r3, r3, #7
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3384      	adds	r3, #132	; 0x84
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	01db      	lsls	r3, r3, #7
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3384      	adds	r3, #132	; 0x84
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2300      	movs	r3, #0
 8002fea:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	01db      	lsls	r3, r3, #7
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3384      	adds	r3, #132	; 0x84
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800300a:	2304      	movs	r3, #4
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e01b      	b.n	8003048 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d102      	bne.n	800301e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003018:	2303      	movs	r3, #3
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	e014      	b.n	8003048 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b04      	cmp	r3, #4
 8003024:	d00b      	beq.n	800303e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800302a:	2b02      	cmp	r3, #2
 800302c:	d007      	beq.n	800303e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003032:	2b03      	cmp	r3, #3
 8003034:	d003      	beq.n	800303e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800303a:	2b07      	cmp	r3, #7
 800303c:	d102      	bne.n	8003044 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800303e:	2302      	movs	r3, #2
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	e001      	b.n	8003048 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003044:	2301      	movs	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	01db      	lsls	r3, r3, #7
 8003052:	4413      	add	r3, r2
 8003054:	3384      	adds	r3, #132	; 0x84
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	4611      	mov	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	01d2      	lsls	r2, r2, #7
 8003062:	440a      	add	r2, r1
 8003064:	3284      	adds	r2, #132	; 0x84
 8003066:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800306a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	041a      	lsls	r2, r3, #16
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	1acb      	subs	r3, r1, r3
 8003082:	69f9      	ldr	r1, [r7, #28]
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	3303      	adds	r3, #3
 800308a:	68f9      	ldr	r1, [r7, #12]
 800308c:	6809      	ldr	r1, [r1, #0]
 800308e:	4608      	mov	r0, r1
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	01c9      	lsls	r1, r1, #7
 8003094:	4401      	add	r1, r0
 8003096:	3184      	adds	r1, #132	; 0x84
 8003098:	4313      	orrs	r3, r2
 800309a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	01db      	lsls	r3, r3, #7
 80030a6:	4413      	add	r3, r2
 80030a8:	3384      	adds	r3, #132	; 0x84
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	4611      	mov	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	01d2      	lsls	r2, r2, #7
 80030b6:	440a      	add	r2, r1
 80030b8:	3284      	adds	r2, #132	; 0x84
 80030ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030be:	f023 0307 	bic.w	r3, r3, #7
 80030c2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	01db      	lsls	r3, r3, #7
 80030ce:	4413      	add	r3, r2
 80030d0:	3384      	adds	r3, #132	; 0x84
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	01db      	lsls	r3, r3, #7
 80030e4:	4413      	add	r3, r2
 80030e6:	3384      	adds	r3, #132	; 0x84
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	4611      	mov	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	01d2      	lsls	r2, r2, #7
 80030f4:	440a      	add	r2, r1
 80030f6:	3284      	adds	r2, #132	; 0x84
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6013      	str	r3, [r2, #0]
}
 80030fe:	bf00      	nop
 8003100:	3724      	adds	r7, #36	; 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e25b      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d075      	beq.n	8003216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800312a:	4ba3      	ldr	r3, [pc, #652]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b04      	cmp	r3, #4
 8003134:	d00c      	beq.n	8003150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003136:	4ba0      	ldr	r3, [pc, #640]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800313e:	2b08      	cmp	r3, #8
 8003140:	d112      	bne.n	8003168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003142:	4b9d      	ldr	r3, [pc, #628]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314e:	d10b      	bne.n	8003168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	4b99      	ldr	r3, [pc, #612]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d05b      	beq.n	8003214 <HAL_RCC_OscConfig+0x108>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d157      	bne.n	8003214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e236      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d106      	bne.n	8003180 <HAL_RCC_OscConfig+0x74>
 8003172:	4b91      	ldr	r3, [pc, #580]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a90      	ldr	r2, [pc, #576]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e01d      	b.n	80031bc <HAL_RCC_OscConfig+0xb0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x98>
 800318a:	4b8b      	ldr	r3, [pc, #556]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a8a      	ldr	r2, [pc, #552]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b88      	ldr	r3, [pc, #544]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a87      	ldr	r2, [pc, #540]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e00b      	b.n	80031bc <HAL_RCC_OscConfig+0xb0>
 80031a4:	4b84      	ldr	r3, [pc, #528]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a83      	ldr	r2, [pc, #524]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b81      	ldr	r3, [pc, #516]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a80      	ldr	r2, [pc, #512]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fe ff96 	bl	80020f4 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fe ff92 	bl	80020f4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1fb      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0xc0>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe ff82 	bl	80020f4 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe ff7e 	bl	80020f4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1e7      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0xe8>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d063      	beq.n	80032ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003222:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322e:	4b62      	ldr	r3, [pc, #392]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003236:	2b08      	cmp	r3, #8
 8003238:	d11c      	bne.n	8003274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323a:	4b5f      	ldr	r3, [pc, #380]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d116      	bne.n	8003274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	4b5c      	ldr	r3, [pc, #368]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_RCC_OscConfig+0x152>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d001      	beq.n	800325e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e1bb      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325e:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4952      	ldr	r1, [pc, #328]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	e03a      	b.n	80032ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327c:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <HAL_RCC_OscConfig+0x2b0>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fe ff37 	bl	80020f4 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328a:	f7fe ff33 	bl	80020f4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e19c      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a8:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4940      	ldr	r1, [pc, #256]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
 80032bc:	e015      	b.n	80032ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCC_OscConfig+0x2b0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe ff16 	bl	80020f4 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fe ff12 	bl	80020f4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e17b      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d030      	beq.n	8003358 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <HAL_RCC_OscConfig+0x2b4>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe fef6 	bl	80020f4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330c:	f7fe fef2 	bl	80020f4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e15b      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x200>
 800332a:	e015      	b.n	8003358 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332c:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <HAL_RCC_OscConfig+0x2b4>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003332:	f7fe fedf 	bl	80020f4 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333a:	f7fe fedb 	bl	80020f4 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e144      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800334e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a0 	beq.w	80034a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10f      	bne.n	8003396 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a0e      	ldr	r2, [pc, #56]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_OscConfig+0x2b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d121      	bne.n	80033e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <HAL_RCC_OscConfig+0x2b8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a07      	ldr	r2, [pc, #28]	; (80033c4 <HAL_RCC_OscConfig+0x2b8>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7fe fea1 	bl	80020f4 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e011      	b.n	80033da <HAL_RCC_OscConfig+0x2ce>
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470000 	.word	0x42470000
 80033c0:	42470e80 	.word	0x42470e80
 80033c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c8:	f7fe fe94 	bl	80020f4 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0fd      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_OscConfig+0x4d4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_OscConfig+0x2f0>
 80033ee:	4b7d      	ldr	r3, [pc, #500]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a7c      	ldr	r2, [pc, #496]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	e01c      	b.n	8003436 <HAL_RCC_OscConfig+0x32a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b05      	cmp	r3, #5
 8003402:	d10c      	bne.n	800341e <HAL_RCC_OscConfig+0x312>
 8003404:	4b77      	ldr	r3, [pc, #476]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4a76      	ldr	r2, [pc, #472]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 800340a:	f043 0304 	orr.w	r3, r3, #4
 800340e:	6713      	str	r3, [r2, #112]	; 0x70
 8003410:	4b74      	ldr	r3, [pc, #464]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	4a73      	ldr	r2, [pc, #460]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	; 0x70
 800341c:	e00b      	b.n	8003436 <HAL_RCC_OscConfig+0x32a>
 800341e:	4b71      	ldr	r3, [pc, #452]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	4a70      	ldr	r2, [pc, #448]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
 800342a:	4b6e      	ldr	r3, [pc, #440]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a6d      	ldr	r2, [pc, #436]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 8003430:	f023 0304 	bic.w	r3, r3, #4
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d015      	beq.n	800346a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe fe59 	bl	80020f4 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fe fe55 	bl	80020f4 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0bc      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345c:	4b61      	ldr	r3, [pc, #388]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ee      	beq.n	8003446 <HAL_RCC_OscConfig+0x33a>
 8003468:	e014      	b.n	8003494 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346a:	f7fe fe43 	bl	80020f4 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fe fe3f 	bl	80020f4 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0a6      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003488:	4b56      	ldr	r3, [pc, #344]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1ee      	bne.n	8003472 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003494:	7dfb      	ldrb	r3, [r7, #23]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d105      	bne.n	80034a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349a:	4b52      	ldr	r3, [pc, #328]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a51      	ldr	r2, [pc, #324]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 80034a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8092 	beq.w	80035d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d05c      	beq.n	8003576 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d141      	bne.n	8003548 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c4:	4b48      	ldr	r3, [pc, #288]	; (80035e8 <HAL_RCC_OscConfig+0x4dc>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fe fe13 	bl	80020f4 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d2:	f7fe fe0f 	bl	80020f4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e078      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e4:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	019b      	lsls	r3, r3, #6
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	3b01      	subs	r3, #1
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	061b      	lsls	r3, r3, #24
 8003514:	4933      	ldr	r1, [pc, #204]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351a:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <HAL_RCC_OscConfig+0x4dc>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe fde8 	bl	80020f4 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003528:	f7fe fde4 	bl	80020f4 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e04d      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353a:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x41c>
 8003546:	e045      	b.n	80035d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <HAL_RCC_OscConfig+0x4dc>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fe fdd1 	bl	80020f4 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003556:	f7fe fdcd 	bl	80020f4 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e036      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003568:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f0      	bne.n	8003556 <HAL_RCC_OscConfig+0x44a>
 8003574:	e02e      	b.n	80035d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e029      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003582:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <HAL_RCC_OscConfig+0x4d8>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	429a      	cmp	r2, r3
 8003594:	d11c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d115      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035aa:	4013      	ands	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d10d      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40007000 	.word	0x40007000
 80035e4:	40023800 	.word	0x40023800
 80035e8:	42470060 	.word	0x42470060

080035ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0cc      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d90c      	bls.n	8003628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0b8      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800364a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a52      	ldr	r2, [pc, #328]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	494d      	ldr	r1, [pc, #308]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d044      	beq.n	800370c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d119      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e067      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f023 0203 	bic.w	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4934      	ldr	r1, [pc, #208]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036dc:	f7fe fd0a 	bl	80020f4 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e4:	f7fe fd06 	bl	80020f4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e04f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 020c 	and.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	429a      	cmp	r2, r3
 800370a:	d1eb      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d20c      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e032      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4916      	ldr	r1, [pc, #88]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	490e      	ldr	r1, [pc, #56]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003772:	f000 f821 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8003776:	4601      	mov	r1, r0
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	fa21 f303 	lsr.w	r3, r1, r3
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fc6a 	bl	800206c <HAL_InitTick>

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023c00 	.word	0x40023c00
 80037a8:	40023800 	.word	0x40023800
 80037ac:	08004064 	.word	0x08004064
 80037b0:	20005140 	.word	0x20005140
 80037b4:	20005148 	.word	0x20005148

080037b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	2300      	movs	r3, #0
 80037c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ce:	4b50      	ldr	r3, [pc, #320]	; (8003910 <HAL_RCC_GetSysClockFreq+0x158>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d007      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0x32>
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d008      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x38>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 808d 	bne.w	80038fe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037e4:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <HAL_RCC_GetSysClockFreq+0x15c>)
 80037e6:	60bb      	str	r3, [r7, #8]
       break;
 80037e8:	e08c      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ea:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <HAL_RCC_GetSysClockFreq+0x160>)
 80037ec:	60bb      	str	r3, [r7, #8]
      break;
 80037ee:	e089      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037f0:	4b47      	ldr	r3, [pc, #284]	; (8003910 <HAL_RCC_GetSysClockFreq+0x158>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037fa:	4b45      	ldr	r3, [pc, #276]	; (8003910 <HAL_RCC_GetSysClockFreq+0x158>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d023      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003806:	4b42      	ldr	r3, [pc, #264]	; (8003910 <HAL_RCC_GetSysClockFreq+0x158>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	099b      	lsrs	r3, r3, #6
 800380c:	f04f 0400 	mov.w	r4, #0
 8003810:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	ea03 0501 	and.w	r5, r3, r1
 800381c:	ea04 0602 	and.w	r6, r4, r2
 8003820:	4a3d      	ldr	r2, [pc, #244]	; (8003918 <HAL_RCC_GetSysClockFreq+0x160>)
 8003822:	fb02 f106 	mul.w	r1, r2, r6
 8003826:	2200      	movs	r2, #0
 8003828:	fb02 f205 	mul.w	r2, r2, r5
 800382c:	440a      	add	r2, r1
 800382e:	493a      	ldr	r1, [pc, #232]	; (8003918 <HAL_RCC_GetSysClockFreq+0x160>)
 8003830:	fba5 0101 	umull	r0, r1, r5, r1
 8003834:	1853      	adds	r3, r2, r1
 8003836:	4619      	mov	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f04f 0400 	mov.w	r4, #0
 800383e:	461a      	mov	r2, r3
 8003840:	4623      	mov	r3, r4
 8003842:	f7fc fcd3 	bl	80001ec <__aeabi_uldivmod>
 8003846:	4603      	mov	r3, r0
 8003848:	460c      	mov	r4, r1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e049      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384e:	4b30      	ldr	r3, [pc, #192]	; (8003910 <HAL_RCC_GetSysClockFreq+0x158>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	f04f 0400 	mov.w	r4, #0
 8003858:	f240 11ff 	movw	r1, #511	; 0x1ff
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	ea03 0501 	and.w	r5, r3, r1
 8003864:	ea04 0602 	and.w	r6, r4, r2
 8003868:	4629      	mov	r1, r5
 800386a:	4632      	mov	r2, r6
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	f04f 0400 	mov.w	r4, #0
 8003874:	0154      	lsls	r4, r2, #5
 8003876:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800387a:	014b      	lsls	r3, r1, #5
 800387c:	4619      	mov	r1, r3
 800387e:	4622      	mov	r2, r4
 8003880:	1b49      	subs	r1, r1, r5
 8003882:	eb62 0206 	sbc.w	r2, r2, r6
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	f04f 0400 	mov.w	r4, #0
 800388e:	0194      	lsls	r4, r2, #6
 8003890:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003894:	018b      	lsls	r3, r1, #6
 8003896:	1a5b      	subs	r3, r3, r1
 8003898:	eb64 0402 	sbc.w	r4, r4, r2
 800389c:	f04f 0100 	mov.w	r1, #0
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	00e2      	lsls	r2, r4, #3
 80038a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038aa:	00d9      	lsls	r1, r3, #3
 80038ac:	460b      	mov	r3, r1
 80038ae:	4614      	mov	r4, r2
 80038b0:	195b      	adds	r3, r3, r5
 80038b2:	eb44 0406 	adc.w	r4, r4, r6
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	02a2      	lsls	r2, r4, #10
 80038c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038c4:	0299      	lsls	r1, r3, #10
 80038c6:	460b      	mov	r3, r1
 80038c8:	4614      	mov	r4, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	4621      	mov	r1, r4
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f04f 0400 	mov.w	r4, #0
 80038d4:	461a      	mov	r2, r3
 80038d6:	4623      	mov	r3, r4
 80038d8:	f7fc fc88 	bl	80001ec <__aeabi_uldivmod>
 80038dc:	4603      	mov	r3, r0
 80038de:	460c      	mov	r4, r1
 80038e0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_GetSysClockFreq+0x158>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	0c1b      	lsrs	r3, r3, #16
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	3301      	adds	r3, #1
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	60bb      	str	r3, [r7, #8]
      break;
 80038fc:	e002      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003900:	60bb      	str	r3, [r7, #8]
      break;
 8003902:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003904:	68bb      	ldr	r3, [r7, #8]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	00f42400 	.word	0x00f42400
 8003918:	017d7840 	.word	0x017d7840

0800391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_RCC_GetHCLKFreq+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20005140 	.word	0x20005140

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003938:	f7ff fff0 	bl	800391c <HAL_RCC_GetHCLKFreq>
 800393c:	4601      	mov	r1, r0
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a9b      	lsrs	r3, r3, #10
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4a03      	ldr	r2, [pc, #12]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40023800 	.word	0x40023800
 8003958:	08004074 	.word	0x08004074

0800395c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800398c:	2b00      	cmp	r3, #0
 800398e:	d075      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003990:	4bad      	ldr	r3, [pc, #692]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003996:	f7fe fbad 	bl	80020f4 <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800399e:	f7fe fba9 	bl	80020f4 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e18b      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039b0:	4ba6      	ldr	r3, [pc, #664]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f0      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d009      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	019a      	lsls	r2, r3, #6
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	071b      	lsls	r3, r3, #28
 80039d4:	499d      	ldr	r1, [pc, #628]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01f      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039e8:	4b98      	ldr	r3, [pc, #608]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ee:	0f1b      	lsrs	r3, r3, #28
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	019a      	lsls	r2, r3, #6
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	431a      	orrs	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	071b      	lsls	r3, r3, #28
 8003a08:	4990      	ldr	r1, [pc, #576]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a10:	4b8e      	ldr	r3, [pc, #568]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a16:	f023 021f 	bic.w	r2, r3, #31
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	498a      	ldr	r1, [pc, #552]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00d      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	019a      	lsls	r2, r3, #6
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	061b      	lsls	r3, r3, #24
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	071b      	lsls	r3, r3, #28
 8003a48:	4980      	ldr	r1, [pc, #512]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a50:	4b7d      	ldr	r3, [pc, #500]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a56:	f7fe fb4d 	bl	80020f4 <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a5e:	f7fe fb49 	bl	80020f4 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e12b      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a70:	4b76      	ldr	r3, [pc, #472]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d079      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a94:	4b6e      	ldr	r3, [pc, #440]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a9a:	f7fe fb2b 	bl	80020f4 <HAL_GetTick>
 8003a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003aa2:	f7fe fb27 	bl	80020f4 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e109      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ab4:	4b65      	ldr	r3, [pc, #404]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac0:	d0ef      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d020      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ace:	4b5f      	ldr	r3, [pc, #380]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	0f1b      	lsrs	r3, r3, #28
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	019a      	lsls	r2, r3, #6
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	071b      	lsls	r3, r3, #28
 8003aee:	4957      	ldr	r1, [pc, #348]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003af6:	4b55      	ldr	r3, [pc, #340]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	4950      	ldr	r1, [pc, #320]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01e      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b1c:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	0e1b      	lsrs	r3, r3, #24
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	019a      	lsls	r2, r3, #6
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	061b      	lsls	r3, r3, #24
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	071b      	lsls	r3, r3, #28
 8003b3c:	4943      	ldr	r1, [pc, #268]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b44:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	493e      	ldr	r1, [pc, #248]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fe fac8 	bl	80020f4 <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b68:	f7fe fac4 	bl	80020f4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0a6      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b7a:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b86:	d1ef      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 808d 	beq.w	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a2b      	ldr	r2, [pc, #172]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba6:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bb2:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bbe:	f7fe fa99 	bl	80020f4 <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fe fa95 	bl	80020f4 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e077      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d039      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d032      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c0c:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c12:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c18:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d11e      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c2a:	f7fe fa63 	bl	80020f4 <HAL_GetTick>
 8003c2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e014      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fe fa5f 	bl	80020f4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d90b      	bls.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e03f      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003c48:	42470068 	.word	0x42470068
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	42470070 	.word	0x42470070
 8003c54:	40007000 	.word	0x40007000
 8003c58:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0e4      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c74:	d10d      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003c76:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8a:	4911      	ldr	r1, [pc, #68]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]
 8003c90:	e005      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c9c:	6093      	str	r3, [r2, #8]
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003caa:	4909      	ldr	r1, [pc, #36]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003cc2:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003cc4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	424711e0 	.word	0x424711e0

08003cd8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e025      	b.n	8003d38 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fd f9b3 	bl	800106c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f000 f875 	bl	8003e08 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	461a      	mov	r2, r3
 8003d28:	6839      	ldr	r1, [r7, #0]
 8003d2a:	f000 f8e0 	bl	8003eee <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e056      	b.n	8003e00 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d106      	bne.n	8003d72 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7fd f8a3 	bl	8000eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	ea42 0103 	orr.w	r1, r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	f003 0104 	and.w	r1, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d029      	beq.n	8003e76 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e32:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003e3c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8003e42:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8003e48:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8003e4e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8003e54:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8003e5a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8003e60:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8003e66:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e034      	b.n	8003ee0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e82:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003e8c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8003e92:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ea6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003eaa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003eb4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8003eba:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8003ec0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8003ec6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8003ecc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b087      	sub	sp, #28
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d02e      	beq.n	8003f66 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f14:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003f24:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003f2e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003f38:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003f42:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003f4c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003f56:	4313      	orrs	r3, r2
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	e03b      	b.n	8003fde <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f76:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f9c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003fac:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003fb6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003fc0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <__libc_init_array>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	4e0d      	ldr	r6, [pc, #52]	; (8004024 <__libc_init_array+0x38>)
 8003ff0:	4c0d      	ldr	r4, [pc, #52]	; (8004028 <__libc_init_array+0x3c>)
 8003ff2:	1ba4      	subs	r4, r4, r6
 8003ff4:	10a4      	asrs	r4, r4, #2
 8003ff6:	2500      	movs	r5, #0
 8003ff8:	42a5      	cmp	r5, r4
 8003ffa:	d109      	bne.n	8004010 <__libc_init_array+0x24>
 8003ffc:	4e0b      	ldr	r6, [pc, #44]	; (800402c <__libc_init_array+0x40>)
 8003ffe:	4c0c      	ldr	r4, [pc, #48]	; (8004030 <__libc_init_array+0x44>)
 8004000:	f000 f820 	bl	8004044 <_init>
 8004004:	1ba4      	subs	r4, r4, r6
 8004006:	10a4      	asrs	r4, r4, #2
 8004008:	2500      	movs	r5, #0
 800400a:	42a5      	cmp	r5, r4
 800400c:	d105      	bne.n	800401a <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004014:	4798      	blx	r3
 8004016:	3501      	adds	r5, #1
 8004018:	e7ee      	b.n	8003ff8 <__libc_init_array+0xc>
 800401a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800401e:	4798      	blx	r3
 8004020:	3501      	adds	r5, #1
 8004022:	e7f2      	b.n	800400a <__libc_init_array+0x1e>
 8004024:	08004584 	.word	0x08004584
 8004028:	08004584 	.word	0x08004584
 800402c:	08004584 	.word	0x08004584
 8004030:	08004588 	.word	0x08004588

08004034 <memset>:
 8004034:	4402      	add	r2, r0
 8004036:	4603      	mov	r3, r0
 8004038:	4293      	cmp	r3, r2
 800403a:	d100      	bne.n	800403e <memset+0xa>
 800403c:	4770      	bx	lr
 800403e:	f803 1b01 	strb.w	r1, [r3], #1
 8004042:	e7f9      	b.n	8004038 <memset+0x4>

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr

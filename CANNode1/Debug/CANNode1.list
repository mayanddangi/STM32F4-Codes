
CANNode1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001954  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001a14  08001a14  00011a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a44  08001a44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a44  08001a44  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a44  08001a44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a44  08001a44  00011a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a48  08001a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08001a58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08001a58  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000042a5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f87  00000000  00000000  000242d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004a8  00000000  00000000  00025260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000410  00000000  00000000  00025708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ca5  00000000  00000000  00025b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000499c  00000000  00000000  0003c7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000828ff  00000000  00000000  00041159  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3a58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f04  00000000  00000000  000c3ad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080019fc 	.word	0x080019fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080019fc 	.word	0x080019fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9e2 	bl	80005ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f848 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8bc 	bl	80003a8 <MX_GPIO_Init>
  MX_CAN_Init();
 8000230:	f000 f884 	bl	800033c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  canfil.FilterBank = 0;
 8000234:	4b1e      	ldr	r3, [pc, #120]	; (80002b0 <main+0x90>)
 8000236:	2200      	movs	r2, #0
 8000238:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800023a:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <main+0x90>)
 800023c:	2200      	movs	r2, #0
 800023e:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <main+0x90>)
 8000242:	2200      	movs	r2, #0
 8000244:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 8000246:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <main+0x90>)
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 800024c:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <main+0x90>)
 800024e:	2200      	movs	r2, #0
 8000250:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <main+0x90>)
 8000254:	2200      	movs	r2, #0
 8000256:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 8000258:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <main+0x90>)
 800025a:	2200      	movs	r2, #0
 800025c:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800025e:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <main+0x90>)
 8000260:	2201      	movs	r2, #1
 8000262:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <main+0x90>)
 8000266:	2201      	movs	r2, #1
 8000268:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 0;
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <main+0x90>)
 800026c:	2200      	movs	r2, #0
 800026e:	625a      	str	r2, [r3, #36]	; 0x24

  txHeader.DLC = 8;
 8000270:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <main+0x94>)
 8000272:	2208      	movs	r2, #8
 8000274:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <main+0x94>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 800027c:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <main+0x94>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x018;
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <main+0x94>)
 8000284:	2218      	movs	r2, #24
 8000286:	601a      	str	r2, [r3, #0]
  txHeader.TransmitGlobalTime = DISABLE;
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <main+0x94>)
 800028a:	2200      	movs	r2, #0
 800028c:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan,&canfil);
 800028e:	4a08      	ldr	r2, [pc, #32]	; (80002b0 <main+0x90>)
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <main+0x98>)
 8000292:	0011      	movs	r1, r2
 8000294:	0018      	movs	r0, r3
 8000296:	f000 fb0b 	bl	80008b0 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 800029a:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <main+0x98>)
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fbf9 	bl	8000a94 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <main+0x98>)
 80002a4:	2102      	movs	r1, #2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fc3a 	bl	8000b20 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ac:	e7fe      	b.n	80002ac <main+0x8c>
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	20000084 	.word	0x20000084
 80002b4:	20000028 	.word	0x20000028
 80002b8:	2000005c 	.word	0x2000005c

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b093      	sub	sp, #76	; 0x4c
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2414      	movs	r4, #20
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	2334      	movs	r3, #52	; 0x34
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f001 fb8d 	bl	80019ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	0018      	movs	r0, r3
 80002d6:	2310      	movs	r3, #16
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f001 fb86 	bl	80019ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e0:	0021      	movs	r1, r4
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2202      	movs	r2, #2
 80002e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2201      	movs	r2, #1
 80002ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2210      	movs	r2, #16
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fe73 	bl	8000fe8 <HAL_RCC_OscConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000306:	f000 f899 	bl	800043c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2207      	movs	r2, #7
 800030e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2100      	movs	r1, #0
 8000326:	0018      	movs	r0, r3
 8000328:	f001 f9e4 	bl	80016f4 <HAL_RCC_ClockConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000330:	f000 f884 	bl	800043c <Error_Handler>
  }
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b013      	add	sp, #76	; 0x4c
 800033a:	bd90      	pop	{r4, r7, pc}

0800033c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_CAN_Init+0x64>)
 8000342:	4a18      	ldr	r2, [pc, #96]	; (80003a4 <MX_CAN_Init+0x68>)
 8000344:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_CAN_Init+0x64>)
 8000348:	2210      	movs	r2, #16
 800034a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_CAN_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_CAN_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_CAN_Init+0x64>)
 800035a:	2280      	movs	r2, #128	; 0x80
 800035c:	0252      	lsls	r2, r2, #9
 800035e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_CAN_Init+0x64>)
 8000362:	2200      	movs	r2, #0
 8000364:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_CAN_Init+0x64>)
 8000368:	2200      	movs	r2, #0
 800036a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_CAN_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_CAN_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_CAN_Init+0x64>)
 800037a:	2201      	movs	r2, #1
 800037c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_CAN_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_CAN_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <MX_CAN_Init+0x64>)
 800038c:	0018      	movs	r0, r3
 800038e:	f000 f991 	bl	80006b4 <HAL_CAN_Init>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000396:	f000 f851 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000005c 	.word	0x2000005c
 80003a4:	40006400 	.word	0x40006400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b089      	sub	sp, #36	; 0x24
 80003ac:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	240c      	movs	r4, #12
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	0018      	movs	r0, r3
 80003b4:	2314      	movs	r3, #20
 80003b6:	001a      	movs	r2, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	f001 fb17 	bl	80019ec <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003c0:	695a      	ldr	r2, [r3, #20]
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003c4:	2180      	movs	r1, #128	; 0x80
 80003c6:	02c9      	lsls	r1, r1, #11
 80003c8:	430a      	orrs	r2, r1
 80003ca:	615a      	str	r2, [r3, #20]
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003ce:	695a      	ldr	r2, [r3, #20]
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	02db      	lsls	r3, r3, #11
 80003d4:	4013      	ands	r3, r2
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003dc:	695a      	ldr	r2, [r3, #20]
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003e0:	2180      	movs	r1, #128	; 0x80
 80003e2:	0289      	lsls	r1, r1, #10
 80003e4:	430a      	orrs	r2, r1
 80003e6:	615a      	str	r2, [r3, #20]
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003ea:	695a      	ldr	r2, [r3, #20]
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	029b      	lsls	r3, r3, #10
 80003f0:	4013      	ands	r3, r2
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80003f6:	23e0      	movs	r3, #224	; 0xe0
 80003f8:	01db      	lsls	r3, r3, #7
 80003fa:	480f      	ldr	r0, [pc, #60]	; (8000438 <MX_GPIO_Init+0x90>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	0019      	movs	r1, r3
 8000400:	f000 fdd4 	bl	8000fac <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PB12 PB13 PB14 */
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000404:	193b      	adds	r3, r7, r4
 8000406:	22e0      	movs	r2, #224	; 0xe0
 8000408:	01d2      	lsls	r2, r2, #7
 800040a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	193b      	adds	r3, r7, r4
 800040e:	2201      	movs	r2, #1
 8000410:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	193b      	adds	r3, r7, r4
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	193b      	adds	r3, r7, r4
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041e:	193b      	adds	r3, r7, r4
 8000420:	4a05      	ldr	r2, [pc, #20]	; (8000438 <MX_GPIO_Init+0x90>)
 8000422:	0019      	movs	r1, r3
 8000424:	0010      	movs	r0, r2
 8000426:	f000 fc59 	bl	8000cdc <HAL_GPIO_Init>

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b009      	add	sp, #36	; 0x24
 8000430:	bd90      	pop	{r4, r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	40021000 	.word	0x40021000
 8000438:	48000400 	.word	0x48000400

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <HAL_MspInit+0x44>)
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <HAL_MspInit+0x44>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_MspInit+0x44>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <HAL_MspInit+0x44>)
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <HAL_MspInit+0x44>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0549      	lsls	r1, r1, #21
 8000470:	430a      	orrs	r2, r1
 8000472:	61da      	str	r2, [r3, #28]
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <HAL_MspInit+0x44>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	055b      	lsls	r3, r3, #21
 800047c:	4013      	ands	r3, r2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b002      	add	sp, #8
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40021000 	.word	0x40021000

08000490 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08a      	sub	sp, #40	; 0x28
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000498:	2314      	movs	r3, #20
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	0018      	movs	r0, r3
 800049e:	2314      	movs	r3, #20
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f001 faa2 	bl	80019ec <memset>
  if(hcan->Instance==CAN)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <HAL_CAN_MspInit+0x94>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d133      	bne.n	800051a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <HAL_CAN_MspInit+0x98>)
 80004b4:	69da      	ldr	r2, [r3, #28]
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <HAL_CAN_MspInit+0x98>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	0489      	lsls	r1, r1, #18
 80004bc:	430a      	orrs	r2, r1
 80004be:	61da      	str	r2, [r3, #28]
 80004c0:	4b19      	ldr	r3, [pc, #100]	; (8000528 <HAL_CAN_MspInit+0x98>)
 80004c2:	69da      	ldr	r2, [r3, #28]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	049b      	lsls	r3, r3, #18
 80004c8:	4013      	ands	r3, r2
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <HAL_CAN_MspInit+0x98>)
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_CAN_MspInit+0x98>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0289      	lsls	r1, r1, #10
 80004d8:	430a      	orrs	r2, r1
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_CAN_MspInit+0x98>)
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	029b      	lsls	r3, r3, #10
 80004e4:	4013      	ands	r3, r2
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004ea:	2114      	movs	r1, #20
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	22c0      	movs	r2, #192	; 0xc0
 80004f0:	0152      	lsls	r2, r2, #5
 80004f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2202      	movs	r2, #2
 80004f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2203      	movs	r2, #3
 8000504:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2204      	movs	r2, #4
 800050a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	187a      	adds	r2, r7, r1
 800050e:	2390      	movs	r3, #144	; 0x90
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	0011      	movs	r1, r2
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fbe1 	bl	8000cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b00a      	add	sp, #40	; 0x28
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	40006400 	.word	0x40006400
 8000528:	40021000 	.word	0x40021000

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000554:	f000 f892 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800056c:	4813      	ldr	r0, [pc, #76]	; (80005bc <LoopForever+0x6>)
    LDR R1, [R0]
 800056e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000570:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000572:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <LoopForever+0xa>)
    CMP R1, R2
 8000574:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000576:	d105      	bne.n	8000584 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000578:	4812      	ldr	r0, [pc, #72]	; (80005c4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800057a:	4913      	ldr	r1, [pc, #76]	; (80005c8 <LoopForever+0x12>)
    STR R1, [R0]
 800057c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800057e:	4813      	ldr	r0, [pc, #76]	; (80005cc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000580:	4913      	ldr	r1, [pc, #76]	; (80005d0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000582:	6001      	str	r1, [r0, #0]

08000584 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	4813      	ldr	r0, [pc, #76]	; (80005d4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000586:	4914      	ldr	r1, [pc, #80]	; (80005d8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <LoopForever+0x26>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800059c:	4c11      	ldr	r4, [pc, #68]	; (80005e4 <LoopForever+0x2e>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005aa:	f7ff ffd8 	bl	800055e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005ae:	f001 f9f9 	bl	80019a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b2:	f7ff fe35 	bl	8000220 <main>

080005b6 <LoopForever>:

LoopForever:
    b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   r0, =_estack
 80005b8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80005bc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80005c0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80005c4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80005c8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80005cc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80005d0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005dc:	08001a4c 	.word	0x08001a4c
  ldr r2, =_sbss
 80005e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e4:	200000b4 	.word	0x200000b4

080005e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC1_IRQHandler>
	...

080005ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <HAL_Init+0x24>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_Init+0x24>)
 80005f6:	2110      	movs	r1, #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f809 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000602:	f7ff ff21 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000606:	2300      	movs	r3, #0
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40022000 	.word	0x40022000

08000614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_InitTick+0x5c>)
 800061e:	681c      	ldr	r4, [r3, #0]
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <HAL_InitTick+0x60>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	0019      	movs	r1, r3
 8000626:	23fa      	movs	r3, #250	; 0xfa
 8000628:	0098      	lsls	r0, r3, #2
 800062a:	f7ff fd6d 	bl	8000108 <__udivsi3>
 800062e:	0003      	movs	r3, r0
 8000630:	0019      	movs	r1, r3
 8000632:	0020      	movs	r0, r4
 8000634:	f7ff fd68 	bl	8000108 <__udivsi3>
 8000638:	0003      	movs	r3, r0
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fb41 	bl	8000cc2 <HAL_SYSTICK_Config>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	e00f      	b.n	8000668 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b03      	cmp	r3, #3
 800064c:	d80b      	bhi.n	8000666 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	2301      	movs	r3, #1
 8000652:	425b      	negs	r3, r3
 8000654:	2200      	movs	r2, #0
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fb1e 	bl	8000c98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_InitTick+0x64>)
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	b003      	add	sp, #12
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	20000008 	.word	0x20000008
 8000678:	20000004 	.word	0x20000004

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x1c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	001a      	movs	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_IncTick+0x20>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	18d2      	adds	r2, r2, r3
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <HAL_IncTick+0x20>)
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	20000008 	.word	0x20000008
 800069c:	200000b0 	.word	0x200000b0

080006a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	200000b0 	.word	0x200000b0

080006b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e0f0      	b.n	80008a8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2220      	movs	r2, #32
 80006ca:	5c9b      	ldrb	r3, [r3, r2]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d103      	bne.n	80006da <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fedb 	bl	8000490 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2102      	movs	r1, #2
 80006e6:	438a      	bics	r2, r1
 80006e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006ea:	f7ff ffd9 	bl	80006a0 <HAL_GetTick>
 80006ee:	0003      	movs	r3, r0
 80006f0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006f2:	e013      	b.n	800071c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006f4:	f7ff ffd4 	bl	80006a0 <HAL_GetTick>
 80006f8:	0002      	movs	r2, r0
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	2b0a      	cmp	r3, #10
 8000700:	d90c      	bls.n	800071c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0292      	lsls	r2, r2, #10
 800070a:	431a      	orrs	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2220      	movs	r2, #32
 8000714:	2105      	movs	r1, #5
 8000716:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e0c5      	b.n	80008a8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	2202      	movs	r2, #2
 8000724:	4013      	ands	r3, r2
 8000726:	d1e5      	bne.n	80006f4 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2101      	movs	r1, #1
 8000734:	430a      	orrs	r2, r1
 8000736:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000738:	f7ff ffb2 	bl	80006a0 <HAL_GetTick>
 800073c:	0003      	movs	r3, r0
 800073e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000740:	e013      	b.n	800076a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000742:	f7ff ffad 	bl	80006a0 <HAL_GetTick>
 8000746:	0002      	movs	r2, r0
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	2b0a      	cmp	r3, #10
 800074e:	d90c      	bls.n	800076a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	0292      	lsls	r2, r2, #10
 8000758:	431a      	orrs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2220      	movs	r2, #32
 8000762:	2105      	movs	r1, #5
 8000764:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e09e      	b.n	80008a8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	2201      	movs	r2, #1
 8000772:	4013      	ands	r3, r2
 8000774:	d0e5      	beq.n	8000742 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7e1b      	ldrb	r3, [r3, #24]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d108      	bne.n	8000790 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	430a      	orrs	r2, r1
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e007      	b.n	80007a0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	438a      	bics	r2, r1
 800079e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7e5b      	ldrb	r3, [r3, #25]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d108      	bne.n	80007ba <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	430a      	orrs	r2, r1
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e007      	b.n	80007ca <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	438a      	bics	r2, r1
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7e9b      	ldrb	r3, [r3, #26]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d108      	bne.n	80007e4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2120      	movs	r1, #32
 80007de:	430a      	orrs	r2, r1
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e007      	b.n	80007f4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2120      	movs	r1, #32
 80007f0:	438a      	bics	r2, r1
 80007f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7edb      	ldrb	r3, [r3, #27]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d108      	bne.n	800080e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2110      	movs	r1, #16
 8000808:	438a      	bics	r2, r1
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e007      	b.n	800081e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2110      	movs	r1, #16
 800081a:	430a      	orrs	r2, r1
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7f1b      	ldrb	r3, [r3, #28]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d108      	bne.n	8000838 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2108      	movs	r1, #8
 8000832:	430a      	orrs	r2, r1
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e007      	b.n	8000848 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2108      	movs	r1, #8
 8000844:	438a      	bics	r2, r1
 8000846:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7f5b      	ldrb	r3, [r3, #29]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d108      	bne.n	8000862 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2104      	movs	r1, #4
 800085c:	430a      	orrs	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	e007      	b.n	8000872 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2104      	movs	r1, #4
 800086e:	438a      	bics	r2, r1
 8000870:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	431a      	orrs	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	431a      	orrs	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	431a      	orrs	r2, r3
 8000888:	0011      	movs	r1, r2
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	1e5a      	subs	r2, r3, #1
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	430a      	orrs	r2, r1
 8000896:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2220      	movs	r2, #32
 80008a2:	2101      	movs	r1, #1
 80008a4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b004      	add	sp, #16
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008c0:	2013      	movs	r0, #19
 80008c2:	183b      	adds	r3, r7, r0
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	2120      	movs	r1, #32
 80008c8:	5c52      	ldrb	r2, [r2, r1]
 80008ca:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80008cc:	183b      	adds	r3, r7, r0
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d005      	beq.n	80008e0 <HAL_CAN_ConfigFilter+0x30>
 80008d4:	2313      	movs	r3, #19
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d000      	beq.n	80008e0 <HAL_CAN_ConfigFilter+0x30>
 80008de:	e0cd      	b.n	8000a7c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	58d3      	ldr	r3, [r2, r3]
 80008e8:	2201      	movs	r2, #1
 80008ea:	431a      	orrs	r2, r3
 80008ec:	0011      	movs	r1, r2
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	221f      	movs	r2, #31
 80008fc:	4013      	ands	r3, r2
 80008fe:	2201      	movs	r2, #1
 8000900:	409a      	lsls	r2, r3
 8000902:	0013      	movs	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	2387      	movs	r3, #135	; 0x87
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	58d3      	ldr	r3, [r2, r3]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	43d2      	mvns	r2, r2
 8000912:	401a      	ands	r2, r3
 8000914:	0011      	movs	r1, r2
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	2387      	movs	r3, #135	; 0x87
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d129      	bne.n	800097a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	2383      	movs	r3, #131	; 0x83
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	58d3      	ldr	r3, [r2, r3]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	43d2      	mvns	r2, r2
 8000932:	401a      	ands	r2, r3
 8000934:	0011      	movs	r1, r2
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	2383      	movs	r3, #131	; 0x83
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	041b      	lsls	r3, r3, #16
 800094a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000950:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	3248      	adds	r2, #72	; 0x48
 8000956:	00d2      	lsls	r2, r2, #3
 8000958:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	041b      	lsls	r3, r3, #16
 8000966:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800096c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800096e:	6979      	ldr	r1, [r7, #20]
 8000970:	3348      	adds	r3, #72	; 0x48
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	18cb      	adds	r3, r1, r3
 8000976:	3304      	adds	r3, #4
 8000978:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d128      	bne.n	80009d4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	2383      	movs	r3, #131	; 0x83
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	58d2      	ldr	r2, [r2, r3]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	431a      	orrs	r2, r3
 800098e:	0011      	movs	r1, r2
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	2383      	movs	r3, #131	; 0x83
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	041b      	lsls	r3, r3, #16
 80009a4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009aa:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3248      	adds	r2, #72	; 0x48
 80009b0:	00d2      	lsls	r2, r2, #3
 80009b2:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	041b      	lsls	r3, r3, #16
 80009c0:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009c8:	6979      	ldr	r1, [r7, #20]
 80009ca:	3348      	adds	r3, #72	; 0x48
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	18cb      	adds	r3, r1, r3
 80009d0:	3304      	adds	r3, #4
 80009d2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10c      	bne.n	80009f6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	2381      	movs	r3, #129	; 0x81
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	58d3      	ldr	r3, [r2, r3]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	43d2      	mvns	r2, r2
 80009e8:	401a      	ands	r2, r3
 80009ea:	0011      	movs	r1, r2
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	2381      	movs	r3, #129	; 0x81
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	50d1      	str	r1, [r2, r3]
 80009f4:	e00a      	b.n	8000a0c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	2381      	movs	r3, #129	; 0x81
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	58d2      	ldr	r2, [r2, r3]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	431a      	orrs	r2, r3
 8000a02:	0011      	movs	r1, r2
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	2381      	movs	r3, #129	; 0x81
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d10c      	bne.n	8000a2e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	2385      	movs	r3, #133	; 0x85
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	58d3      	ldr	r3, [r2, r3]
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	43d2      	mvns	r2, r2
 8000a20:	401a      	ands	r2, r3
 8000a22:	0011      	movs	r1, r2
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	2385      	movs	r3, #133	; 0x85
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	50d1      	str	r1, [r2, r3]
 8000a2c:	e00a      	b.n	8000a44 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	2385      	movs	r3, #133	; 0x85
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58d2      	ldr	r2, [r2, r3]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	2385      	movs	r3, #133	; 0x85
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	6a1b      	ldr	r3, [r3, #32]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d10a      	bne.n	8000a62 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	2387      	movs	r3, #135	; 0x87
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	58d2      	ldr	r2, [r2, r3]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	431a      	orrs	r2, r3
 8000a58:	0011      	movs	r1, r2
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	2387      	movs	r3, #135	; 0x87
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	58d3      	ldr	r3, [r2, r3]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4393      	bics	r3, r2
 8000a6e:	0019      	movs	r1, r3
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e007      	b.n	8000a8c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	02d2      	lsls	r2, r2, #11
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
  }
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b006      	add	sp, #24
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	5c9b      	ldrb	r3, [r3, r2]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d12f      	bne.n	8000b08 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2102      	movs	r1, #2
 8000aae:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2101      	movs	r1, #1
 8000abc:	438a      	bics	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ac0:	f7ff fdee 	bl	80006a0 <HAL_GetTick>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ac8:	e013      	b.n	8000af2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aca:	f7ff fde9 	bl	80006a0 <HAL_GetTick>
 8000ace:	0002      	movs	r2, r0
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	2b0a      	cmp	r3, #10
 8000ad6:	d90c      	bls.n	8000af2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	0292      	lsls	r2, r2, #10
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2220      	movs	r2, #32
 8000aea:	2105      	movs	r1, #5
 8000aec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e012      	b.n	8000b18 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4013      	ands	r3, r2
 8000afc:	d1e5      	bne.n	8000aca <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e007      	b.n	8000b18 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	0312      	lsls	r2, r2, #12
 8000b10:	431a      	orrs	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
  }
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b004      	add	sp, #16
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	183b      	adds	r3, r7, r0
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	2120      	movs	r1, #32
 8000b32:	5c52      	ldrb	r2, [r2, r1]
 8000b34:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b36:	183b      	adds	r3, r7, r0
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d004      	beq.n	8000b48 <HAL_CAN_ActivateNotification+0x28>
 8000b3e:	230f      	movs	r3, #15
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d109      	bne.n	8000b5c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6959      	ldr	r1, [r3, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e007      	b.n	8000b6c <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	02d2      	lsls	r2, r2, #11
 8000b64:	431a      	orrs	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
  }
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b004      	add	sp, #16
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b7f      	cmp	r3, #127	; 0x7f
 8000b88:	d828      	bhi.n	8000bdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <__NVIC_SetPriority+0xd4>)
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	33c0      	adds	r3, #192	; 0xc0
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	589b      	ldr	r3, [r3, r2]
 8000b9a:	1dfa      	adds	r2, r7, #7
 8000b9c:	7812      	ldrb	r2, [r2, #0]
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	00d2      	lsls	r2, r2, #3
 8000ba6:	21ff      	movs	r1, #255	; 0xff
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	000a      	movs	r2, r1
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	401a      	ands	r2, r3
 8000bb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	019b      	lsls	r3, r3, #6
 8000bb6:	22ff      	movs	r2, #255	; 0xff
 8000bb8:	401a      	ands	r2, r3
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	4003      	ands	r3, r0
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc8:	481f      	ldr	r0, [pc, #124]	; (8000c48 <__NVIC_SetPriority+0xd4>)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	33c0      	adds	r3, #192	; 0xc0
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bda:	e031      	b.n	8000c40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <__NVIC_SetPriority+0xd8>)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	0019      	movs	r1, r3
 8000be4:	230f      	movs	r3, #15
 8000be6:	400b      	ands	r3, r1
 8000be8:	3b08      	subs	r3, #8
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	3306      	adds	r3, #6
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	18d3      	adds	r3, r2, r3
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1dfa      	adds	r2, r7, #7
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	400a      	ands	r2, r1
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	21ff      	movs	r1, #255	; 0xff
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	019b      	lsls	r3, r3, #6
 8000c12:	22ff      	movs	r2, #255	; 0xff
 8000c14:	401a      	ands	r2, r3
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	4003      	ands	r3, r0
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	001c      	movs	r4, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	4023      	ands	r3, r4
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	430a      	orrs	r2, r1
 8000c36:	3306      	adds	r3, #6
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	18c3      	adds	r3, r0, r3
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b003      	add	sp, #12
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <SysTick_Config+0x40>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d901      	bls.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e010      	b.n	8000c88 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <SysTick_Config+0x44>)
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	3a01      	subs	r2, #1
 8000c6c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	425b      	negs	r3, r3
 8000c72:	2103      	movs	r1, #3
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff7d 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SysTick_Config+0x44>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x44>)
 8000c82:	2207      	movs	r2, #7
 8000c84:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	00ffffff 	.word	0x00ffffff
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	1c02      	adds	r2, r0, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ffbf 	bl	8000c50 <SysTick_Config>
 8000cd2:	0003      	movs	r3, r0
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cea:	e149      	b.n	8000f80 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d100      	bne.n	8000d04 <HAL_GPIO_Init+0x28>
 8000d02:	e13a      	b.n	8000f7a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d00b      	beq.n	8000d24 <HAL_GPIO_Init+0x48>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d007      	beq.n	8000d24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d18:	2b11      	cmp	r3, #17
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b12      	cmp	r3, #18
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	409a      	lsls	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	2201      	movs	r2, #1
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0xea>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d123      	bne.n	8000e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	08da      	lsrs	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3208      	adds	r2, #8
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	58d3      	ldr	r3, [r2, r3]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	4013      	ands	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	220f      	movs	r2, #15
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	43da      	mvns	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2107      	movs	r1, #7
 8000df2:	400b      	ands	r3, r1
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	6939      	ldr	r1, [r7, #16]
 8000e0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	055b      	lsls	r3, r3, #21
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d100      	bne.n	8000e50 <HAL_GPIO_Init+0x174>
 8000e4e:	e094      	b.n	8000f7a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	4b51      	ldr	r3, [pc, #324]	; (8000f98 <HAL_GPIO_Init+0x2bc>)
 8000e52:	699a      	ldr	r2, [r3, #24]
 8000e54:	4b50      	ldr	r3, [pc, #320]	; (8000f98 <HAL_GPIO_Init+0x2bc>)
 8000e56:	2101      	movs	r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	619a      	str	r2, [r3, #24]
 8000e5c:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <HAL_GPIO_Init+0x2bc>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	2201      	movs	r2, #1
 8000e62:	4013      	ands	r3, r2
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e68:	4a4c      	ldr	r2, [pc, #304]	; (8000f9c <HAL_GPIO_Init+0x2c0>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	589b      	ldr	r3, [r3, r2]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	409a      	lsls	r2, r3
 8000e82:	0013      	movs	r3, r2
 8000e84:	43da      	mvns	r2, r3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	2390      	movs	r3, #144	; 0x90
 8000e90:	05db      	lsls	r3, r3, #23
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x1d6>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a41      	ldr	r2, [pc, #260]	; (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x1d2>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a40      	ldr	r2, [pc, #256]	; (8000fa4 <HAL_GPIO_Init+0x2c8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x1ce>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e004      	b.n	8000eb4 <HAL_GPIO_Init+0x1d8>
 8000eaa:	2305      	movs	r3, #5
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_Init+0x1d8>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <HAL_GPIO_Init+0x1d8>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	400a      	ands	r2, r1
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec4:	4935      	ldr	r1, [pc, #212]	; (8000f9c <HAL_GPIO_Init+0x2c0>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	025b      	lsls	r3, r3, #9
 8000eea:	4013      	ands	r3, r2
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000efc:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43da      	mvns	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	029b      	lsls	r3, r3, #10
 8000f14:	4013      	ands	r3, r2
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	035b      	lsls	r3, r3, #13
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	039b      	lsls	r3, r3, #14
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	40da      	lsrs	r2, r3
 8000f88:	1e13      	subs	r3, r2, #0
 8000f8a:	d000      	beq.n	8000f8e <HAL_GPIO_Init+0x2b2>
 8000f8c:	e6ae      	b.n	8000cec <HAL_GPIO_Init+0x10>
  } 
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b006      	add	sp, #24
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	48000400 	.word	0x48000400
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	40010400 	.word	0x40010400

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	0008      	movs	r0, r1
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	1cbb      	adds	r3, r7, #2
 8000fba:	1c02      	adds	r2, r0, #0
 8000fbc:	801a      	strh	r2, [r3, #0]
 8000fbe:	1c7b      	adds	r3, r7, #1
 8000fc0:	1c0a      	adds	r2, r1, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc4:	1c7b      	adds	r3, r7, #1
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fcc:	1cbb      	adds	r3, r7, #2
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd6:	1cbb      	adds	r3, r7, #2
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f000 fb76 	bl	80016e8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2201      	movs	r2, #1
 8001002:	4013      	ands	r3, r2
 8001004:	d100      	bne.n	8001008 <HAL_RCC_OscConfig+0x20>
 8001006:	e08e      	b.n	8001126 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001008:	4bc5      	ldr	r3, [pc, #788]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	220c      	movs	r2, #12
 800100e:	4013      	ands	r3, r2
 8001010:	2b04      	cmp	r3, #4
 8001012:	d00e      	beq.n	8001032 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001014:	4bc2      	ldr	r3, [pc, #776]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	220c      	movs	r2, #12
 800101a:	4013      	ands	r3, r2
 800101c:	2b08      	cmp	r3, #8
 800101e:	d117      	bne.n	8001050 <HAL_RCC_OscConfig+0x68>
 8001020:	4bbf      	ldr	r3, [pc, #764]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	23c0      	movs	r3, #192	; 0xc0
 8001026:	025b      	lsls	r3, r3, #9
 8001028:	401a      	ands	r2, r3
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	025b      	lsls	r3, r3, #9
 800102e:	429a      	cmp	r2, r3
 8001030:	d10e      	bne.n	8001050 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001032:	4bbb      	ldr	r3, [pc, #748]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	029b      	lsls	r3, r3, #10
 800103a:	4013      	ands	r3, r2
 800103c:	d100      	bne.n	8001040 <HAL_RCC_OscConfig+0x58>
 800103e:	e071      	b.n	8001124 <HAL_RCC_OscConfig+0x13c>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d000      	beq.n	800104a <HAL_RCC_OscConfig+0x62>
 8001048:	e06c      	b.n	8001124 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	f000 fb4c 	bl	80016e8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d107      	bne.n	8001068 <HAL_RCC_OscConfig+0x80>
 8001058:	4bb1      	ldr	r3, [pc, #708]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4bb0      	ldr	r3, [pc, #704]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	0249      	lsls	r1, r1, #9
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e02f      	b.n	80010c8 <HAL_RCC_OscConfig+0xe0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10c      	bne.n	800108a <HAL_RCC_OscConfig+0xa2>
 8001070:	4bab      	ldr	r3, [pc, #684]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4baa      	ldr	r3, [pc, #680]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001076:	49ab      	ldr	r1, [pc, #684]	; (8001324 <HAL_RCC_OscConfig+0x33c>)
 8001078:	400a      	ands	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	4ba8      	ldr	r3, [pc, #672]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4ba7      	ldr	r3, [pc, #668]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001082:	49a9      	ldr	r1, [pc, #676]	; (8001328 <HAL_RCC_OscConfig+0x340>)
 8001084:	400a      	ands	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e01e      	b.n	80010c8 <HAL_RCC_OscConfig+0xe0>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b05      	cmp	r3, #5
 8001090:	d10e      	bne.n	80010b0 <HAL_RCC_OscConfig+0xc8>
 8001092:	4ba3      	ldr	r3, [pc, #652]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4ba2      	ldr	r3, [pc, #648]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	02c9      	lsls	r1, r1, #11
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	4b9f      	ldr	r3, [pc, #636]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b9e      	ldr	r3, [pc, #632]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	0249      	lsls	r1, r1, #9
 80010aa:	430a      	orrs	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e00b      	b.n	80010c8 <HAL_RCC_OscConfig+0xe0>
 80010b0:	4b9b      	ldr	r3, [pc, #620]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b9a      	ldr	r3, [pc, #616]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80010b6:	499b      	ldr	r1, [pc, #620]	; (8001324 <HAL_RCC_OscConfig+0x33c>)
 80010b8:	400a      	ands	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	4b98      	ldr	r3, [pc, #608]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b97      	ldr	r3, [pc, #604]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80010c2:	4999      	ldr	r1, [pc, #612]	; (8001328 <HAL_RCC_OscConfig+0x340>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d014      	beq.n	80010fa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fae6 	bl	80006a0 <HAL_GetTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010da:	f7ff fae1 	bl	80006a0 <HAL_GetTick>
 80010de:	0002      	movs	r2, r0
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b64      	cmp	r3, #100	; 0x64
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e2fd      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ec:	4b8c      	ldr	r3, [pc, #560]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	4013      	ands	r3, r2
 80010f6:	d0f0      	beq.n	80010da <HAL_RCC_OscConfig+0xf2>
 80010f8:	e015      	b.n	8001126 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fad1 	bl	80006a0 <HAL_GetTick>
 80010fe:	0003      	movs	r3, r0
 8001100:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff facc 	bl	80006a0 <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	; 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e2e8      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	4b82      	ldr	r3, [pc, #520]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	029b      	lsls	r3, r3, #10
 800111e:	4013      	ands	r3, r2
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x11c>
 8001122:	e000      	b.n	8001126 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2202      	movs	r2, #2
 800112c:	4013      	ands	r3, r2
 800112e:	d100      	bne.n	8001132 <HAL_RCC_OscConfig+0x14a>
 8001130:	e06c      	b.n	800120c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001132:	4b7b      	ldr	r3, [pc, #492]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	220c      	movs	r2, #12
 8001138:	4013      	ands	r3, r2
 800113a:	d00e      	beq.n	800115a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800113c:	4b78      	ldr	r3, [pc, #480]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	220c      	movs	r2, #12
 8001142:	4013      	ands	r3, r2
 8001144:	2b08      	cmp	r3, #8
 8001146:	d11f      	bne.n	8001188 <HAL_RCC_OscConfig+0x1a0>
 8001148:	4b75      	ldr	r3, [pc, #468]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	23c0      	movs	r3, #192	; 0xc0
 800114e:	025b      	lsls	r3, r3, #9
 8001150:	401a      	ands	r2, r3
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	429a      	cmp	r2, r3
 8001158:	d116      	bne.n	8001188 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115a:	4b71      	ldr	r3, [pc, #452]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2202      	movs	r2, #2
 8001160:	4013      	ands	r3, r2
 8001162:	d005      	beq.n	8001170 <HAL_RCC_OscConfig+0x188>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d001      	beq.n	8001170 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e2bb      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b6b      	ldr	r3, [pc, #428]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	22f8      	movs	r2, #248	; 0xf8
 8001176:	4393      	bics	r3, r2
 8001178:	0019      	movs	r1, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	00da      	lsls	r2, r3, #3
 8001180:	4b67      	ldr	r3, [pc, #412]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001182:	430a      	orrs	r2, r1
 8001184:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	e041      	b.n	800120c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d024      	beq.n	80011da <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001190:	4b63      	ldr	r3, [pc, #396]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b62      	ldr	r3, [pc, #392]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001196:	2101      	movs	r1, #1
 8001198:	430a      	orrs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fa80 	bl	80006a0 <HAL_GetTick>
 80011a0:	0003      	movs	r3, r0
 80011a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fa7b 	bl	80006a0 <HAL_GetTick>
 80011aa:	0002      	movs	r2, r0
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e297      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	4b59      	ldr	r3, [pc, #356]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2202      	movs	r2, #2
 80011be:	4013      	ands	r3, r2
 80011c0:	d0f1      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b57      	ldr	r3, [pc, #348]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	22f8      	movs	r2, #248	; 0xf8
 80011c8:	4393      	bics	r3, r2
 80011ca:	0019      	movs	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	00da      	lsls	r2, r3, #3
 80011d2:	4b53      	ldr	r3, [pc, #332]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e018      	b.n	800120c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011da:	4b51      	ldr	r3, [pc, #324]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b50      	ldr	r3, [pc, #320]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	438a      	bics	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fa5b 	bl	80006a0 <HAL_GetTick>
 80011ea:	0003      	movs	r3, r0
 80011ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fa56 	bl	80006a0 <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e272      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2202      	movs	r2, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d1f1      	bne.n	80011f0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2208      	movs	r2, #8
 8001212:	4013      	ands	r3, r2
 8001214:	d036      	beq.n	8001284 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d019      	beq.n	8001252 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	4b40      	ldr	r3, [pc, #256]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001224:	2101      	movs	r1, #1
 8001226:	430a      	orrs	r2, r1
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fa39 	bl	80006a0 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fa34 	bl	80006a0 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e250      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	2202      	movs	r2, #2
 800124c:	4013      	ands	r3, r2
 800124e:	d0f1      	beq.n	8001234 <HAL_RCC_OscConfig+0x24c>
 8001250:	e018      	b.n	8001284 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001256:	4b32      	ldr	r3, [pc, #200]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001258:	2101      	movs	r1, #1
 800125a:	438a      	bics	r2, r1
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125e:	f7ff fa1f 	bl	80006a0 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fa1a 	bl	80006a0 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e236      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	2202      	movs	r2, #2
 8001280:	4013      	ands	r3, r2
 8001282:	d1f1      	bne.n	8001268 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2204      	movs	r2, #4
 800128a:	4013      	ands	r3, r2
 800128c:	d100      	bne.n	8001290 <HAL_RCC_OscConfig+0x2a8>
 800128e:	e0b5      	b.n	80013fc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001290:	231f      	movs	r3, #31
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 800129a:	69da      	ldr	r2, [r3, #28]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	055b      	lsls	r3, r3, #21
 80012a0:	4013      	ands	r3, r2
 80012a2:	d111      	bne.n	80012c8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80012a6:	69da      	ldr	r2, [r3, #28]
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	0549      	lsls	r1, r1, #21
 80012ae:	430a      	orrs	r2, r1
 80012b0:	61da      	str	r2, [r3, #28]
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80012b4:	69da      	ldr	r2, [r3, #28]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	055b      	lsls	r3, r3, #21
 80012ba:	4013      	ands	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012c0:	231f      	movs	r3, #31
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_RCC_OscConfig+0x344>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	d11a      	bne.n	800130a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_RCC_OscConfig+0x344>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_RCC_OscConfig+0x344>)
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	0049      	lsls	r1, r1, #1
 80012de:	430a      	orrs	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e2:	f7ff f9dd 	bl	80006a0 <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ec:	f7ff f9d8 	bl	80006a0 <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1f4      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_RCC_OscConfig+0x344>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4013      	ands	r3, r2
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10e      	bne.n	8001330 <HAL_RCC_OscConfig+0x348>
 8001312:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001314:	6a1a      	ldr	r2, [r3, #32]
 8001316:	4b02      	ldr	r3, [pc, #8]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 8001318:	2101      	movs	r1, #1
 800131a:	430a      	orrs	r2, r1
 800131c:	621a      	str	r2, [r3, #32]
 800131e:	e035      	b.n	800138c <HAL_RCC_OscConfig+0x3a4>
 8001320:	40021000 	.word	0x40021000
 8001324:	fffeffff 	.word	0xfffeffff
 8001328:	fffbffff 	.word	0xfffbffff
 800132c:	40007000 	.word	0x40007000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10c      	bne.n	8001352 <HAL_RCC_OscConfig+0x36a>
 8001338:	4bca      	ldr	r3, [pc, #808]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800133a:	6a1a      	ldr	r2, [r3, #32]
 800133c:	4bc9      	ldr	r3, [pc, #804]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800133e:	2101      	movs	r1, #1
 8001340:	438a      	bics	r2, r1
 8001342:	621a      	str	r2, [r3, #32]
 8001344:	4bc7      	ldr	r3, [pc, #796]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001346:	6a1a      	ldr	r2, [r3, #32]
 8001348:	4bc6      	ldr	r3, [pc, #792]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800134a:	2104      	movs	r1, #4
 800134c:	438a      	bics	r2, r1
 800134e:	621a      	str	r2, [r3, #32]
 8001350:	e01c      	b.n	800138c <HAL_RCC_OscConfig+0x3a4>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b05      	cmp	r3, #5
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x38c>
 800135a:	4bc2      	ldr	r3, [pc, #776]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	4bc1      	ldr	r3, [pc, #772]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001360:	2104      	movs	r1, #4
 8001362:	430a      	orrs	r2, r1
 8001364:	621a      	str	r2, [r3, #32]
 8001366:	4bbf      	ldr	r3, [pc, #764]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001368:	6a1a      	ldr	r2, [r3, #32]
 800136a:	4bbe      	ldr	r3, [pc, #760]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800136c:	2101      	movs	r1, #1
 800136e:	430a      	orrs	r2, r1
 8001370:	621a      	str	r2, [r3, #32]
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0x3a4>
 8001374:	4bbb      	ldr	r3, [pc, #748]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4bba      	ldr	r3, [pc, #744]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800137a:	2101      	movs	r1, #1
 800137c:	438a      	bics	r2, r1
 800137e:	621a      	str	r2, [r3, #32]
 8001380:	4bb8      	ldr	r3, [pc, #736]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	4bb7      	ldr	r3, [pc, #732]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001386:	2104      	movs	r1, #4
 8001388:	438a      	bics	r2, r1
 800138a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d014      	beq.n	80013be <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001394:	f7ff f984 	bl	80006a0 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	e009      	b.n	80013b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff f97f 	bl	80006a0 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	4aaf      	ldr	r2, [pc, #700]	; (8001668 <HAL_RCC_OscConfig+0x680>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e19a      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b2:	4bac      	ldr	r3, [pc, #688]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x3b6>
 80013bc:	e013      	b.n	80013e6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff f96f 	bl	80006a0 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c6:	e009      	b.n	80013dc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff f96a 	bl	80006a0 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	4aa5      	ldr	r2, [pc, #660]	; (8001668 <HAL_RCC_OscConfig+0x680>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e185      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013dc:	4ba1      	ldr	r3, [pc, #644]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	2202      	movs	r2, #2
 80013e2:	4013      	ands	r3, r2
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013e6:	231f      	movs	r3, #31
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f0:	4b9c      	ldr	r3, [pc, #624]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80013f2:	69da      	ldr	r2, [r3, #28]
 80013f4:	4b9b      	ldr	r3, [pc, #620]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80013f6:	499d      	ldr	r1, [pc, #628]	; (800166c <HAL_RCC_OscConfig+0x684>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2210      	movs	r2, #16
 8001402:	4013      	ands	r3, r2
 8001404:	d063      	beq.n	80014ce <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d12a      	bne.n	8001464 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800140e:	4b95      	ldr	r3, [pc, #596]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001412:	4b94      	ldr	r3, [pc, #592]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001414:	2104      	movs	r1, #4
 8001416:	430a      	orrs	r2, r1
 8001418:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800141a:	4b92      	ldr	r3, [pc, #584]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800141c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800141e:	4b91      	ldr	r3, [pc, #580]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001420:	2101      	movs	r1, #1
 8001422:	430a      	orrs	r2, r1
 8001424:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff f93b 	bl	80006a0 <HAL_GetTick>
 800142a:	0003      	movs	r3, r0
 800142c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001430:	f7ff f936 	bl	80006a0 <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e152      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001442:	4b88      	ldr	r3, [pc, #544]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	d0f1      	beq.n	8001430 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800144c:	4b85      	ldr	r3, [pc, #532]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001450:	22f8      	movs	r2, #248	; 0xf8
 8001452:	4393      	bics	r3, r2
 8001454:	0019      	movs	r1, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	00da      	lsls	r2, r3, #3
 800145c:	4b81      	ldr	r3, [pc, #516]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
 8001462:	e034      	b.n	80014ce <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	3305      	adds	r3, #5
 800146a:	d111      	bne.n	8001490 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800146c:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800146e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001470:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001472:	2104      	movs	r1, #4
 8001474:	438a      	bics	r2, r1
 8001476:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001478:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147c:	22f8      	movs	r2, #248	; 0xf8
 800147e:	4393      	bics	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	00da      	lsls	r2, r3, #3
 8001488:	4b76      	ldr	r3, [pc, #472]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800148a:	430a      	orrs	r2, r1
 800148c:	635a      	str	r2, [r3, #52]	; 0x34
 800148e:	e01e      	b.n	80014ce <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001490:	4b74      	ldr	r3, [pc, #464]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001494:	4b73      	ldr	r3, [pc, #460]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001496:	2104      	movs	r1, #4
 8001498:	430a      	orrs	r2, r1
 800149a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800149c:	4b71      	ldr	r3, [pc, #452]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800149e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a0:	4b70      	ldr	r3, [pc, #448]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	438a      	bics	r2, r1
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff f8fa 	bl	80006a0 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014b2:	f7ff f8f5 	bl	80006a0 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e111      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014c4:	4b67      	ldr	r3, [pc, #412]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80014c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f1      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2220      	movs	r2, #32
 80014d4:	4013      	ands	r3, r2
 80014d6:	d05c      	beq.n	8001592 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014d8:	4b62      	ldr	r3, [pc, #392]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	220c      	movs	r2, #12
 80014de:	4013      	ands	r3, r2
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d00e      	beq.n	8001502 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014e4:	4b5f      	ldr	r3, [pc, #380]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	220c      	movs	r2, #12
 80014ea:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d114      	bne.n	800151a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014f0:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	23c0      	movs	r3, #192	; 0xc0
 80014f6:	025b      	lsls	r3, r3, #9
 80014f8:	401a      	ands	r2, r3
 80014fa:	23c0      	movs	r3, #192	; 0xc0
 80014fc:	025b      	lsls	r3, r3, #9
 80014fe:	429a      	cmp	r2, r3
 8001500:	d10b      	bne.n	800151a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001502:	4b58      	ldr	r3, [pc, #352]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	4013      	ands	r3, r2
 800150c:	d040      	beq.n	8001590 <HAL_RCC_OscConfig+0x5a8>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d03c      	beq.n	8001590 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0e6      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01b      	beq.n	800155a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001522:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001526:	4b4f      	ldr	r3, [pc, #316]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	0249      	lsls	r1, r1, #9
 800152c:	430a      	orrs	r2, r1
 800152e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff f8b6 	bl	80006a0 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800153a:	f7ff f8b1 	bl	80006a0 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0cd      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800154c:	4b45      	ldr	r3, [pc, #276]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800154e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	025b      	lsls	r3, r3, #9
 8001554:	4013      	ands	r3, r2
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x552>
 8001558:	e01b      	b.n	8001592 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800155a:	4b42      	ldr	r3, [pc, #264]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800155c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001560:	4943      	ldr	r1, [pc, #268]	; (8001670 <HAL_RCC_OscConfig+0x688>)
 8001562:	400a      	ands	r2, r1
 8001564:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff f89b 	bl	80006a0 <HAL_GetTick>
 800156a:	0003      	movs	r3, r0
 800156c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001570:	f7ff f896 	bl	80006a0 <HAL_GetTick>
 8001574:	0002      	movs	r2, r0
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0b2      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	025b      	lsls	r3, r3, #9
 800158a:	4013      	ands	r3, r2
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x588>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001590:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	2b00      	cmp	r3, #0
 8001598:	d100      	bne.n	800159c <HAL_RCC_OscConfig+0x5b4>
 800159a:	e0a4      	b.n	80016e6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	220c      	movs	r2, #12
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d100      	bne.n	80015aa <HAL_RCC_OscConfig+0x5c2>
 80015a8:	e078      	b.n	800169c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d14c      	bne.n	800164c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	492e      	ldr	r1, [pc, #184]	; (8001674 <HAL_RCC_OscConfig+0x68c>)
 80015ba:	400a      	ands	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff f86f 	bl	80006a0 <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff f86a 	bl	80006a0 <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e086      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	049b      	lsls	r3, r3, #18
 80015e2:	4013      	ands	r3, r2
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	220f      	movs	r2, #15
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_RCC_OscConfig+0x690>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	431a      	orrs	r2, r3
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	0449      	lsls	r1, r1, #17
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7ff f83d 	bl	80006a0 <HAL_GetTick>
 8001626:	0003      	movs	r3, r0
 8001628:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff f838 	bl	80006a0 <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e054      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	049b      	lsls	r3, r3, #18
 8001646:	4013      	ands	r3, r2
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x644>
 800164a:	e04c      	b.n	80016e6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <HAL_RCC_OscConfig+0x68c>)
 8001654:	400a      	ands	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff f822 	bl	80006a0 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001660:	e015      	b.n	800168e <HAL_RCC_OscConfig+0x6a6>
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	40021000 	.word	0x40021000
 8001668:	00001388 	.word	0x00001388
 800166c:	efffffff 	.word	0xefffffff
 8001670:	fffeffff 	.word	0xfffeffff
 8001674:	feffffff 	.word	0xfeffffff
 8001678:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f810 	bl	80006a0 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e02c      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_RCC_OscConfig+0x708>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	049b      	lsls	r3, r3, #18
 8001696:	4013      	ands	r3, r2
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x694>
 800169a:	e024      	b.n	80016e6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e01f      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_RCC_OscConfig+0x708>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_RCC_OscConfig+0x708>)
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	23c0      	movs	r3, #192	; 0xc0
 80016b8:	025b      	lsls	r3, r3, #9
 80016ba:	401a      	ands	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d10e      	bne.n	80016e2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	220f      	movs	r2, #15
 80016c8:	401a      	ands	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	23f0      	movs	r3, #240	; 0xf0
 80016d6:	039b      	lsls	r3, r3, #14
 80016d8:	401a      	ands	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	0018      	movs	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b008      	add	sp, #32
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0bf      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b61      	ldr	r3, [pc, #388]	; (8001890 <HAL_RCC_ClockConfig+0x19c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2201      	movs	r2, #1
 800170e:	4013      	ands	r3, r2
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d911      	bls.n	800173a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b5e      	ldr	r3, [pc, #376]	; (8001890 <HAL_RCC_ClockConfig+0x19c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2201      	movs	r2, #1
 800171c:	4393      	bics	r3, r2
 800171e:	0019      	movs	r1, r3
 8001720:	4b5b      	ldr	r3, [pc, #364]	; (8001890 <HAL_RCC_ClockConfig+0x19c>)
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001728:	4b59      	ldr	r3, [pc, #356]	; (8001890 <HAL_RCC_ClockConfig+0x19c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2201      	movs	r2, #1
 800172e:	4013      	ands	r3, r2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0a6      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2202      	movs	r2, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d015      	beq.n	8001770 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2204      	movs	r2, #4
 800174a:	4013      	ands	r3, r2
 800174c:	d006      	beq.n	800175c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800174e:	4b51      	ldr	r3, [pc, #324]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001754:	21e0      	movs	r1, #224	; 0xe0
 8001756:	00c9      	lsls	r1, r1, #3
 8001758:	430a      	orrs	r2, r1
 800175a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175c:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	22f0      	movs	r2, #240	; 0xf0
 8001762:	4393      	bics	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	d04c      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b44      	ldr	r3, [pc, #272]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	029b      	lsls	r3, r3, #10
 800178a:	4013      	ands	r3, r2
 800178c:	d120      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e07a      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	049b      	lsls	r3, r3, #18
 80017a2:	4013      	ands	r3, r2
 80017a4:	d114      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e06e      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017b2:	4b38      	ldr	r3, [pc, #224]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 80017b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	4013      	ands	r3, r2
 80017bc:	d108      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e062      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2202      	movs	r2, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e05b      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	4393      	bics	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7fe ff5c 	bl	80006a0 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ec:	e009      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7fe ff57 	bl	80006a0 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	4a27      	ldr	r2, [pc, #156]	; (8001898 <HAL_RCC_ClockConfig+0x1a4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e042      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	220c      	movs	r2, #12
 8001808:	401a      	ands	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1ec      	bne.n	80017ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_RCC_ClockConfig+0x19c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	4013      	ands	r3, r2
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d211      	bcs.n	8001846 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_RCC_ClockConfig+0x19c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	4393      	bics	r3, r2
 800182a:	0019      	movs	r1, r3
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_RCC_ClockConfig+0x19c>)
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_RCC_ClockConfig+0x19c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e020      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2204      	movs	r2, #4
 800184c:	4013      	ands	r3, r2
 800184e:	d009      	beq.n	8001864 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_RCC_ClockConfig+0x1a8>)
 8001856:	4013      	ands	r3, r2
 8001858:	0019      	movs	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001860:	430a      	orrs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001864:	f000 f820 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
 8001868:	0001      	movs	r1, r0
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	220f      	movs	r2, #15
 8001872:	4013      	ands	r3, r2
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_RCC_ClockConfig+0x1ac>)
 8001876:	5cd3      	ldrb	r3, [r2, r3]
 8001878:	000a      	movs	r2, r1
 800187a:	40da      	lsrs	r2, r3
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_RCC_ClockConfig+0x1b0>)
 800187e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001880:	2000      	movs	r0, #0
 8001882:	f7fe fec7 	bl	8000614 <HAL_InitTick>
  
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	b004      	add	sp, #16
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40022000 	.word	0x40022000
 8001894:	40021000 	.word	0x40021000
 8001898:	00001388 	.word	0x00001388
 800189c:	fffff8ff 	.word	0xfffff8ff
 80018a0:	08001a34 	.word	0x08001a34
 80018a4:	20000000 	.word	0x20000000

080018a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b08f      	sub	sp, #60	; 0x3c
 80018ac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018ae:	2314      	movs	r3, #20
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	4a37      	ldr	r2, [pc, #220]	; (8001990 <HAL_RCC_GetSysClockFreq+0xe8>)
 80018b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018b6:	c313      	stmia	r3!, {r0, r1, r4}
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4a35      	ldr	r2, [pc, #212]	; (8001994 <HAL_RCC_GetSysClockFreq+0xec>)
 80018c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018c2:	c313      	stmia	r3!, {r0, r1, r4}
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018dc:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	220c      	movs	r2, #12
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d006      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x52>
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d043      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0xd0>
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d144      	bne.n	800197e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <HAL_RCC_GetSysClockFreq+0xf4>)
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018f8:	e044      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	0c9b      	lsrs	r3, r3, #18
 80018fe:	220f      	movs	r2, #15
 8001900:	4013      	ands	r3, r2
 8001902:	2214      	movs	r2, #20
 8001904:	18ba      	adds	r2, r7, r2
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <HAL_RCC_GetSysClockFreq+0xf0>)
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	220f      	movs	r2, #15
 8001910:	4013      	ands	r3, r2
 8001912:	1d3a      	adds	r2, r7, #4
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191a:	23c0      	movs	r3, #192	; 0xc0
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	401a      	ands	r2, r3
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	429a      	cmp	r2, r3
 8001926:	d109      	bne.n	800193c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800192a:	481c      	ldr	r0, [pc, #112]	; (800199c <HAL_RCC_GetSysClockFreq+0xf4>)
 800192c:	f7fe fbec 	bl	8000108 <__udivsi3>
 8001930:	0003      	movs	r3, r0
 8001932:	001a      	movs	r2, r3
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	4353      	muls	r3, r2
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
 800193a:	e01a      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800193c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193e:	23c0      	movs	r3, #192	; 0xc0
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	401a      	ands	r2, r3
 8001944:	23c0      	movs	r3, #192	; 0xc0
 8001946:	025b      	lsls	r3, r3, #9
 8001948:	429a      	cmp	r2, r3
 800194a:	d109      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800194c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800194e:	4814      	ldr	r0, [pc, #80]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001950:	f7fe fbda 	bl	8000108 <__udivsi3>
 8001954:	0003      	movs	r3, r0
 8001956:	001a      	movs	r2, r3
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	4353      	muls	r3, r2
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
 800195e:	e008      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001962:	480e      	ldr	r0, [pc, #56]	; (800199c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001964:	f7fe fbd0 	bl	8000108 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	001a      	movs	r2, r3
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	4353      	muls	r3, r2
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001976:	e005      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800197c:	e002      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001982:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b00f      	add	sp, #60	; 0x3c
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	08001a14 	.word	0x08001a14
 8001994:	08001a24 	.word	0x08001a24
 8001998:	40021000 	.word	0x40021000
 800199c:	007a1200 	.word	0x007a1200
 80019a0:	02dc6c00 	.word	0x02dc6c00

080019a4 <__libc_init_array>:
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	2600      	movs	r6, #0
 80019a8:	4d0c      	ldr	r5, [pc, #48]	; (80019dc <__libc_init_array+0x38>)
 80019aa:	4c0d      	ldr	r4, [pc, #52]	; (80019e0 <__libc_init_array+0x3c>)
 80019ac:	1b64      	subs	r4, r4, r5
 80019ae:	10a4      	asrs	r4, r4, #2
 80019b0:	42a6      	cmp	r6, r4
 80019b2:	d109      	bne.n	80019c8 <__libc_init_array+0x24>
 80019b4:	2600      	movs	r6, #0
 80019b6:	f000 f821 	bl	80019fc <_init>
 80019ba:	4d0a      	ldr	r5, [pc, #40]	; (80019e4 <__libc_init_array+0x40>)
 80019bc:	4c0a      	ldr	r4, [pc, #40]	; (80019e8 <__libc_init_array+0x44>)
 80019be:	1b64      	subs	r4, r4, r5
 80019c0:	10a4      	asrs	r4, r4, #2
 80019c2:	42a6      	cmp	r6, r4
 80019c4:	d105      	bne.n	80019d2 <__libc_init_array+0x2e>
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	00b3      	lsls	r3, r6, #2
 80019ca:	58eb      	ldr	r3, [r5, r3]
 80019cc:	4798      	blx	r3
 80019ce:	3601      	adds	r6, #1
 80019d0:	e7ee      	b.n	80019b0 <__libc_init_array+0xc>
 80019d2:	00b3      	lsls	r3, r6, #2
 80019d4:	58eb      	ldr	r3, [r5, r3]
 80019d6:	4798      	blx	r3
 80019d8:	3601      	adds	r6, #1
 80019da:	e7f2      	b.n	80019c2 <__libc_init_array+0x1e>
 80019dc:	08001a44 	.word	0x08001a44
 80019e0:	08001a44 	.word	0x08001a44
 80019e4:	08001a44 	.word	0x08001a44
 80019e8:	08001a48 	.word	0x08001a48

080019ec <memset>:
 80019ec:	0003      	movs	r3, r0
 80019ee:	1812      	adds	r2, r2, r0
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d100      	bne.n	80019f6 <memset+0xa>
 80019f4:	4770      	bx	lr
 80019f6:	7019      	strb	r1, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	e7f9      	b.n	80019f0 <memset+0x4>

080019fc <_init>:
 80019fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a02:	bc08      	pop	{r3}
 8001a04:	469e      	mov	lr, r3
 8001a06:	4770      	bx	lr

08001a08 <_fini>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0e:	bc08      	pop	{r3}
 8001a10:	469e      	mov	lr, r3
 8001a12:	4770      	bx	lr

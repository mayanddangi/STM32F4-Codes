
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002580  08002580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b8  080025b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025b8  080025b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025b8  080025b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080025cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080025cc  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069bc  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001604  00000000  00000000  000269f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  00027ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  000286f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017411  00000000  00000000  00028d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bff  00000000  00000000  00040171  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084ee9  00000000  00000000  00046d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbc59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000176c  00000000  00000000  000cbcd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002568 	.word	0x08002568

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002568 	.word	0x08002568

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f9d9 	bl	80005dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f817 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f89d 	bl	800036c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000232:	f000 f86b 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t data = 132;
 8000236:	1dfb      	adds	r3, r7, #7
 8000238:	2284      	movs	r2, #132	; 0x84
 800023a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, &data, (uint16_t)1, HAL_MAX_DELAY);
 800023c:	2301      	movs	r3, #1
 800023e:	425b      	negs	r3, r3
 8000240:	1df9      	adds	r1, r7, #7
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <main+0x38>)
 8000244:	2201      	movs	r2, #1
 8000246:	f001 fb71 	bl	800192c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800024a:	23fa      	movs	r3, #250	; 0xfa
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fa28 	bl	80006a4 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, &data, (uint16_t)1, HAL_MAX_DELAY);
 8000254:	e7f2      	b.n	800023c <main+0x1c>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	20000028 	.word	0x20000028

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b099      	sub	sp, #100	; 0x64
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	242c      	movs	r4, #44	; 0x2c
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	2334      	movs	r3, #52	; 0x34
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f002 f973 	bl	8002558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000272:	231c      	movs	r3, #28
 8000274:	18fb      	adds	r3, r7, r3
 8000276:	0018      	movs	r0, r3
 8000278:	2310      	movs	r3, #16
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f002 f96b 	bl	8002558 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	0018      	movs	r0, r3
 8000286:	2318      	movs	r3, #24
 8000288:	001a      	movs	r2, r3
 800028a:	2100      	movs	r1, #0
 800028c:	f002 f964 	bl	8002558 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000290:	0021      	movs	r1, r4
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2202      	movs	r2, #2
 8000296:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2201      	movs	r2, #1
 800029c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2210      	movs	r2, #16
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2200      	movs	r2, #0
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fcfd 	bl	8000cac <HAL_RCC_OscConfig>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002b6:	f000 f8a3 	bl	8000400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	211c      	movs	r1, #28
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2207      	movs	r2, #7
 80002c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2100      	movs	r1, #0
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 f86d 	bl	80013b8 <HAL_RCC_ClockConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002e2:	f000 f88d 	bl	8000400 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 f9d7 	bl	80016a8 <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002fe:	f000 f87f 	bl	8000400 <Error_Handler>
  }
}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b019      	add	sp, #100	; 0x64
 8000308:	bd90      	pop	{r4, r7, pc}
	...

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <MX_USART1_UART_Init+0x5c>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000318:	2296      	movs	r2, #150	; 0x96
 800031a:	0212      	lsls	r2, r2, #8
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_USART1_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_USART1_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_USART1_UART_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000350:	0018      	movs	r0, r3
 8000352:	f001 fa97 	bl	8001884 <HAL_UART_Init>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800035a:	f000 f851 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000028 	.word	0x20000028
 8000368:	40013800 	.word	0x40013800

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b089      	sub	sp, #36	; 0x24
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	240c      	movs	r4, #12
 8000374:	193b      	adds	r3, r7, r4
 8000376:	0018      	movs	r0, r3
 8000378:	2314      	movs	r3, #20
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 f8eb 	bl	8002558 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000382:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <MX_GPIO_Init+0x8c>)
 8000384:	695a      	ldr	r2, [r3, #20]
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <MX_GPIO_Init+0x8c>)
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	02c9      	lsls	r1, r1, #11
 800038c:	430a      	orrs	r2, r1
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <MX_GPIO_Init+0x8c>)
 8000392:	695a      	ldr	r2, [r3, #20]
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	02db      	lsls	r3, r3, #11
 8000398:	4013      	ands	r3, r2
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039e:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <MX_GPIO_Init+0x8c>)
 80003a0:	695a      	ldr	r2, [r3, #20]
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_GPIO_Init+0x8c>)
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	0289      	lsls	r1, r1, #10
 80003a8:	430a      	orrs	r2, r1
 80003aa:	615a      	str	r2, [r3, #20]
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_GPIO_Init+0x8c>)
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	029b      	lsls	r3, r3, #10
 80003b4:	4013      	ands	r3, r2
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80003ba:	23e0      	movs	r3, #224	; 0xe0
 80003bc:	01db      	lsls	r3, r3, #7
 80003be:	480f      	ldr	r0, [pc, #60]	; (80003fc <MX_GPIO_Init+0x90>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	0019      	movs	r1, r3
 80003c4:	f000 fc54 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	22e0      	movs	r2, #224	; 0xe0
 80003cc:	01d2      	lsls	r2, r2, #7
 80003ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	2201      	movs	r2, #1
 80003d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	4a05      	ldr	r2, [pc, #20]	; (80003fc <MX_GPIO_Init+0x90>)
 80003e6:	0019      	movs	r1, r3
 80003e8:	0010      	movs	r0, r2
 80003ea:	f000 fad9 	bl	80009a0 <HAL_GPIO_Init>

}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b009      	add	sp, #36	; 0x24
 80003f4:	bd90      	pop	{r4, r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000
 80003fc:	48000400 	.word	0x48000400

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x44>)
 8000414:	699a      	ldr	r2, [r3, #24]
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <HAL_MspInit+0x44>)
 8000418:	2101      	movs	r1, #1
 800041a:	430a      	orrs	r2, r1
 800041c:	619a      	str	r2, [r3, #24]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x44>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	2201      	movs	r2, #1
 8000424:	4013      	ands	r3, r2
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <HAL_MspInit+0x44>)
 800042c:	69da      	ldr	r2, [r3, #28]
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <HAL_MspInit+0x44>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0549      	lsls	r1, r1, #21
 8000434:	430a      	orrs	r2, r1
 8000436:	61da      	str	r2, [r3, #28]
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <HAL_MspInit+0x44>)
 800043a:	69da      	ldr	r2, [r3, #28]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	055b      	lsls	r3, r3, #21
 8000440:	4013      	ands	r3, r2
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	40021000 	.word	0x40021000

08000454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08a      	sub	sp, #40	; 0x28
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	2314      	movs	r3, #20
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	0018      	movs	r0, r3
 8000462:	2314      	movs	r3, #20
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f002 f876 	bl	8002558 <memset>
  if(huart->Instance==USART1)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <HAL_UART_MspInit+0xa4>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d13b      	bne.n	80004ee <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000476:	4b21      	ldr	r3, [pc, #132]	; (80004fc <HAL_UART_MspInit+0xa8>)
 8000478:	699a      	ldr	r2, [r3, #24]
 800047a:	4b20      	ldr	r3, [pc, #128]	; (80004fc <HAL_UART_MspInit+0xa8>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	01c9      	lsls	r1, r1, #7
 8000480:	430a      	orrs	r2, r1
 8000482:	619a      	str	r2, [r3, #24]
 8000484:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <HAL_UART_MspInit+0xa8>)
 8000486:	699a      	ldr	r2, [r3, #24]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	01db      	lsls	r3, r3, #7
 800048c:	4013      	ands	r3, r2
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <HAL_UART_MspInit+0xa8>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b19      	ldr	r3, [pc, #100]	; (80004fc <HAL_UART_MspInit+0xa8>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	0289      	lsls	r1, r1, #10
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b16      	ldr	r3, [pc, #88]	; (80004fc <HAL_UART_MspInit+0xa8>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	029b      	lsls	r3, r3, #10
 80004a8:	4013      	ands	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004ae:	2114      	movs	r1, #20
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	22c0      	movs	r2, #192	; 0xc0
 80004b4:	00d2      	lsls	r2, r2, #3
 80004b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2202      	movs	r2, #2
 80004bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2203      	movs	r2, #3
 80004c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2201      	movs	r2, #1
 80004ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	187a      	adds	r2, r7, r1
 80004d2:	2390      	movs	r3, #144	; 0x90
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	0011      	movs	r1, r2
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fa61 	bl	80009a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	201b      	movs	r0, #27
 80004e4:	f000 f9ac 	bl	8000840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004e8:	201b      	movs	r0, #27
 80004ea:	f000 f9be 	bl	800086a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b00a      	add	sp, #40	; 0x28
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40013800 	.word	0x40013800
 80004fc:	40021000 	.word	0x40021000

08000500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <HardFault_Handler+0x4>

08000510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000528:	f000 f8a0 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <USART1_IRQHandler+0x14>)
 800053a:	0018      	movs	r0, r3
 800053c:	f001 faa0 	bl	8001a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	20000028 	.word	0x20000028

0800054c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000558:	4813      	ldr	r0, [pc, #76]	; (80005a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800055c:	4813      	ldr	r0, [pc, #76]	; (80005ac <LoopForever+0x6>)
    LDR R1, [R0]
 800055e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000560:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000562:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <LoopForever+0xa>)
    CMP R1, R2
 8000564:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000566:	d105      	bne.n	8000574 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000568:	4812      	ldr	r0, [pc, #72]	; (80005b4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800056a:	4913      	ldr	r1, [pc, #76]	; (80005b8 <LoopForever+0x12>)
    STR R1, [R0]
 800056c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800056e:	4813      	ldr	r0, [pc, #76]	; (80005bc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000570:	4913      	ldr	r1, [pc, #76]	; (80005c0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000572:	6001      	str	r1, [r0, #0]

08000574 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000574:	4813      	ldr	r0, [pc, #76]	; (80005c4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000576:	4914      	ldr	r1, [pc, #80]	; (80005c8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000578:	4a14      	ldr	r2, [pc, #80]	; (80005cc <LoopForever+0x26>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800058c:	4c11      	ldr	r4, [pc, #68]	; (80005d4 <LoopForever+0x2e>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800059a:	f7ff ffd7 	bl	800054c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800059e:	f001 ffb7 	bl	8002510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff fe3d 	bl	8000220 <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   r0, =_estack
 80005a8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80005ac:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80005b0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80005b4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80005b8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80005bc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80005c0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005cc:	080025c0 	.word	0x080025c0
  ldr r2, =_sbss
 80005d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d4:	200000b0 	.word	0x200000b0

080005d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_IRQHandler>
	...

080005dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <HAL_Init+0x24>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_Init+0x24>)
 80005e6:	2110      	movs	r1, #16
 80005e8:	430a      	orrs	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f809 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f2:	f7ff ff0b 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40022000 	.word	0x40022000

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <HAL_InitTick+0x5c>)
 800060e:	681c      	ldr	r4, [r3, #0]
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_InitTick+0x60>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	0019      	movs	r1, r3
 8000616:	23fa      	movs	r3, #250	; 0xfa
 8000618:	0098      	lsls	r0, r3, #2
 800061a:	f7ff fd75 	bl	8000108 <__udivsi3>
 800061e:	0003      	movs	r3, r0
 8000620:	0019      	movs	r1, r3
 8000622:	0020      	movs	r0, r4
 8000624:	f7ff fd70 	bl	8000108 <__udivsi3>
 8000628:	0003      	movs	r3, r0
 800062a:	0018      	movs	r0, r3
 800062c:	f000 f92d 	bl	800088a <HAL_SYSTICK_Config>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	e00f      	b.n	8000658 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b03      	cmp	r3, #3
 800063c:	d80b      	bhi.n	8000656 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	2200      	movs	r2, #0
 8000646:	0018      	movs	r0, r3
 8000648:	f000 f8fa 	bl	8000840 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_InitTick+0x64>)
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	0018      	movs	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	b003      	add	sp, #12
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	20000000 	.word	0x20000000
 8000664:	20000008 	.word	0x20000008
 8000668:	20000004 	.word	0x20000004

0800066c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HAL_IncTick+0x1c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	001a      	movs	r2, r3
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_IncTick+0x20>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	18d2      	adds	r2, r2, r3
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_IncTick+0x20>)
 800067e:	601a      	str	r2, [r3, #0]
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	20000008 	.word	0x20000008
 800068c:	200000ac 	.word	0x200000ac

08000690 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  return uwTick;
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <HAL_GetTick+0x10>)
 8000696:	681b      	ldr	r3, [r3, #0]
}
 8000698:	0018      	movs	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	200000ac 	.word	0x200000ac

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f7ff fff0 	bl	8000690 <HAL_GetTick>
 80006b0:	0003      	movs	r3, r0
 80006b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	d005      	beq.n	80006ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_Delay+0x40>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	001a      	movs	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	189b      	adds	r3, r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	f7ff ffe0 	bl	8000690 <HAL_GetTick>
 80006d0:	0002      	movs	r2, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d8f7      	bhi.n	80006cc <HAL_Delay+0x28>
  {
  }
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b004      	add	sp, #16
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000008 	.word	0x20000008

080006e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	0002      	movs	r2, r0
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b7f      	cmp	r3, #127	; 0x7f
 80006fa:	d809      	bhi.n	8000710 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	001a      	movs	r2, r3
 8000702:	231f      	movs	r3, #31
 8000704:	401a      	ands	r2, r3
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__NVIC_EnableIRQ+0x30>)
 8000708:	2101      	movs	r1, #1
 800070a:	4091      	lsls	r1, r2
 800070c:	000a      	movs	r2, r1
 800070e:	601a      	str	r2, [r3, #0]
  }
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b002      	add	sp, #8
 8000716:	bd80      	pop	{r7, pc}
 8000718:	e000e100 	.word	0xe000e100

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	0002      	movs	r2, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b7f      	cmp	r3, #127	; 0x7f
 8000730:	d828      	bhi.n	8000784 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000732:	4a2f      	ldr	r2, [pc, #188]	; (80007f0 <__NVIC_SetPriority+0xd4>)
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b25b      	sxtb	r3, r3
 800073a:	089b      	lsrs	r3, r3, #2
 800073c:	33c0      	adds	r3, #192	; 0xc0
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	589b      	ldr	r3, [r3, r2]
 8000742:	1dfa      	adds	r2, r7, #7
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	0011      	movs	r1, r2
 8000748:	2203      	movs	r2, #3
 800074a:	400a      	ands	r2, r1
 800074c:	00d2      	lsls	r2, r2, #3
 800074e:	21ff      	movs	r1, #255	; 0xff
 8000750:	4091      	lsls	r1, r2
 8000752:	000a      	movs	r2, r1
 8000754:	43d2      	mvns	r2, r2
 8000756:	401a      	ands	r2, r3
 8000758:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	22ff      	movs	r2, #255	; 0xff
 8000760:	401a      	ands	r2, r3
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	0018      	movs	r0, r3
 8000768:	2303      	movs	r3, #3
 800076a:	4003      	ands	r3, r0
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000770:	481f      	ldr	r0, [pc, #124]	; (80007f0 <__NVIC_SetPriority+0xd4>)
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b25b      	sxtb	r3, r3
 8000778:	089b      	lsrs	r3, r3, #2
 800077a:	430a      	orrs	r2, r1
 800077c:	33c0      	adds	r3, #192	; 0xc0
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000782:	e031      	b.n	80007e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <__NVIC_SetPriority+0xd8>)
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	0019      	movs	r1, r3
 800078c:	230f      	movs	r3, #15
 800078e:	400b      	ands	r3, r1
 8000790:	3b08      	subs	r3, #8
 8000792:	089b      	lsrs	r3, r3, #2
 8000794:	3306      	adds	r3, #6
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	3304      	adds	r3, #4
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1dfa      	adds	r2, r7, #7
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	0011      	movs	r1, r2
 80007a4:	2203      	movs	r2, #3
 80007a6:	400a      	ands	r2, r1
 80007a8:	00d2      	lsls	r2, r2, #3
 80007aa:	21ff      	movs	r1, #255	; 0xff
 80007ac:	4091      	lsls	r1, r2
 80007ae:	000a      	movs	r2, r1
 80007b0:	43d2      	mvns	r2, r2
 80007b2:	401a      	ands	r2, r3
 80007b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	019b      	lsls	r3, r3, #6
 80007ba:	22ff      	movs	r2, #255	; 0xff
 80007bc:	401a      	ands	r2, r3
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	0018      	movs	r0, r3
 80007c4:	2303      	movs	r3, #3
 80007c6:	4003      	ands	r3, r0
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <__NVIC_SetPriority+0xd8>)
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	001c      	movs	r4, r3
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	3b08      	subs	r3, #8
 80007da:	089b      	lsrs	r3, r3, #2
 80007dc:	430a      	orrs	r2, r1
 80007de:	3306      	adds	r3, #6
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	18c3      	adds	r3, r0, r3
 80007e4:	3304      	adds	r3, #4
 80007e6:	601a      	str	r2, [r3, #0]
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b003      	add	sp, #12
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <SysTick_Config+0x40>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d901      	bls.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e010      	b.n	8000830 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <SysTick_Config+0x44>)
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	3a01      	subs	r2, #1
 8000814:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	2301      	movs	r3, #1
 8000818:	425b      	negs	r3, r3
 800081a:	2103      	movs	r1, #3
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff ff7d 	bl	800071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <SysTick_Config+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <SysTick_Config+0x44>)
 800082a:	2207      	movs	r2, #7
 800082c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082e:	2300      	movs	r3, #0
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}
 8000838:	00ffffff 	.word	0x00ffffff
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	210f      	movs	r1, #15
 800084c:	187b      	adds	r3, r7, r1
 800084e:	1c02      	adds	r2, r0, #0
 8000850:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	187b      	adds	r3, r7, r1
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b25b      	sxtb	r3, r3
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff ff5d 	bl	800071c <__NVIC_SetPriority>
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b004      	add	sp, #16
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	0002      	movs	r2, r0
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b25b      	sxtb	r3, r3
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff ff33 	bl	80006e8 <__NVIC_EnableIRQ>
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ffaf 	bl	80007f8 <SysTick_Config>
 800089a:	0003      	movs	r3, r0
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2221      	movs	r2, #33	; 0x21
 80008b0:	5c9b      	ldrb	r3, [r3, r2]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d008      	beq.n	80008ca <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2204      	movs	r2, #4
 80008bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2220      	movs	r2, #32
 80008c2:	2100      	movs	r1, #0
 80008c4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e020      	b.n	800090c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	210e      	movs	r1, #14
 80008d6:	438a      	bics	r2, r1
 80008d8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2101      	movs	r1, #1
 80008e6:	438a      	bics	r2, r1
 80008e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f2:	2101      	movs	r1, #1
 80008f4:	4091      	lsls	r1, r2
 80008f6:	000a      	movs	r2, r1
 80008f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2221      	movs	r2, #33	; 0x21
 80008fe:	2101      	movs	r1, #1
 8000900:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2220      	movs	r2, #32
 8000906:	2100      	movs	r1, #0
 8000908:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b002      	add	sp, #8
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800091c:	230f      	movs	r3, #15
 800091e:	18fb      	adds	r3, r7, r3
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2221      	movs	r2, #33	; 0x21
 8000928:	5c9b      	ldrb	r3, [r3, r2]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b02      	cmp	r3, #2
 800092e:	d007      	beq.n	8000940 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2204      	movs	r2, #4
 8000934:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000936:	230f      	movs	r3, #15
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e028      	b.n	8000992 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	210e      	movs	r1, #14
 800094c:	438a      	bics	r2, r1
 800094e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2101      	movs	r1, #1
 800095c:	438a      	bics	r2, r1
 800095e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000968:	2101      	movs	r1, #1
 800096a:	4091      	lsls	r1, r2
 800096c:	000a      	movs	r2, r1
 800096e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2221      	movs	r2, #33	; 0x21
 8000974:	2101      	movs	r1, #1
 8000976:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2220      	movs	r2, #32
 800097c:	2100      	movs	r1, #0
 800097e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000984:	2b00      	cmp	r3, #0
 8000986:	d004      	beq.n	8000992 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	0010      	movs	r0, r2
 8000990:	4798      	blx	r3
    } 
  }
  return status;
 8000992:	230f      	movs	r3, #15
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	781b      	ldrb	r3, [r3, #0]
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b004      	add	sp, #16
 800099e:	bd80      	pop	{r7, pc}

080009a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ae:	e149      	b.n	8000c44 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	697a      	ldr	r2, [r7, #20]
 80009b8:	4091      	lsls	r1, r2
 80009ba:	000a      	movs	r2, r1
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d100      	bne.n	80009c8 <HAL_GPIO_Init+0x28>
 80009c6:	e13a      	b.n	8000c3e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d00b      	beq.n	80009e8 <HAL_GPIO_Init+0x48>
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d007      	beq.n	80009e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009dc:	2b11      	cmp	r3, #17
 80009de:	d003      	beq.n	80009e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b12      	cmp	r3, #18
 80009e6:	d130      	bne.n	8000a4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	2203      	movs	r2, #3
 80009f4:	409a      	lsls	r2, r3
 80009f6:	0013      	movs	r3, r2
 80009f8:	43da      	mvns	r2, r3
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a1e:	2201      	movs	r2, #1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	43da      	mvns	r2, r3
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	091b      	lsrs	r3, r3, #4
 8000a34:	2201      	movs	r2, #1
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0xea>
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2b12      	cmp	r3, #18
 8000a88:	d123      	bne.n	8000ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	08da      	lsrs	r2, r3, #3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3208      	adds	r2, #8
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	58d3      	ldr	r3, [r2, r3]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	2207      	movs	r2, #7
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	691a      	ldr	r2, [r3, #16]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	2107      	movs	r1, #7
 8000ab6:	400b      	ands	r3, r1
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	08da      	lsrs	r2, r3, #3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3208      	adds	r2, #8
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	6939      	ldr	r1, [r7, #16]
 8000ad0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2203      	movs	r2, #3
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2203      	movs	r2, #3
 8000af0:	401a      	ands	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	055b      	lsls	r3, r3, #21
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d100      	bne.n	8000b14 <HAL_GPIO_Init+0x174>
 8000b12:	e094      	b.n	8000c3e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b14:	4b51      	ldr	r3, [pc, #324]	; (8000c5c <HAL_GPIO_Init+0x2bc>)
 8000b16:	699a      	ldr	r2, [r3, #24]
 8000b18:	4b50      	ldr	r3, [pc, #320]	; (8000c5c <HAL_GPIO_Init+0x2bc>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	619a      	str	r2, [r3, #24]
 8000b20:	4b4e      	ldr	r3, [pc, #312]	; (8000c5c <HAL_GPIO_Init+0x2bc>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4013      	ands	r3, r2
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b2c:	4a4c      	ldr	r2, [pc, #304]	; (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	589b      	ldr	r3, [r3, r2]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	4013      	ands	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	220f      	movs	r2, #15
 8000b44:	409a      	lsls	r2, r3
 8000b46:	0013      	movs	r3, r2
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	2390      	movs	r3, #144	; 0x90
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d00d      	beq.n	8000b76 <HAL_GPIO_Init+0x1d6>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a41      	ldr	r2, [pc, #260]	; (8000c64 <HAL_GPIO_Init+0x2c4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d007      	beq.n	8000b72 <HAL_GPIO_Init+0x1d2>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a40      	ldr	r2, [pc, #256]	; (8000c68 <HAL_GPIO_Init+0x2c8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_GPIO_Init+0x1ce>
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	e004      	b.n	8000b78 <HAL_GPIO_Init+0x1d8>
 8000b6e:	2305      	movs	r3, #5
 8000b70:	e002      	b.n	8000b78 <HAL_GPIO_Init+0x1d8>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <HAL_GPIO_Init+0x1d8>
 8000b76:	2300      	movs	r3, #0
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	4093      	lsls	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b88:	4935      	ldr	r1, [pc, #212]	; (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b96:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	025b      	lsls	r3, r3, #9
 8000bae:	4013      	ands	r3, r2
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43da      	mvns	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	029b      	lsls	r3, r3, #10
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	035b      	lsls	r3, r3, #13
 8000c02:	4013      	ands	r3, r2
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43da      	mvns	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	039b      	lsls	r3, r3, #14
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	40da      	lsrs	r2, r3
 8000c4c:	1e13      	subs	r3, r2, #0
 8000c4e:	d000      	beq.n	8000c52 <HAL_GPIO_Init+0x2b2>
 8000c50:	e6ae      	b.n	80009b0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b006      	add	sp, #24
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010000 	.word	0x40010000
 8000c64:	48000400 	.word	0x48000400
 8000c68:	48000800 	.word	0x48000800
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	0008      	movs	r0, r1
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	1cbb      	adds	r3, r7, #2
 8000c7e:	1c02      	adds	r2, r0, #0
 8000c80:	801a      	strh	r2, [r3, #0]
 8000c82:	1c7b      	adds	r3, r7, #1
 8000c84:	1c0a      	adds	r2, r1, #0
 8000c86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c88:	1c7b      	adds	r3, r7, #1
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c90:	1cbb      	adds	r3, r7, #2
 8000c92:	881a      	ldrh	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c98:	e003      	b.n	8000ca2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	881a      	ldrh	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d102      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f000 fb76 	bl	80013ac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d100      	bne.n	8000ccc <HAL_RCC_OscConfig+0x20>
 8000cca:	e08e      	b.n	8000dea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ccc:	4bc5      	ldr	r3, [pc, #788]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d00e      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cd8:	4bc2      	ldr	r3, [pc, #776]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	220c      	movs	r2, #12
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d117      	bne.n	8000d14 <HAL_RCC_OscConfig+0x68>
 8000ce4:	4bbf      	ldr	r3, [pc, #764]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	23c0      	movs	r3, #192	; 0xc0
 8000cea:	025b      	lsls	r3, r3, #9
 8000cec:	401a      	ands	r2, r3
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	025b      	lsls	r3, r3, #9
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d10e      	bne.n	8000d14 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf6:	4bbb      	ldr	r3, [pc, #748]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	029b      	lsls	r3, r3, #10
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d100      	bne.n	8000d04 <HAL_RCC_OscConfig+0x58>
 8000d02:	e071      	b.n	8000de8 <HAL_RCC_OscConfig+0x13c>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d000      	beq.n	8000d0e <HAL_RCC_OscConfig+0x62>
 8000d0c:	e06c      	b.n	8000de8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	f000 fb4c 	bl	80013ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d107      	bne.n	8000d2c <HAL_RCC_OscConfig+0x80>
 8000d1c:	4bb1      	ldr	r3, [pc, #708]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4bb0      	ldr	r3, [pc, #704]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	0249      	lsls	r1, r1, #9
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e02f      	b.n	8000d8c <HAL_RCC_OscConfig+0xe0>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d10c      	bne.n	8000d4e <HAL_RCC_OscConfig+0xa2>
 8000d34:	4bab      	ldr	r3, [pc, #684]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4baa      	ldr	r3, [pc, #680]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d3a:	49ab      	ldr	r1, [pc, #684]	; (8000fe8 <HAL_RCC_OscConfig+0x33c>)
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	4ba8      	ldr	r3, [pc, #672]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4ba7      	ldr	r3, [pc, #668]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d46:	49a9      	ldr	r1, [pc, #676]	; (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d48:	400a      	ands	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e01e      	b.n	8000d8c <HAL_RCC_OscConfig+0xe0>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d10e      	bne.n	8000d74 <HAL_RCC_OscConfig+0xc8>
 8000d56:	4ba3      	ldr	r3, [pc, #652]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4ba2      	ldr	r3, [pc, #648]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	02c9      	lsls	r1, r1, #11
 8000d60:	430a      	orrs	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	4b9f      	ldr	r3, [pc, #636]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b9e      	ldr	r3, [pc, #632]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	0249      	lsls	r1, r1, #9
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e00b      	b.n	8000d8c <HAL_RCC_OscConfig+0xe0>
 8000d74:	4b9b      	ldr	r3, [pc, #620]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b9a      	ldr	r3, [pc, #616]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d7a:	499b      	ldr	r1, [pc, #620]	; (8000fe8 <HAL_RCC_OscConfig+0x33c>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	4b98      	ldr	r3, [pc, #608]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b97      	ldr	r3, [pc, #604]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000d86:	4999      	ldr	r1, [pc, #612]	; (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d88:	400a      	ands	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d014      	beq.n	8000dbe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fc7c 	bl	8000690 <HAL_GetTick>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fc77 	bl	8000690 <HAL_GetTick>
 8000da2:	0002      	movs	r2, r0
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b64      	cmp	r3, #100	; 0x64
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e2fd      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db0:	4b8c      	ldr	r3, [pc, #560]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0xf2>
 8000dbc:	e015      	b.n	8000dea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fc67 	bl	8000690 <HAL_GetTick>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fc62 	bl	8000690 <HAL_GetTick>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b64      	cmp	r3, #100	; 0x64
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e2e8      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	4b82      	ldr	r3, [pc, #520]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	029b      	lsls	r3, r3, #10
 8000de2:	4013      	ands	r3, r2
 8000de4:	d1f0      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x11c>
 8000de6:	e000      	b.n	8000dea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2202      	movs	r2, #2
 8000df0:	4013      	ands	r3, r2
 8000df2:	d100      	bne.n	8000df6 <HAL_RCC_OscConfig+0x14a>
 8000df4:	e06c      	b.n	8000ed0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000df6:	4b7b      	ldr	r3, [pc, #492]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d00e      	beq.n	8000e1e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e00:	4b78      	ldr	r3, [pc, #480]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	220c      	movs	r2, #12
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d11f      	bne.n	8000e4c <HAL_RCC_OscConfig+0x1a0>
 8000e0c:	4b75      	ldr	r3, [pc, #468]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	23c0      	movs	r3, #192	; 0xc0
 8000e12:	025b      	lsls	r3, r3, #9
 8000e14:	401a      	ands	r2, r3
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d116      	bne.n	8000e4c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	4b71      	ldr	r3, [pc, #452]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2202      	movs	r2, #2
 8000e24:	4013      	ands	r3, r2
 8000e26:	d005      	beq.n	8000e34 <HAL_RCC_OscConfig+0x188>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d001      	beq.n	8000e34 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e2bb      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e34:	4b6b      	ldr	r3, [pc, #428]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	22f8      	movs	r2, #248	; 0xf8
 8000e3a:	4393      	bics	r3, r2
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	00da      	lsls	r2, r3, #3
 8000e44:	4b67      	ldr	r3, [pc, #412]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000e46:	430a      	orrs	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	e041      	b.n	8000ed0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d024      	beq.n	8000e9e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e54:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b62      	ldr	r3, [pc, #392]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fc16 	bl	8000690 <HAL_GetTick>
 8000e64:	0003      	movs	r3, r0
 8000e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e6a:	f7ff fc11 	bl	8000690 <HAL_GetTick>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e297      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7c:	4b59      	ldr	r3, [pc, #356]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2202      	movs	r2, #2
 8000e82:	4013      	ands	r3, r2
 8000e84:	d0f1      	beq.n	8000e6a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e86:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	22f8      	movs	r2, #248	; 0xf8
 8000e8c:	4393      	bics	r3, r2
 8000e8e:	0019      	movs	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	00da      	lsls	r2, r3, #3
 8000e96:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e018      	b.n	8000ed0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e9e:	4b51      	ldr	r3, [pc, #324]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	438a      	bics	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fbf1 	bl	8000690 <HAL_GetTick>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fbec 	bl	8000690 <HAL_GetTick>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e272      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec6:	4b47      	ldr	r3, [pc, #284]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d1f1      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d036      	beq.n	8000f48 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d019      	beq.n	8000f16 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee2:	4b40      	ldr	r3, [pc, #256]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee6:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	430a      	orrs	r2, r1
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eee:	f7ff fbcf 	bl	8000690 <HAL_GetTick>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fbca 	bl	8000690 <HAL_GetTick>
 8000efc:	0002      	movs	r2, r0
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e250      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	2202      	movs	r2, #2
 8000f10:	4013      	ands	r3, r2
 8000f12:	d0f1      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x24c>
 8000f14:	e018      	b.n	8000f48 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f16:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	438a      	bics	r2, r1
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fbb5 	bl	8000690 <HAL_GetTick>
 8000f26:	0003      	movs	r3, r0
 8000f28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fbb0 	bl	8000690 <HAL_GetTick>
 8000f30:	0002      	movs	r2, r0
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e236      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	2202      	movs	r2, #2
 8000f44:	4013      	ands	r3, r2
 8000f46:	d1f1      	bne.n	8000f2c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d100      	bne.n	8000f54 <HAL_RCC_OscConfig+0x2a8>
 8000f52:	e0b5      	b.n	80010c0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f54:	231f      	movs	r3, #31
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	055b      	lsls	r3, r3, #21
 8000f64:	4013      	ands	r3, r2
 8000f66:	d111      	bne.n	8000f8c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000f6a:	69da      	ldr	r2, [r3, #28]
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	0549      	lsls	r1, r1, #21
 8000f72:	430a      	orrs	r2, r1
 8000f74:	61da      	str	r2, [r3, #28]
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000f78:	69da      	ldr	r2, [r3, #28]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	055b      	lsls	r3, r3, #21
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f84:	231f      	movs	r3, #31
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_RCC_OscConfig+0x344>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4013      	ands	r3, r2
 8000f96:	d11a      	bne.n	8000fce <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_RCC_OscConfig+0x344>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_RCC_OscConfig+0x344>)
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	0049      	lsls	r1, r1, #1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fb73 	bl	8000690 <HAL_GetTick>
 8000faa:	0003      	movs	r3, r0
 8000fac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb0:	f7ff fb6e 	bl	8000690 <HAL_GetTick>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e1f4      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_RCC_OscConfig+0x344>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10e      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x348>
 8000fd6:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000fd8:	6a1a      	ldr	r2, [r3, #32]
 8000fda:	4b02      	ldr	r3, [pc, #8]	; (8000fe4 <HAL_RCC_OscConfig+0x338>)
 8000fdc:	2101      	movs	r1, #1
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	621a      	str	r2, [r3, #32]
 8000fe2:	e035      	b.n	8001050 <HAL_RCC_OscConfig+0x3a4>
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	fffeffff 	.word	0xfffeffff
 8000fec:	fffbffff 	.word	0xfffbffff
 8000ff0:	40007000 	.word	0x40007000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10c      	bne.n	8001016 <HAL_RCC_OscConfig+0x36a>
 8000ffc:	4bca      	ldr	r3, [pc, #808]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	4bc9      	ldr	r3, [pc, #804]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001002:	2101      	movs	r1, #1
 8001004:	438a      	bics	r2, r1
 8001006:	621a      	str	r2, [r3, #32]
 8001008:	4bc7      	ldr	r3, [pc, #796]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	4bc6      	ldr	r3, [pc, #792]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800100e:	2104      	movs	r1, #4
 8001010:	438a      	bics	r2, r1
 8001012:	621a      	str	r2, [r3, #32]
 8001014:	e01c      	b.n	8001050 <HAL_RCC_OscConfig+0x3a4>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b05      	cmp	r3, #5
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0x38c>
 800101e:	4bc2      	ldr	r3, [pc, #776]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001020:	6a1a      	ldr	r2, [r3, #32]
 8001022:	4bc1      	ldr	r3, [pc, #772]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001024:	2104      	movs	r1, #4
 8001026:	430a      	orrs	r2, r1
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	4bbf      	ldr	r3, [pc, #764]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800102c:	6a1a      	ldr	r2, [r3, #32]
 800102e:	4bbe      	ldr	r3, [pc, #760]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	621a      	str	r2, [r3, #32]
 8001036:	e00b      	b.n	8001050 <HAL_RCC_OscConfig+0x3a4>
 8001038:	4bbb      	ldr	r3, [pc, #748]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	4bba      	ldr	r3, [pc, #744]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800103e:	2101      	movs	r1, #1
 8001040:	438a      	bics	r2, r1
 8001042:	621a      	str	r2, [r3, #32]
 8001044:	4bb8      	ldr	r3, [pc, #736]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	4bb7      	ldr	r3, [pc, #732]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800104a:	2104      	movs	r1, #4
 800104c:	438a      	bics	r2, r1
 800104e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d014      	beq.n	8001082 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001058:	f7ff fb1a 	bl	8000690 <HAL_GetTick>
 800105c:	0003      	movs	r3, r0
 800105e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001060:	e009      	b.n	8001076 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff fb15 	bl	8000690 <HAL_GetTick>
 8001066:	0002      	movs	r2, r0
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	4aaf      	ldr	r2, [pc, #700]	; (800132c <HAL_RCC_OscConfig+0x680>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e19a      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001076:	4bac      	ldr	r3, [pc, #688]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	2202      	movs	r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x3b6>
 8001080:	e013      	b.n	80010aa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001082:	f7ff fb05 	bl	8000690 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108a:	e009      	b.n	80010a0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800108c:	f7ff fb00 	bl	8000690 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	4aa5      	ldr	r2, [pc, #660]	; (800132c <HAL_RCC_OscConfig+0x680>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e185      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a0:	4ba1      	ldr	r3, [pc, #644]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	2202      	movs	r2, #2
 80010a6:	4013      	ands	r3, r2
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010aa:	231f      	movs	r3, #31
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d105      	bne.n	80010c0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b4:	4b9c      	ldr	r3, [pc, #624]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80010b6:	69da      	ldr	r2, [r3, #28]
 80010b8:	4b9b      	ldr	r3, [pc, #620]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80010ba:	499d      	ldr	r1, [pc, #628]	; (8001330 <HAL_RCC_OscConfig+0x684>)
 80010bc:	400a      	ands	r2, r1
 80010be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2210      	movs	r2, #16
 80010c6:	4013      	ands	r3, r2
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d12a      	bne.n	8001128 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010d2:	4b95      	ldr	r3, [pc, #596]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80010d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d6:	4b94      	ldr	r3, [pc, #592]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80010d8:	2104      	movs	r1, #4
 80010da:	430a      	orrs	r2, r1
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010de:	4b92      	ldr	r3, [pc, #584]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80010e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e2:	4b91      	ldr	r3, [pc, #580]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fad1 	bl	8000690 <HAL_GetTick>
 80010ee:	0003      	movs	r3, r0
 80010f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010f4:	f7ff facc 	bl	8000690 <HAL_GetTick>
 80010f8:	0002      	movs	r2, r0
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e152      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001106:	4b88      	ldr	r3, [pc, #544]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	2202      	movs	r2, #2
 800110c:	4013      	ands	r3, r2
 800110e:	d0f1      	beq.n	80010f4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001110:	4b85      	ldr	r3, [pc, #532]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001114:	22f8      	movs	r2, #248	; 0xf8
 8001116:	4393      	bics	r3, r2
 8001118:	0019      	movs	r1, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	00da      	lsls	r2, r3, #3
 8001120:	4b81      	ldr	r3, [pc, #516]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001122:	430a      	orrs	r2, r1
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
 8001126:	e034      	b.n	8001192 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	3305      	adds	r3, #5
 800112e:	d111      	bne.n	8001154 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001130:	4b7d      	ldr	r3, [pc, #500]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001134:	4b7c      	ldr	r3, [pc, #496]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001136:	2104      	movs	r1, #4
 8001138:	438a      	bics	r2, r1
 800113a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800113c:	4b7a      	ldr	r3, [pc, #488]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800113e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001140:	22f8      	movs	r2, #248	; 0xf8
 8001142:	4393      	bics	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	00da      	lsls	r2, r3, #3
 800114c:	4b76      	ldr	r3, [pc, #472]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800114e:	430a      	orrs	r2, r1
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
 8001152:	e01e      	b.n	8001192 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001154:	4b74      	ldr	r3, [pc, #464]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001158:	4b73      	ldr	r3, [pc, #460]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800115a:	2104      	movs	r1, #4
 800115c:	430a      	orrs	r2, r1
 800115e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001160:	4b71      	ldr	r3, [pc, #452]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001164:	4b70      	ldr	r3, [pc, #448]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001166:	2101      	movs	r1, #1
 8001168:	438a      	bics	r2, r1
 800116a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fa90 	bl	8000690 <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001176:	f7ff fa8b 	bl	8000690 <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e111      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001188:	4b67      	ldr	r3, [pc, #412]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800118a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118c:	2202      	movs	r2, #2
 800118e:	4013      	ands	r3, r2
 8001190:	d1f1      	bne.n	8001176 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2220      	movs	r2, #32
 8001198:	4013      	ands	r3, r2
 800119a:	d05c      	beq.n	8001256 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800119c:	4b62      	ldr	r3, [pc, #392]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	220c      	movs	r2, #12
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b0c      	cmp	r3, #12
 80011a6:	d00e      	beq.n	80011c6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011a8:	4b5f      	ldr	r3, [pc, #380]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	220c      	movs	r2, #12
 80011ae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d114      	bne.n	80011de <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011b4:	4b5c      	ldr	r3, [pc, #368]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	23c0      	movs	r3, #192	; 0xc0
 80011ba:	025b      	lsls	r3, r3, #9
 80011bc:	401a      	ands	r2, r3
 80011be:	23c0      	movs	r3, #192	; 0xc0
 80011c0:	025b      	lsls	r3, r3, #9
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d10b      	bne.n	80011de <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011c6:	4b58      	ldr	r3, [pc, #352]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80011c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	025b      	lsls	r3, r3, #9
 80011ce:	4013      	ands	r3, r2
 80011d0:	d040      	beq.n	8001254 <HAL_RCC_OscConfig+0x5a8>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d03c      	beq.n	8001254 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0e6      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d01b      	beq.n	800121e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011e6:	4b50      	ldr	r3, [pc, #320]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80011e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ea:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	0249      	lsls	r1, r1, #9
 80011f0:	430a      	orrs	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fa4c 	bl	8000690 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011fe:	f7ff fa47 	bl	8000690 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e0cd      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001210:	4b45      	ldr	r3, [pc, #276]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	025b      	lsls	r3, r3, #9
 8001218:	4013      	ands	r3, r2
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x552>
 800121c:	e01b      	b.n	8001256 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800121e:	4b42      	ldr	r3, [pc, #264]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001222:	4b41      	ldr	r3, [pc, #260]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001224:	4943      	ldr	r1, [pc, #268]	; (8001334 <HAL_RCC_OscConfig+0x688>)
 8001226:	400a      	ands	r2, r1
 8001228:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fa31 	bl	8000690 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001234:	f7ff fa2c 	bl	8000690 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e0b2      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	025b      	lsls	r3, r3, #9
 800124e:	4013      	ands	r3, r2
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x588>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001254:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <HAL_RCC_OscConfig+0x5b4>
 800125e:	e0a4      	b.n	80013aa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001260:	4b31      	ldr	r3, [pc, #196]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	220c      	movs	r2, #12
 8001266:	4013      	ands	r3, r2
 8001268:	2b08      	cmp	r3, #8
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x5c2>
 800126c:	e078      	b.n	8001360 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	2b02      	cmp	r3, #2
 8001274:	d14c      	bne.n	8001310 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001276:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 800127c:	492e      	ldr	r1, [pc, #184]	; (8001338 <HAL_RCC_OscConfig+0x68c>)
 800127e:	400a      	ands	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fa05 	bl	8000690 <HAL_GetTick>
 8001286:	0003      	movs	r3, r0
 8001288:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128c:	f7ff fa00 	bl	8000690 <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e086      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	049b      	lsls	r3, r3, #18
 80012a6:	4013      	ands	r3, r2
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	220f      	movs	r2, #15
 80012b0:	4393      	bics	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80012ba:	430a      	orrs	r2, r1
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_RCC_OscConfig+0x690>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	0019      	movs	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	431a      	orrs	r2, r3
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80012d4:	430a      	orrs	r2, r1
 80012d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	0449      	lsls	r1, r1, #17
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff f9d3 	bl	8000690 <HAL_GetTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff f9ce 	bl	8000690 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e054      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	049b      	lsls	r3, r3, #18
 800130a:	4013      	ands	r3, r2
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x644>
 800130e:	e04c      	b.n	80013aa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <HAL_RCC_OscConfig+0x67c>)
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <HAL_RCC_OscConfig+0x68c>)
 8001318:	400a      	ands	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff f9b8 	bl	8000690 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001324:	e015      	b.n	8001352 <HAL_RCC_OscConfig+0x6a6>
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	40021000 	.word	0x40021000
 800132c:	00001388 	.word	0x00001388
 8001330:	efffffff 	.word	0xefffffff
 8001334:	fffeffff 	.word	0xfffeffff
 8001338:	feffffff 	.word	0xfeffffff
 800133c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff f9a6 	bl	8000690 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e02c      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_RCC_OscConfig+0x708>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	049b      	lsls	r3, r3, #18
 800135a:	4013      	ands	r3, r2
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x694>
 800135e:	e024      	b.n	80013aa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e01f      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_RCC_OscConfig+0x708>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_RCC_OscConfig+0x708>)
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001376:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	23c0      	movs	r3, #192	; 0xc0
 800137c:	025b      	lsls	r3, r3, #9
 800137e:	401a      	ands	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	429a      	cmp	r2, r3
 8001386:	d10e      	bne.n	80013a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	220f      	movs	r2, #15
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d107      	bne.n	80013a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	23f0      	movs	r3, #240	; 0xf0
 800139a:	039b      	lsls	r3, r3, #14
 800139c:	401a      	ands	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b008      	add	sp, #32
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000

080013b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0bf      	b.n	800154c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013cc:	4b61      	ldr	r3, [pc, #388]	; (8001554 <HAL_RCC_ClockConfig+0x19c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4013      	ands	r3, r2
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d911      	bls.n	80013fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013da:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <HAL_RCC_ClockConfig+0x19c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2201      	movs	r2, #1
 80013e0:	4393      	bics	r3, r2
 80013e2:	0019      	movs	r1, r3
 80013e4:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <HAL_RCC_ClockConfig+0x19c>)
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <HAL_RCC_ClockConfig+0x19c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0a6      	b.n	800154c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2202      	movs	r2, #2
 8001404:	4013      	ands	r3, r2
 8001406:	d015      	beq.n	8001434 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2204      	movs	r2, #4
 800140e:	4013      	ands	r3, r2
 8001410:	d006      	beq.n	8001420 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001412:	4b51      	ldr	r3, [pc, #324]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4b50      	ldr	r3, [pc, #320]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001418:	21e0      	movs	r1, #224	; 0xe0
 800141a:	00c9      	lsls	r1, r1, #3
 800141c:	430a      	orrs	r2, r1
 800141e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001420:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	22f0      	movs	r2, #240	; 0xf0
 8001426:	4393      	bics	r3, r2
 8001428:	0019      	movs	r1, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	d04c      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b44      	ldr	r3, [pc, #272]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	029b      	lsls	r3, r3, #10
 800144e:	4013      	ands	r3, r2
 8001450:	d120      	bne.n	8001494 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e07a      	b.n	800154c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145e:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	049b      	lsls	r3, r3, #18
 8001466:	4013      	ands	r3, r2
 8001468:	d114      	bne.n	8001494 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06e      	b.n	800154c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	025b      	lsls	r3, r3, #9
 800147e:	4013      	ands	r3, r2
 8001480:	d108      	bne.n	8001494 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e062      	b.n	800154c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e05b      	b.n	800154c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2203      	movs	r2, #3
 800149a:	4393      	bics	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 80014a4:	430a      	orrs	r2, r1
 80014a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a8:	f7ff f8f2 	bl	8000690 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f7ff f8ed 	bl	8000690 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a27      	ldr	r2, [pc, #156]	; (800155c <HAL_RCC_ClockConfig+0x1a4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e042      	b.n	800154c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	220c      	movs	r2, #12
 80014cc:	401a      	ands	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d1ec      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_RCC_ClockConfig+0x19c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d211      	bcs.n	800150a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_RCC_ClockConfig+0x19c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_RCC_ClockConfig+0x19c>)
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_RCC_ClockConfig+0x19c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e020      	b.n	800154c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2204      	movs	r2, #4
 8001510:	4013      	ands	r3, r2
 8001512:	d009      	beq.n	8001528 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_RCC_ClockConfig+0x1a8>)
 800151a:	4013      	ands	r3, r2
 800151c:	0019      	movs	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001528:	f000 f820 	bl	800156c <HAL_RCC_GetSysClockFreq>
 800152c:	0001      	movs	r1, r0
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x1a0>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	220f      	movs	r2, #15
 8001536:	4013      	ands	r3, r2
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1ac>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	000a      	movs	r2, r1
 800153e:	40da      	lsrs	r2, r3
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1b0>)
 8001542:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff f85d 	bl	8000604 <HAL_InitTick>
  
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40022000 	.word	0x40022000
 8001558:	40021000 	.word	0x40021000
 800155c:	00001388 	.word	0x00001388
 8001560:	fffff8ff 	.word	0xfffff8ff
 8001564:	080025a0 	.word	0x080025a0
 8001568:	20000000 	.word	0x20000000

0800156c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b08f      	sub	sp, #60	; 0x3c
 8001570:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001572:	2314      	movs	r3, #20
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	4a37      	ldr	r2, [pc, #220]	; (8001654 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001578:	ca13      	ldmia	r2!, {r0, r1, r4}
 800157a:	c313      	stmia	r3!, {r0, r1, r4}
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4a35      	ldr	r2, [pc, #212]	; (8001658 <HAL_RCC_GetSysClockFreq+0xec>)
 8001584:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001586:	c313      	stmia	r3!, {r0, r1, r4}
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <HAL_RCC_GetSysClockFreq+0xf0>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a8:	220c      	movs	r2, #12
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d006      	beq.n	80015be <HAL_RCC_GetSysClockFreq+0x52>
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d043      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0xd0>
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d144      	bne.n	8001642 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_RCC_GetSysClockFreq+0xf4>)
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015bc:	e044      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	0c9b      	lsrs	r3, r3, #18
 80015c2:	220f      	movs	r2, #15
 80015c4:	4013      	ands	r3, r2
 80015c6:	2214      	movs	r2, #20
 80015c8:	18ba      	adds	r2, r7, r2
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_RCC_GetSysClockFreq+0xf0>)
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	220f      	movs	r2, #15
 80015d4:	4013      	ands	r3, r2
 80015d6:	1d3a      	adds	r2, r7, #4
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015de:	23c0      	movs	r3, #192	; 0xc0
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	401a      	ands	r2, r3
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d109      	bne.n	8001600 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ee:	481c      	ldr	r0, [pc, #112]	; (8001660 <HAL_RCC_GetSysClockFreq+0xf4>)
 80015f0:	f7fe fd8a 	bl	8000108 <__udivsi3>
 80015f4:	0003      	movs	r3, r0
 80015f6:	001a      	movs	r2, r3
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	4353      	muls	r3, r2
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
 80015fe:	e01a      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001602:	23c0      	movs	r3, #192	; 0xc0
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	401a      	ands	r2, r3
 8001608:	23c0      	movs	r3, #192	; 0xc0
 800160a:	025b      	lsls	r3, r3, #9
 800160c:	429a      	cmp	r2, r3
 800160e:	d109      	bne.n	8001624 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001612:	4814      	ldr	r0, [pc, #80]	; (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001614:	f7fe fd78 	bl	8000108 <__udivsi3>
 8001618:	0003      	movs	r3, r0
 800161a:	001a      	movs	r2, r3
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	4353      	muls	r3, r2
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
 8001622:	e008      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001626:	480e      	ldr	r0, [pc, #56]	; (8001660 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001628:	f7fe fd6e 	bl	8000108 <__udivsi3>
 800162c:	0003      	movs	r3, r0
 800162e:	001a      	movs	r2, r3
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	4353      	muls	r3, r2
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800163a:	e005      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001640:	e002      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001646:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b00f      	add	sp, #60	; 0x3c
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	08002580 	.word	0x08002580
 8001658:	08002590 	.word	0x08002590
 800165c:	40021000 	.word	0x40021000
 8001660:	007a1200 	.word	0x007a1200
 8001664:	02dc6c00 	.word	0x02dc6c00

08001668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <HAL_RCC_GetHCLKFreq+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	20000000 	.word	0x20000000

0800167c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001680:	f7ff fff2 	bl	8001668 <HAL_RCC_GetHCLKFreq>
 8001684:	0001      	movs	r1, r0
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	2207      	movs	r2, #7
 800168e:	4013      	ands	r3, r2
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	40d9      	lsrs	r1, r3
 8001696:	000b      	movs	r3, r1
}    
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	40021000 	.word	0x40021000
 80016a4:	080025b0 	.word	0x080025b0

080016a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	025b      	lsls	r3, r3, #9
 80016c0:	4013      	ands	r3, r2
 80016c2:	d100      	bne.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80016c4:	e08f      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80016c6:	2317      	movs	r3, #23
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016d0:	69da      	ldr	r2, [r3, #28]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	055b      	lsls	r3, r3, #21
 80016d6:	4013      	ands	r3, r2
 80016d8:	d111      	bne.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016dc:	69da      	ldr	r2, [r3, #28]
 80016de:	4b63      	ldr	r3, [pc, #396]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	0549      	lsls	r1, r1, #21
 80016e4:	430a      	orrs	r2, r1
 80016e6:	61da      	str	r2, [r3, #28]
 80016e8:	4b60      	ldr	r3, [pc, #384]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016ea:	69da      	ldr	r2, [r3, #28]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	055b      	lsls	r3, r3, #21
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f6:	2317      	movs	r3, #23
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b5c      	ldr	r3, [pc, #368]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4013      	ands	r3, r2
 8001708:	d11a      	bne.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170a:	4b59      	ldr	r3, [pc, #356]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b58      	ldr	r3, [pc, #352]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0049      	lsls	r1, r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001718:	f7fe ffba 	bl	8000690 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7fe ffb5 	bl	8000690 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e097      	b.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001740:	4b4a      	ldr	r3, [pc, #296]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	23c0      	movs	r3, #192	; 0xc0
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d034      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	23c0      	movs	r3, #192	; 0xc0
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4013      	ands	r3, r2
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	429a      	cmp	r2, r3
 8001760:	d02c      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001762:	4b42      	ldr	r3, [pc, #264]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a43      	ldr	r2, [pc, #268]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800176c:	4b3f      	ldr	r3, [pc, #252]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800176e:	6a1a      	ldr	r2, [r3, #32]
 8001770:	4b3e      	ldr	r3, [pc, #248]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	0249      	lsls	r1, r1, #9
 8001776:	430a      	orrs	r2, r1
 8001778:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800177a:	4b3c      	ldr	r3, [pc, #240]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800177c:	6a1a      	ldr	r2, [r3, #32]
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001780:	493d      	ldr	r1, [pc, #244]	; (8001878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001782:	400a      	ands	r2, r1
 8001784:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	4013      	ands	r3, r2
 8001792:	d013      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7fe ff7c 	bl	8000690 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179c:	e009      	b.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7fe ff77 	bl	8000690 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	4a34      	ldr	r2, [pc, #208]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e058      	b.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	2202      	movs	r2, #2
 80017b8:	4013      	ands	r3, r2
 80017ba:	d0f0      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4a2c      	ldr	r2, [pc, #176]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017cc:	430a      	orrs	r2, r1
 80017ce:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017d0:	2317      	movs	r3, #23
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d105      	bne.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017e0:	4927      	ldr	r1, [pc, #156]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80017e2:	400a      	ands	r2, r1
 80017e4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2201      	movs	r2, #1
 80017ec:	4013      	ands	r3, r2
 80017ee:	d009      	beq.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	2203      	movs	r2, #3
 80017f6:	4393      	bics	r3, r2
 80017f8:	0019      	movs	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001800:	430a      	orrs	r2, r1
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2220      	movs	r2, #32
 800180a:	4013      	ands	r3, r2
 800180c:	d009      	beq.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	2210      	movs	r2, #16
 8001814:	4393      	bics	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800181e:	430a      	orrs	r2, r1
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	4013      	ands	r3, r2
 800182c:	d009      	beq.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	4393      	bics	r3, r2
 8001836:	0019      	movs	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800183e:	430a      	orrs	r2, r1
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4013      	ands	r3, r2
 800184c:	d009      	beq.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	2240      	movs	r2, #64	; 0x40
 8001854:	4393      	bics	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800185e:	430a      	orrs	r2, r1
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b006      	add	sp, #24
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	40007000 	.word	0x40007000
 8001874:	fffffcff 	.word	0xfffffcff
 8001878:	fffeffff 	.word	0xfffeffff
 800187c:	00001388 	.word	0x00001388
 8001880:	efffffff 	.word	0xefffffff

08001884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e044      	b.n	8001920 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800189a:	2b00      	cmp	r3, #0
 800189c:	d107      	bne.n	80018ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2274      	movs	r2, #116	; 0x74
 80018a2:	2100      	movs	r1, #0
 80018a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7fe fdd3 	bl	8000454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2224      	movs	r2, #36	; 0x24
 80018b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2101      	movs	r1, #1
 80018c0:	438a      	bics	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	0018      	movs	r0, r3
 80018c8:	f000 fafe 	bl	8001ec8 <UART_SetConfig>
 80018cc:	0003      	movs	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e024      	b.n	8001920 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 fc2f 	bl	8002144 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	490d      	ldr	r1, [pc, #52]	; (8001928 <HAL_UART_Init+0xa4>)
 80018f2:	400a      	ands	r2, r1
 80018f4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	212a      	movs	r1, #42	; 0x2a
 8001902:	438a      	bics	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f000 fcc7 	bl	80022ac <UART_CheckIdleState>
 800191e:	0003      	movs	r3, r0
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b002      	add	sp, #8
 8001926:	bd80      	pop	{r7, pc}
 8001928:	ffffb7ff 	.word	0xffffb7ff

0800192c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	1dbb      	adds	r3, r7, #6
 800193a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001940:	2b20      	cmp	r3, #32
 8001942:	d000      	beq.n	8001946 <HAL_UART_Transmit+0x1a>
 8001944:	e096      	b.n	8001a74 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_UART_Transmit+0x28>
 800194c:	1dbb      	adds	r3, r7, #6
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e08e      	b.n	8001a76 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	015b      	lsls	r3, r3, #5
 8001960:	429a      	cmp	r2, r3
 8001962:	d109      	bne.n	8001978 <HAL_UART_Transmit+0x4c>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2201      	movs	r2, #1
 8001970:	4013      	ands	r3, r2
 8001972:	d001      	beq.n	8001978 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e07e      	b.n	8001a76 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2274      	movs	r2, #116	; 0x74
 800197c:	5c9b      	ldrb	r3, [r3, r2]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_UART_Transmit+0x5a>
 8001982:	2302      	movs	r3, #2
 8001984:	e077      	b.n	8001a76 <HAL_UART_Transmit+0x14a>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2274      	movs	r2, #116	; 0x74
 800198a:	2101      	movs	r1, #1
 800198c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2280      	movs	r2, #128	; 0x80
 8001992:	2100      	movs	r1, #0
 8001994:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2221      	movs	r2, #33	; 0x21
 800199a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800199c:	f7fe fe78 	bl	8000690 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1dba      	adds	r2, r7, #6
 80019a8:	2150      	movs	r1, #80	; 0x50
 80019aa:	8812      	ldrh	r2, [r2, #0]
 80019ac:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1dba      	adds	r2, r7, #6
 80019b2:	2152      	movs	r1, #82	; 0x52
 80019b4:	8812      	ldrh	r2, [r2, #0]
 80019b6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	015b      	lsls	r3, r3, #5
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d108      	bne.n	80019d6 <HAL_UART_Transmit+0xaa>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d104      	bne.n	80019d6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	e003      	b.n	80019de <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2274      	movs	r2, #116	; 0x74
 80019e2:	2100      	movs	r1, #0
 80019e4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80019e6:	e02d      	b.n	8001a44 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	0013      	movs	r3, r2
 80019f2:	2200      	movs	r2, #0
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	f000 fca3 	bl	8002340 <UART_WaitOnFlagUntilTimeout>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e039      	b.n	8001a76 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10b      	bne.n	8001a20 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	881a      	ldrh	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	05d2      	lsls	r2, r2, #23
 8001a12:	0dd2      	lsrs	r2, r2, #23
 8001a14:	b292      	uxth	r2, r2
 8001a16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	e008      	b.n	8001a32 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b292      	uxth	r2, r2
 8001a2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2252      	movs	r2, #82	; 0x52
 8001a36:	5a9b      	ldrh	r3, [r3, r2]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b299      	uxth	r1, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2252      	movs	r2, #82	; 0x52
 8001a42:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2252      	movs	r2, #82	; 0x52
 8001a48:	5a9b      	ldrh	r3, [r3, r2]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1cb      	bne.n	80019e8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	0013      	movs	r3, r2
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2140      	movs	r1, #64	; 0x40
 8001a5e:	f000 fc6f 	bl	8002340 <UART_WaitOnFlagUntilTimeout>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e005      	b.n	8001a76 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e000      	b.n	8001a76 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001a74:	2302      	movs	r3, #2
  }
}
 8001a76:	0018      	movs	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b008      	add	sp, #32
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	4ab5      	ldr	r2, [pc, #724]	; (8001d78 <HAL_UART_IRQHandler+0x2f8>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d112      	bne.n	8001ad4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d00e      	beq.n	8001ad4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	4013      	ands	r3, r2
 8001abc:	d00a      	beq.n	8001ad4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d100      	bne.n	8001ac8 <HAL_UART_IRQHandler+0x48>
 8001ac6:	e1d4      	b.n	8001e72 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	0010      	movs	r0, r2
 8001ad0:	4798      	blx	r3
      }
      return;
 8001ad2:	e1ce      	b.n	8001e72 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d100      	bne.n	8001adc <HAL_UART_IRQHandler+0x5c>
 8001ada:	e0d9      	b.n	8001c90 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d104      	bne.n	8001aee <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	4aa5      	ldr	r2, [pc, #660]	; (8001d7c <HAL_UART_IRQHandler+0x2fc>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d100      	bne.n	8001aee <HAL_UART_IRQHandler+0x6e>
 8001aec:	e0d0      	b.n	8001c90 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	d010      	beq.n	8001b18 <HAL_UART_IRQHandler+0x98>
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4013      	ands	r3, r2
 8001afe:	d00b      	beq.n	8001b18 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	589b      	ldr	r3, [r3, r2]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d00f      	beq.n	8001b40 <HAL_UART_IRQHandler+0xc0>
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	d00b      	beq.n	8001b40 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	589b      	ldr	r3, [r3, r2]
 8001b36:	2204      	movs	r2, #4
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2204      	movs	r2, #4
 8001b44:	4013      	ands	r3, r2
 8001b46:	d00f      	beq.n	8001b68 <HAL_UART_IRQHandler+0xe8>
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d00b      	beq.n	8001b68 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2204      	movs	r2, #4
 8001b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	589b      	ldr	r3, [r3, r2]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d013      	beq.n	8001b98 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2220      	movs	r2, #32
 8001b74:	4013      	ands	r3, r2
 8001b76:	d103      	bne.n	8001b80 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001b7e:	d00b      	beq.n	8001b98 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2208      	movs	r2, #8
 8001b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	589b      	ldr	r3, [r3, r2]
 8001b8e:	2208      	movs	r2, #8
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d011      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x146>
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	04db      	lsls	r3, r3, #19
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d00c      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	589b      	ldr	r3, [r3, r2]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	589b      	ldr	r3, [r3, r2]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d100      	bne.n	8001bd2 <HAL_UART_IRQHandler+0x152>
 8001bd0:	e151      	b.n	8001e76 <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d00c      	beq.n	8001bf4 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	4013      	ands	r3, r2
 8001be0:	d008      	beq.n	8001bf4 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d004      	beq.n	8001bf4 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	0010      	movs	r0, r2
 8001bf2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2280      	movs	r2, #128	; 0x80
 8001bf8:	589b      	ldr	r3, [r3, r2]
 8001bfa:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2240      	movs	r2, #64	; 0x40
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b40      	cmp	r3, #64	; 0x40
 8001c08:	d003      	beq.n	8001c12 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2228      	movs	r2, #40	; 0x28
 8001c0e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c10:	d033      	beq.n	8001c7a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 fc11 	bl	800243c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2240      	movs	r2, #64	; 0x40
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b40      	cmp	r3, #64	; 0x40
 8001c26:	d123      	bne.n	8001c70 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	438a      	bics	r2, r1
 8001c36:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d012      	beq.n	8001c66 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a4e      	ldr	r2, [pc, #312]	; (8001d80 <HAL_UART_IRQHandler+0x300>)
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7fe fe61 	bl	8000914 <HAL_DMA_Abort_IT>
 8001c52:	1e03      	subs	r3, r0, #0
 8001c54:	d01a      	beq.n	8001c8c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	0018      	movs	r0, r3
 8001c62:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c64:	e012      	b.n	8001c8c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f000 f919 	bl	8001ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c6e:	e00d      	b.n	8001c8c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f914 	bl	8001ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c78:	e008      	b.n	8001c8c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 f90f 	bl	8001ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	2100      	movs	r1, #0
 8001c88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001c8a:	e0f4      	b.n	8001e76 <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c8c:	46c0      	nop			; (mov r8, r8)
    return;
 8001c8e:	e0f2      	b.n	8001e76 <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d000      	beq.n	8001c9a <HAL_UART_IRQHandler+0x21a>
 8001c98:	e0b7      	b.n	8001e0a <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d100      	bne.n	8001ca4 <HAL_UART_IRQHandler+0x224>
 8001ca2:	e0b2      	b.n	8001e0a <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d100      	bne.n	8001cae <HAL_UART_IRQHandler+0x22e>
 8001cac:	e0ad      	b.n	8001e0a <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b40      	cmp	r3, #64	; 0x40
 8001cc2:	d161      	bne.n	8001d88 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	2108      	movs	r1, #8
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d100      	bne.n	8001cdc <HAL_UART_IRQHandler+0x25c>
 8001cda:	e0ce      	b.n	8001e7a <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2258      	movs	r2, #88	; 0x58
 8001ce0:	5a9b      	ldrh	r3, [r3, r2]
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	18ba      	adds	r2, r7, r2
 8001ce6:	8812      	ldrh	r2, [r2, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d300      	bcc.n	8001cee <HAL_UART_IRQHandler+0x26e>
 8001cec:	e0c5      	b.n	8001e7a <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	18ba      	adds	r2, r7, r2
 8001cf4:	215a      	movs	r1, #90	; 0x5a
 8001cf6:	8812      	ldrh	r2, [r2, #0]
 8001cf8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d02a      	beq.n	8001d5a <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	491d      	ldr	r1, [pc, #116]	; (8001d84 <HAL_UART_IRQHandler+0x304>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2101      	movs	r1, #1
 8001d20:	438a      	bics	r2, r1
 8001d22:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2140      	movs	r1, #64	; 0x40
 8001d30:	438a      	bics	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	0018      	movs	r0, r3
 8001d56:	f7fe fda5 	bl	80008a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2258      	movs	r2, #88	; 0x58
 8001d5e:	5a9a      	ldrh	r2, [r3, r2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	215a      	movs	r1, #90	; 0x5a
 8001d64:	5a5b      	ldrh	r3, [r3, r1]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 f89d 	bl	8001eb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001d76:	e080      	b.n	8001e7a <HAL_UART_IRQHandler+0x3fa>
 8001d78:	0000080f 	.word	0x0000080f
 8001d7c:	04000120 	.word	0x04000120
 8001d80:	0800249d 	.word	0x0800249d
 8001d84:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2258      	movs	r2, #88	; 0x58
 8001d8c:	5a99      	ldrh	r1, [r3, r2]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	225a      	movs	r2, #90	; 0x5a
 8001d92:	5a9b      	ldrh	r3, [r3, r2]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	230a      	movs	r3, #10
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	1a8a      	subs	r2, r1, r2
 8001d9c:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	225a      	movs	r2, #90	; 0x5a
 8001da2:	5a9b      	ldrh	r3, [r3, r2]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d100      	bne.n	8001dac <HAL_UART_IRQHandler+0x32c>
 8001daa:	e068      	b.n	8001e7e <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 8001dac:	230a      	movs	r3, #10
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d063      	beq.n	8001e7e <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4932      	ldr	r1, [pc, #200]	; (8001e8c <HAL_UART_IRQHandler+0x40c>)
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	438a      	bics	r2, r1
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2110      	movs	r1, #16
 8001df4:	438a      	bics	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001df8:	230a      	movs	r3, #10
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	881a      	ldrh	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0011      	movs	r1, r2
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 f854 	bl	8001eb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001e08:	e039      	b.n	8001e7e <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	035b      	lsls	r3, r3, #13
 8001e10:	4013      	ands	r3, r2
 8001e12:	d00e      	beq.n	8001e32 <HAL_UART_IRQHandler+0x3b2>
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	03db      	lsls	r3, r3, #15
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d009      	beq.n	8001e32 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	0352      	lsls	r2, r2, #13
 8001e26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 fb67 	bl	80024fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001e30:	e028      	b.n	8001e84 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	4013      	ands	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01b      	beq.n	8001e82 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	0010      	movs	r0, r2
 8001e52:	4798      	blx	r3
    }
    return;
 8001e54:	e015      	b.n	8001e82 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	2240      	movs	r2, #64	; 0x40
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d012      	beq.n	8001e84 <HAL_UART_IRQHandler+0x404>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2240      	movs	r2, #64	; 0x40
 8001e62:	4013      	ands	r3, r2
 8001e64:	d00e      	beq.n	8001e84 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f000 fb2e 	bl	80024ca <UART_EndTransmit_IT>
    return;
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	e008      	b.n	8001e84 <HAL_UART_IRQHandler+0x404>
      return;
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	e006      	b.n	8001e84 <HAL_UART_IRQHandler+0x404>
    return;
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	e004      	b.n	8001e84 <HAL_UART_IRQHandler+0x404>
      return;
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	e002      	b.n	8001e84 <HAL_UART_IRQHandler+0x404>
      return;
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	e000      	b.n	8001e84 <HAL_UART_IRQHandler+0x404>
    return;
 8001e82:	46c0      	nop			; (mov r8, r8)
  }

}
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b008      	add	sp, #32
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	fffffedf 	.word	0xfffffedf

08001e90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	000a      	movs	r2, r1
 8001eba:	1cbb      	adds	r3, r7, #2
 8001ebc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b002      	add	sp, #8
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ed0:	231e      	movs	r3, #30
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a8b      	ldr	r2, [pc, #556]	; (8002124 <UART_SetConfig+0x25c>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a86      	ldr	r2, [pc, #536]	; (8002128 <UART_SetConfig+0x260>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a7d      	ldr	r2, [pc, #500]	; (800212c <UART_SetConfig+0x264>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a79      	ldr	r2, [pc, #484]	; (8002130 <UART_SetConfig+0x268>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d125      	bne.n	8001f9a <UART_SetConfig+0xd2>
 8001f4e:	4b79      	ldr	r3, [pc, #484]	; (8002134 <UART_SetConfig+0x26c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	2203      	movs	r2, #3
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d00f      	beq.n	8001f7a <UART_SetConfig+0xb2>
 8001f5a:	d304      	bcc.n	8001f66 <UART_SetConfig+0x9e>
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d011      	beq.n	8001f84 <UART_SetConfig+0xbc>
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d005      	beq.n	8001f70 <UART_SetConfig+0xa8>
 8001f64:	e013      	b.n	8001f8e <UART_SetConfig+0xc6>
 8001f66:	231f      	movs	r3, #31
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e022      	b.n	8001fb6 <UART_SetConfig+0xee>
 8001f70:	231f      	movs	r3, #31
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2202      	movs	r2, #2
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e01d      	b.n	8001fb6 <UART_SetConfig+0xee>
 8001f7a:	231f      	movs	r3, #31
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	2204      	movs	r2, #4
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e018      	b.n	8001fb6 <UART_SetConfig+0xee>
 8001f84:	231f      	movs	r3, #31
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2208      	movs	r2, #8
 8001f8a:	701a      	strb	r2, [r3, #0]
 8001f8c:	e013      	b.n	8001fb6 <UART_SetConfig+0xee>
 8001f8e:	231f      	movs	r3, #31
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2210      	movs	r2, #16
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	e00d      	b.n	8001fb6 <UART_SetConfig+0xee>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a66      	ldr	r2, [pc, #408]	; (8002138 <UART_SetConfig+0x270>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d104      	bne.n	8001fae <UART_SetConfig+0xe6>
 8001fa4:	231f      	movs	r3, #31
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	e003      	b.n	8001fb6 <UART_SetConfig+0xee>
 8001fae:	231f      	movs	r3, #31
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d15c      	bne.n	800207c <UART_SetConfig+0x1b4>
  {
    switch (clocksource)
 8001fc2:	231f      	movs	r3, #31
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d00d      	beq.n	8001fe8 <UART_SetConfig+0x120>
 8001fcc:	dc02      	bgt.n	8001fd4 <UART_SetConfig+0x10c>
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <UART_SetConfig+0x116>
 8001fd2:	e015      	b.n	8002000 <UART_SetConfig+0x138>
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d00a      	beq.n	8001fee <UART_SetConfig+0x126>
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d00d      	beq.n	8001ff8 <UART_SetConfig+0x130>
 8001fdc:	e010      	b.n	8002000 <UART_SetConfig+0x138>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fde:	f7ff fb4d 	bl	800167c <HAL_RCC_GetPCLK1Freq>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	61bb      	str	r3, [r7, #24]
        break;
 8001fe6:	e012      	b.n	800200e <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fe8:	4b54      	ldr	r3, [pc, #336]	; (800213c <UART_SetConfig+0x274>)
 8001fea:	61bb      	str	r3, [r7, #24]
        break;
 8001fec:	e00f      	b.n	800200e <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fee:	f7ff fabd 	bl	800156c <HAL_RCC_GetSysClockFreq>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	61bb      	str	r3, [r7, #24]
        break;
 8001ff6:	e00a      	b.n	800200e <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	61bb      	str	r3, [r7, #24]
        break;
 8001ffe:	e006      	b.n	800200e <UART_SetConfig+0x146>
      default:
        pclk = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002004:	231e      	movs	r3, #30
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
        break;
 800200c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d100      	bne.n	8002016 <UART_SetConfig+0x14e>
 8002014:	e079      	b.n	800210a <UART_SetConfig+0x242>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	005a      	lsls	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	085b      	lsrs	r3, r3, #1
 8002020:	18d2      	adds	r2, r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	0019      	movs	r1, r3
 8002028:	0010      	movs	r0, r2
 800202a:	f7fe f86d 	bl	8000108 <__udivsi3>
 800202e:	0003      	movs	r3, r0
 8002030:	b29b      	uxth	r3, r3
 8002032:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d91b      	bls.n	8002072 <UART_SetConfig+0x1aa>
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4a40      	ldr	r2, [pc, #256]	; (8002140 <UART_SetConfig+0x278>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d817      	bhi.n	8002072 <UART_SetConfig+0x1aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	b29a      	uxth	r2, r3
 8002046:	200e      	movs	r0, #14
 8002048:	183b      	adds	r3, r7, r0
 800204a:	210f      	movs	r1, #15
 800204c:	438a      	bics	r2, r1
 800204e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	b29b      	uxth	r3, r3
 8002056:	2207      	movs	r2, #7
 8002058:	4013      	ands	r3, r2
 800205a:	b299      	uxth	r1, r3
 800205c:	183b      	adds	r3, r7, r0
 800205e:	183a      	adds	r2, r7, r0
 8002060:	8812      	ldrh	r2, [r2, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	183a      	adds	r2, r7, r0
 800206c:	8812      	ldrh	r2, [r2, #0]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	e04b      	b.n	800210a <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 8002072:	231e      	movs	r3, #30
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e046      	b.n	800210a <UART_SetConfig+0x242>
      }
    }
  }
  else
  {
    switch (clocksource)
 800207c:	231f      	movs	r3, #31
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d00d      	beq.n	80020a2 <UART_SetConfig+0x1da>
 8002086:	dc02      	bgt.n	800208e <UART_SetConfig+0x1c6>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <UART_SetConfig+0x1d0>
 800208c:	e015      	b.n	80020ba <UART_SetConfig+0x1f2>
 800208e:	2b04      	cmp	r3, #4
 8002090:	d00a      	beq.n	80020a8 <UART_SetConfig+0x1e0>
 8002092:	2b08      	cmp	r3, #8
 8002094:	d00d      	beq.n	80020b2 <UART_SetConfig+0x1ea>
 8002096:	e010      	b.n	80020ba <UART_SetConfig+0x1f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002098:	f7ff faf0 	bl	800167c <HAL_RCC_GetPCLK1Freq>
 800209c:	0003      	movs	r3, r0
 800209e:	61bb      	str	r3, [r7, #24]
        break;
 80020a0:	e012      	b.n	80020c8 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <UART_SetConfig+0x274>)
 80020a4:	61bb      	str	r3, [r7, #24]
        break;
 80020a6:	e00f      	b.n	80020c8 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020a8:	f7ff fa60 	bl	800156c <HAL_RCC_GetSysClockFreq>
 80020ac:	0003      	movs	r3, r0
 80020ae:	61bb      	str	r3, [r7, #24]
        break;
 80020b0:	e00a      	b.n	80020c8 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	61bb      	str	r3, [r7, #24]
        break;
 80020b8:	e006      	b.n	80020c8 <UART_SetConfig+0x200>
      default:
        pclk = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80020be:	231e      	movs	r3, #30
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
        break;
 80020c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01d      	beq.n	800210a <UART_SetConfig+0x242>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	085a      	lsrs	r2, r3, #1
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	18d2      	adds	r2, r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	0019      	movs	r1, r3
 80020de:	0010      	movs	r0, r2
 80020e0:	f7fe f812 	bl	8000108 <__udivsi3>
 80020e4:	0003      	movs	r3, r0
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b0f      	cmp	r3, #15
 80020ee:	d908      	bls.n	8002102 <UART_SetConfig+0x23a>
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4a13      	ldr	r2, [pc, #76]	; (8002140 <UART_SetConfig+0x278>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d804      	bhi.n	8002102 <UART_SetConfig+0x23a>
      {
        huart->Instance->BRR = usartdiv;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	e003      	b.n	800210a <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 8002102:	231e      	movs	r3, #30
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002116:	231e      	movs	r3, #30
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	781b      	ldrb	r3, [r3, #0]
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b008      	add	sp, #32
 8002122:	bd80      	pop	{r7, pc}
 8002124:	efff69f3 	.word	0xefff69f3
 8002128:	ffffcfff 	.word	0xffffcfff
 800212c:	fffff4ff 	.word	0xfffff4ff
 8002130:	40013800 	.word	0x40013800
 8002134:	40021000 	.word	0x40021000
 8002138:	40004400 	.word	0x40004400
 800213c:	007a1200 	.word	0x007a1200
 8002140:	0000ffff 	.word	0x0000ffff

08002144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2201      	movs	r2, #1
 8002152:	4013      	ands	r3, r2
 8002154:	d00b      	beq.n	800216e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a4a      	ldr	r2, [pc, #296]	; (8002288 <UART_AdvFeatureConfig+0x144>)
 800215e:	4013      	ands	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2202      	movs	r2, #2
 8002174:	4013      	ands	r3, r2
 8002176:	d00b      	beq.n	8002190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4a43      	ldr	r2, [pc, #268]	; (800228c <UART_AdvFeatureConfig+0x148>)
 8002180:	4013      	ands	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	2204      	movs	r2, #4
 8002196:	4013      	ands	r3, r2
 8002198:	d00b      	beq.n	80021b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a3b      	ldr	r2, [pc, #236]	; (8002290 <UART_AdvFeatureConfig+0x14c>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2208      	movs	r2, #8
 80021b8:	4013      	ands	r3, r2
 80021ba:	d00b      	beq.n	80021d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a34      	ldr	r2, [pc, #208]	; (8002294 <UART_AdvFeatureConfig+0x150>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2210      	movs	r2, #16
 80021da:	4013      	ands	r3, r2
 80021dc:	d00b      	beq.n	80021f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <UART_AdvFeatureConfig+0x154>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	2220      	movs	r2, #32
 80021fc:	4013      	ands	r3, r2
 80021fe:	d00b      	beq.n	8002218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	4a25      	ldr	r2, [pc, #148]	; (800229c <UART_AdvFeatureConfig+0x158>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	2240      	movs	r2, #64	; 0x40
 800221e:	4013      	ands	r3, r2
 8002220:	d01d      	beq.n	800225e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a1d      	ldr	r2, [pc, #116]	; (80022a0 <UART_AdvFeatureConfig+0x15c>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	035b      	lsls	r3, r3, #13
 8002242:	429a      	cmp	r2, r3
 8002244:	d10b      	bne.n	800225e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <UART_AdvFeatureConfig+0x160>)
 800224e:	4013      	ands	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	4013      	ands	r3, r2
 8002266:	d00b      	beq.n	8002280 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <UART_AdvFeatureConfig+0x164>)
 8002270:	4013      	ands	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
  }
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	b002      	add	sp, #8
 8002286:	bd80      	pop	{r7, pc}
 8002288:	fffdffff 	.word	0xfffdffff
 800228c:	fffeffff 	.word	0xfffeffff
 8002290:	fffbffff 	.word	0xfffbffff
 8002294:	ffff7fff 	.word	0xffff7fff
 8002298:	ffffefff 	.word	0xffffefff
 800229c:	ffffdfff 	.word	0xffffdfff
 80022a0:	ffefffff 	.word	0xffefffff
 80022a4:	ff9fffff 	.word	0xff9fffff
 80022a8:	fff7ffff 	.word	0xfff7ffff

080022ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	2100      	movs	r1, #0
 80022ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80022bc:	f7fe f9e8 	bl	8000690 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2208      	movs	r2, #8
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d10d      	bne.n	80022ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	0399      	lsls	r1, r3, #14
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <UART_CheckIdleState+0x90>)
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	0013      	movs	r3, r2
 80022e0:	2200      	movs	r2, #0
 80022e2:	f000 f82d 	bl	8002340 <UART_WaitOnFlagUntilTimeout>
 80022e6:	1e03      	subs	r3, r0, #0
 80022e8:	d001      	beq.n	80022ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e022      	b.n	8002334 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2204      	movs	r2, #4
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d10d      	bne.n	8002318 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	03d9      	lsls	r1, r3, #15
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	4b0d      	ldr	r3, [pc, #52]	; (800233c <UART_CheckIdleState+0x90>)
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	0013      	movs	r3, r2
 800230a:	2200      	movs	r2, #0
 800230c:	f000 f818 	bl	8002340 <UART_WaitOnFlagUntilTimeout>
 8002310:	1e03      	subs	r3, r0, #0
 8002312:	d001      	beq.n	8002318 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e00d      	b.n	8002334 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2274      	movs	r2, #116	; 0x74
 800232e:	2100      	movs	r1, #0
 8002330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b004      	add	sp, #16
 800233a:	bd80      	pop	{r7, pc}
 800233c:	01ffffff 	.word	0x01ffffff

08002340 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002350:	e05e      	b.n	8002410 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	3301      	adds	r3, #1
 8002356:	d05b      	beq.n	8002410 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002358:	f7fe f99a 	bl	8000690 <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	429a      	cmp	r2, r3
 8002366:	d302      	bcc.n	800236e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d11b      	bne.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	492f      	ldr	r1, [pc, #188]	; (8002438 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800237a:	400a      	ands	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	438a      	bics	r2, r1
 800238c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2274      	movs	r2, #116	; 0x74
 800239e:	2100      	movs	r1, #0
 80023a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e044      	b.n	8002430 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2204      	movs	r2, #4
 80023ae:	4013      	ands	r3, r2
 80023b0:	d02e      	beq.n	8002410 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	401a      	ands	r2, r3
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d124      	bne.n	8002410 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4917      	ldr	r1, [pc, #92]	; (8002438 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80023dc:	400a      	ands	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2101      	movs	r1, #1
 80023ec:	438a      	bics	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	2120      	movs	r1, #32
 8002402:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2274      	movs	r2, #116	; 0x74
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e00f      	b.n	8002430 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	425a      	negs	r2, r3
 8002420:	4153      	adcs	r3, r2
 8002422:	b2db      	uxtb	r3, r3
 8002424:	001a      	movs	r2, r3
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d091      	beq.n	8002352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bd80      	pop	{r7, pc}
 8002438:	fffffe5f 	.word	0xfffffe5f

0800243c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4912      	ldr	r1, [pc, #72]	; (8002498 <UART_EndRxTransfer+0x5c>)
 8002450:	400a      	ands	r2, r1
 8002452:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2101      	movs	r1, #1
 8002460:	438a      	bics	r2, r1
 8002462:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002468:	2b01      	cmp	r3, #1
 800246a:	d107      	bne.n	800247c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2110      	movs	r1, #16
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b002      	add	sp, #8
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	fffffedf 	.word	0xfffffedf

0800249c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	225a      	movs	r2, #90	; 0x5a
 80024ae:	2100      	movs	r1, #0
 80024b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2252      	movs	r2, #82	; 0x52
 80024b6:	2100      	movs	r1, #0
 80024b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff fcef 	bl	8001ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b004      	add	sp, #16
 80024c8:	bd80      	pop	{r7, pc}

080024ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2140      	movs	r1, #64	; 0x40
 80024de:	438a      	bics	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2220      	movs	r2, #32
 80024e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f7ff fccd 	bl	8001e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b002      	add	sp, #8
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <__libc_init_array>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	2600      	movs	r6, #0
 8002514:	4d0c      	ldr	r5, [pc, #48]	; (8002548 <__libc_init_array+0x38>)
 8002516:	4c0d      	ldr	r4, [pc, #52]	; (800254c <__libc_init_array+0x3c>)
 8002518:	1b64      	subs	r4, r4, r5
 800251a:	10a4      	asrs	r4, r4, #2
 800251c:	42a6      	cmp	r6, r4
 800251e:	d109      	bne.n	8002534 <__libc_init_array+0x24>
 8002520:	2600      	movs	r6, #0
 8002522:	f000 f821 	bl	8002568 <_init>
 8002526:	4d0a      	ldr	r5, [pc, #40]	; (8002550 <__libc_init_array+0x40>)
 8002528:	4c0a      	ldr	r4, [pc, #40]	; (8002554 <__libc_init_array+0x44>)
 800252a:	1b64      	subs	r4, r4, r5
 800252c:	10a4      	asrs	r4, r4, #2
 800252e:	42a6      	cmp	r6, r4
 8002530:	d105      	bne.n	800253e <__libc_init_array+0x2e>
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	00b3      	lsls	r3, r6, #2
 8002536:	58eb      	ldr	r3, [r5, r3]
 8002538:	4798      	blx	r3
 800253a:	3601      	adds	r6, #1
 800253c:	e7ee      	b.n	800251c <__libc_init_array+0xc>
 800253e:	00b3      	lsls	r3, r6, #2
 8002540:	58eb      	ldr	r3, [r5, r3]
 8002542:	4798      	blx	r3
 8002544:	3601      	adds	r6, #1
 8002546:	e7f2      	b.n	800252e <__libc_init_array+0x1e>
 8002548:	080025b8 	.word	0x080025b8
 800254c:	080025b8 	.word	0x080025b8
 8002550:	080025b8 	.word	0x080025b8
 8002554:	080025bc 	.word	0x080025bc

08002558 <memset>:
 8002558:	0003      	movs	r3, r0
 800255a:	1812      	adds	r2, r2, r0
 800255c:	4293      	cmp	r3, r2
 800255e:	d100      	bne.n	8002562 <memset+0xa>
 8002560:	4770      	bx	lr
 8002562:	7019      	strb	r1, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	e7f9      	b.n	800255c <memset+0x4>

08002568 <_init>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256e:	bc08      	pop	{r3}
 8002570:	469e      	mov	lr, r3
 8002572:	4770      	bx	lr

08002574 <_fini>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr


PWM_STM32F0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004170  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e0  080042e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080042e0  080042e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042e0  080042e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080042f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080042f4  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000832f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001437  00000000  00000000  00028363  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b8  00000000  00000000  000297a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000900  00000000  00000000  0002a158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000189c2  00000000  00000000  0002aa58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008446  00000000  00000000  0004341a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092234  00000000  00000000  0004b860  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dda94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000249c  00000000  00000000  000ddb10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004218 	.word	0x08004218

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004218 	.word	0x08004218

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 f977 	bl	800151c <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f8cd 	bl	80013d4 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fd7e 	bl	8000d44 <__aeabi_dsub>
 8000248:	f001 f8c4 	bl	80013d4 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	46de      	mov	lr, fp
 8000262:	464e      	mov	r6, r9
 8000264:	4645      	mov	r5, r8
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	4683      	mov	fp, r0
 800026a:	0007      	movs	r7, r0
 800026c:	030e      	lsls	r6, r1, #12
 800026e:	0048      	lsls	r0, r1, #1
 8000270:	b085      	sub	sp, #20
 8000272:	4692      	mov	sl, r2
 8000274:	001c      	movs	r4, r3
 8000276:	0b36      	lsrs	r6, r6, #12
 8000278:	0d40      	lsrs	r0, r0, #21
 800027a:	0fcd      	lsrs	r5, r1, #31
 800027c:	2800      	cmp	r0, #0
 800027e:	d100      	bne.n	8000282 <__aeabi_ddiv+0x26>
 8000280:	e09d      	b.n	80003be <__aeabi_ddiv+0x162>
 8000282:	4b95      	ldr	r3, [pc, #596]	; (80004d8 <__aeabi_ddiv+0x27c>)
 8000284:	4298      	cmp	r0, r3
 8000286:	d039      	beq.n	80002fc <__aeabi_ddiv+0xa0>
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	00f6      	lsls	r6, r6, #3
 800028c:	041b      	lsls	r3, r3, #16
 800028e:	431e      	orrs	r6, r3
 8000290:	4a92      	ldr	r2, [pc, #584]	; (80004dc <__aeabi_ddiv+0x280>)
 8000292:	0f7b      	lsrs	r3, r7, #29
 8000294:	4333      	orrs	r3, r6
 8000296:	4699      	mov	r9, r3
 8000298:	4694      	mov	ip, r2
 800029a:	0003      	movs	r3, r0
 800029c:	4463      	add	r3, ip
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	2300      	movs	r3, #0
 80002a2:	2600      	movs	r6, #0
 80002a4:	00ff      	lsls	r7, r7, #3
 80002a6:	9302      	str	r3, [sp, #8]
 80002a8:	0323      	lsls	r3, r4, #12
 80002aa:	0b1b      	lsrs	r3, r3, #12
 80002ac:	4698      	mov	r8, r3
 80002ae:	0063      	lsls	r3, r4, #1
 80002b0:	0fe4      	lsrs	r4, r4, #31
 80002b2:	4652      	mov	r2, sl
 80002b4:	0d5b      	lsrs	r3, r3, #21
 80002b6:	9401      	str	r4, [sp, #4]
 80002b8:	d100      	bne.n	80002bc <__aeabi_ddiv+0x60>
 80002ba:	e0b3      	b.n	8000424 <__aeabi_ddiv+0x1c8>
 80002bc:	4986      	ldr	r1, [pc, #536]	; (80004d8 <__aeabi_ddiv+0x27c>)
 80002be:	428b      	cmp	r3, r1
 80002c0:	d100      	bne.n	80002c4 <__aeabi_ddiv+0x68>
 80002c2:	e09e      	b.n	8000402 <__aeabi_ddiv+0x1a6>
 80002c4:	4642      	mov	r2, r8
 80002c6:	00d1      	lsls	r1, r2, #3
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	0412      	lsls	r2, r2, #16
 80002cc:	430a      	orrs	r2, r1
 80002ce:	4651      	mov	r1, sl
 80002d0:	0f49      	lsrs	r1, r1, #29
 80002d2:	4311      	orrs	r1, r2
 80002d4:	468b      	mov	fp, r1
 80002d6:	4981      	ldr	r1, [pc, #516]	; (80004dc <__aeabi_ddiv+0x280>)
 80002d8:	4652      	mov	r2, sl
 80002da:	468c      	mov	ip, r1
 80002dc:	9900      	ldr	r1, [sp, #0]
 80002de:	4463      	add	r3, ip
 80002e0:	1acb      	subs	r3, r1, r3
 80002e2:	2100      	movs	r1, #0
 80002e4:	00d2      	lsls	r2, r2, #3
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	002b      	movs	r3, r5
 80002ea:	4063      	eors	r3, r4
 80002ec:	469a      	mov	sl, r3
 80002ee:	2e0f      	cmp	r6, #15
 80002f0:	d900      	bls.n	80002f4 <__aeabi_ddiv+0x98>
 80002f2:	e105      	b.n	8000500 <__aeabi_ddiv+0x2a4>
 80002f4:	4b7a      	ldr	r3, [pc, #488]	; (80004e0 <__aeabi_ddiv+0x284>)
 80002f6:	00b6      	lsls	r6, r6, #2
 80002f8:	599b      	ldr	r3, [r3, r6]
 80002fa:	469f      	mov	pc, r3
 80002fc:	465b      	mov	r3, fp
 80002fe:	4333      	orrs	r3, r6
 8000300:	4699      	mov	r9, r3
 8000302:	d000      	beq.n	8000306 <__aeabi_ddiv+0xaa>
 8000304:	e0b8      	b.n	8000478 <__aeabi_ddiv+0x21c>
 8000306:	2302      	movs	r3, #2
 8000308:	2608      	movs	r6, #8
 800030a:	2700      	movs	r7, #0
 800030c:	9000      	str	r0, [sp, #0]
 800030e:	9302      	str	r3, [sp, #8]
 8000310:	e7ca      	b.n	80002a8 <__aeabi_ddiv+0x4c>
 8000312:	46cb      	mov	fp, r9
 8000314:	003a      	movs	r2, r7
 8000316:	9902      	ldr	r1, [sp, #8]
 8000318:	9501      	str	r5, [sp, #4]
 800031a:	9b01      	ldr	r3, [sp, #4]
 800031c:	469a      	mov	sl, r3
 800031e:	2902      	cmp	r1, #2
 8000320:	d027      	beq.n	8000372 <__aeabi_ddiv+0x116>
 8000322:	2903      	cmp	r1, #3
 8000324:	d100      	bne.n	8000328 <__aeabi_ddiv+0xcc>
 8000326:	e280      	b.n	800082a <__aeabi_ddiv+0x5ce>
 8000328:	2901      	cmp	r1, #1
 800032a:	d044      	beq.n	80003b6 <__aeabi_ddiv+0x15a>
 800032c:	496d      	ldr	r1, [pc, #436]	; (80004e4 <__aeabi_ddiv+0x288>)
 800032e:	9b00      	ldr	r3, [sp, #0]
 8000330:	468c      	mov	ip, r1
 8000332:	4463      	add	r3, ip
 8000334:	001c      	movs	r4, r3
 8000336:	2c00      	cmp	r4, #0
 8000338:	dd38      	ble.n	80003ac <__aeabi_ddiv+0x150>
 800033a:	0753      	lsls	r3, r2, #29
 800033c:	d000      	beq.n	8000340 <__aeabi_ddiv+0xe4>
 800033e:	e213      	b.n	8000768 <__aeabi_ddiv+0x50c>
 8000340:	08d2      	lsrs	r2, r2, #3
 8000342:	465b      	mov	r3, fp
 8000344:	01db      	lsls	r3, r3, #7
 8000346:	d509      	bpl.n	800035c <__aeabi_ddiv+0x100>
 8000348:	4659      	mov	r1, fp
 800034a:	4b67      	ldr	r3, [pc, #412]	; (80004e8 <__aeabi_ddiv+0x28c>)
 800034c:	4019      	ands	r1, r3
 800034e:	468b      	mov	fp, r1
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	00c9      	lsls	r1, r1, #3
 8000354:	468c      	mov	ip, r1
 8000356:	9b00      	ldr	r3, [sp, #0]
 8000358:	4463      	add	r3, ip
 800035a:	001c      	movs	r4, r3
 800035c:	4b63      	ldr	r3, [pc, #396]	; (80004ec <__aeabi_ddiv+0x290>)
 800035e:	429c      	cmp	r4, r3
 8000360:	dc07      	bgt.n	8000372 <__aeabi_ddiv+0x116>
 8000362:	465b      	mov	r3, fp
 8000364:	0564      	lsls	r4, r4, #21
 8000366:	075f      	lsls	r7, r3, #29
 8000368:	025b      	lsls	r3, r3, #9
 800036a:	4317      	orrs	r7, r2
 800036c:	0b1b      	lsrs	r3, r3, #12
 800036e:	0d62      	lsrs	r2, r4, #21
 8000370:	e002      	b.n	8000378 <__aeabi_ddiv+0x11c>
 8000372:	2300      	movs	r3, #0
 8000374:	2700      	movs	r7, #0
 8000376:	4a58      	ldr	r2, [pc, #352]	; (80004d8 <__aeabi_ddiv+0x27c>)
 8000378:	2100      	movs	r1, #0
 800037a:	031b      	lsls	r3, r3, #12
 800037c:	0b1c      	lsrs	r4, r3, #12
 800037e:	0d0b      	lsrs	r3, r1, #20
 8000380:	051b      	lsls	r3, r3, #20
 8000382:	4323      	orrs	r3, r4
 8000384:	0514      	lsls	r4, r2, #20
 8000386:	4a5a      	ldr	r2, [pc, #360]	; (80004f0 <__aeabi_ddiv+0x294>)
 8000388:	0038      	movs	r0, r7
 800038a:	4013      	ands	r3, r2
 800038c:	431c      	orrs	r4, r3
 800038e:	4653      	mov	r3, sl
 8000390:	0064      	lsls	r4, r4, #1
 8000392:	07db      	lsls	r3, r3, #31
 8000394:	0864      	lsrs	r4, r4, #1
 8000396:	431c      	orrs	r4, r3
 8000398:	0021      	movs	r1, r4
 800039a:	b005      	add	sp, #20
 800039c:	bc3c      	pop	{r2, r3, r4, r5}
 800039e:	4690      	mov	r8, r2
 80003a0:	4699      	mov	r9, r3
 80003a2:	46a2      	mov	sl, r4
 80003a4:	46ab      	mov	fp, r5
 80003a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a8:	2201      	movs	r2, #1
 80003aa:	4252      	negs	r2, r2
 80003ac:	2301      	movs	r3, #1
 80003ae:	1b1b      	subs	r3, r3, r4
 80003b0:	2b38      	cmp	r3, #56	; 0x38
 80003b2:	dc00      	bgt.n	80003b6 <__aeabi_ddiv+0x15a>
 80003b4:	e1ad      	b.n	8000712 <__aeabi_ddiv+0x4b6>
 80003b6:	2200      	movs	r2, #0
 80003b8:	2300      	movs	r3, #0
 80003ba:	2700      	movs	r7, #0
 80003bc:	e7dc      	b.n	8000378 <__aeabi_ddiv+0x11c>
 80003be:	465b      	mov	r3, fp
 80003c0:	4333      	orrs	r3, r6
 80003c2:	4699      	mov	r9, r3
 80003c4:	d05e      	beq.n	8000484 <__aeabi_ddiv+0x228>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d100      	bne.n	80003cc <__aeabi_ddiv+0x170>
 80003ca:	e18a      	b.n	80006e2 <__aeabi_ddiv+0x486>
 80003cc:	0030      	movs	r0, r6
 80003ce:	f001 f8af 	bl	8001530 <__clzsi2>
 80003d2:	0003      	movs	r3, r0
 80003d4:	3b0b      	subs	r3, #11
 80003d6:	2b1c      	cmp	r3, #28
 80003d8:	dd00      	ble.n	80003dc <__aeabi_ddiv+0x180>
 80003da:	e17b      	b.n	80006d4 <__aeabi_ddiv+0x478>
 80003dc:	221d      	movs	r2, #29
 80003de:	1ad3      	subs	r3, r2, r3
 80003e0:	465a      	mov	r2, fp
 80003e2:	0001      	movs	r1, r0
 80003e4:	40da      	lsrs	r2, r3
 80003e6:	3908      	subs	r1, #8
 80003e8:	408e      	lsls	r6, r1
 80003ea:	0013      	movs	r3, r2
 80003ec:	465f      	mov	r7, fp
 80003ee:	4333      	orrs	r3, r6
 80003f0:	4699      	mov	r9, r3
 80003f2:	408f      	lsls	r7, r1
 80003f4:	4b3f      	ldr	r3, [pc, #252]	; (80004f4 <__aeabi_ddiv+0x298>)
 80003f6:	2600      	movs	r6, #0
 80003f8:	1a1b      	subs	r3, r3, r0
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2300      	movs	r3, #0
 80003fe:	9302      	str	r3, [sp, #8]
 8000400:	e752      	b.n	80002a8 <__aeabi_ddiv+0x4c>
 8000402:	4641      	mov	r1, r8
 8000404:	4653      	mov	r3, sl
 8000406:	430b      	orrs	r3, r1
 8000408:	493b      	ldr	r1, [pc, #236]	; (80004f8 <__aeabi_ddiv+0x29c>)
 800040a:	469b      	mov	fp, r3
 800040c:	468c      	mov	ip, r1
 800040e:	9b00      	ldr	r3, [sp, #0]
 8000410:	4463      	add	r3, ip
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	465b      	mov	r3, fp
 8000416:	2b00      	cmp	r3, #0
 8000418:	d13b      	bne.n	8000492 <__aeabi_ddiv+0x236>
 800041a:	2302      	movs	r3, #2
 800041c:	2200      	movs	r2, #0
 800041e:	431e      	orrs	r6, r3
 8000420:	2102      	movs	r1, #2
 8000422:	e761      	b.n	80002e8 <__aeabi_ddiv+0x8c>
 8000424:	4643      	mov	r3, r8
 8000426:	4313      	orrs	r3, r2
 8000428:	469b      	mov	fp, r3
 800042a:	d037      	beq.n	800049c <__aeabi_ddiv+0x240>
 800042c:	4643      	mov	r3, r8
 800042e:	2b00      	cmp	r3, #0
 8000430:	d100      	bne.n	8000434 <__aeabi_ddiv+0x1d8>
 8000432:	e162      	b.n	80006fa <__aeabi_ddiv+0x49e>
 8000434:	4640      	mov	r0, r8
 8000436:	f001 f87b 	bl	8001530 <__clzsi2>
 800043a:	0003      	movs	r3, r0
 800043c:	3b0b      	subs	r3, #11
 800043e:	2b1c      	cmp	r3, #28
 8000440:	dd00      	ble.n	8000444 <__aeabi_ddiv+0x1e8>
 8000442:	e153      	b.n	80006ec <__aeabi_ddiv+0x490>
 8000444:	0002      	movs	r2, r0
 8000446:	4641      	mov	r1, r8
 8000448:	3a08      	subs	r2, #8
 800044a:	4091      	lsls	r1, r2
 800044c:	4688      	mov	r8, r1
 800044e:	211d      	movs	r1, #29
 8000450:	1acb      	subs	r3, r1, r3
 8000452:	4651      	mov	r1, sl
 8000454:	40d9      	lsrs	r1, r3
 8000456:	000b      	movs	r3, r1
 8000458:	4641      	mov	r1, r8
 800045a:	430b      	orrs	r3, r1
 800045c:	469b      	mov	fp, r3
 800045e:	4653      	mov	r3, sl
 8000460:	4093      	lsls	r3, r2
 8000462:	001a      	movs	r2, r3
 8000464:	9b00      	ldr	r3, [sp, #0]
 8000466:	4925      	ldr	r1, [pc, #148]	; (80004fc <__aeabi_ddiv+0x2a0>)
 8000468:	469c      	mov	ip, r3
 800046a:	4460      	add	r0, ip
 800046c:	0003      	movs	r3, r0
 800046e:	468c      	mov	ip, r1
 8000470:	4463      	add	r3, ip
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2100      	movs	r1, #0
 8000476:	e737      	b.n	80002e8 <__aeabi_ddiv+0x8c>
 8000478:	2303      	movs	r3, #3
 800047a:	46b1      	mov	r9, r6
 800047c:	9000      	str	r0, [sp, #0]
 800047e:	260c      	movs	r6, #12
 8000480:	9302      	str	r3, [sp, #8]
 8000482:	e711      	b.n	80002a8 <__aeabi_ddiv+0x4c>
 8000484:	2300      	movs	r3, #0
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	2604      	movs	r6, #4
 800048c:	2700      	movs	r7, #0
 800048e:	9302      	str	r3, [sp, #8]
 8000490:	e70a      	b.n	80002a8 <__aeabi_ddiv+0x4c>
 8000492:	2303      	movs	r3, #3
 8000494:	46c3      	mov	fp, r8
 8000496:	431e      	orrs	r6, r3
 8000498:	2103      	movs	r1, #3
 800049a:	e725      	b.n	80002e8 <__aeabi_ddiv+0x8c>
 800049c:	3301      	adds	r3, #1
 800049e:	431e      	orrs	r6, r3
 80004a0:	2200      	movs	r2, #0
 80004a2:	2101      	movs	r1, #1
 80004a4:	e720      	b.n	80002e8 <__aeabi_ddiv+0x8c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	469a      	mov	sl, r3
 80004aa:	2380      	movs	r3, #128	; 0x80
 80004ac:	2700      	movs	r7, #0
 80004ae:	031b      	lsls	r3, r3, #12
 80004b0:	4a09      	ldr	r2, [pc, #36]	; (80004d8 <__aeabi_ddiv+0x27c>)
 80004b2:	e761      	b.n	8000378 <__aeabi_ddiv+0x11c>
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	4649      	mov	r1, r9
 80004b8:	031b      	lsls	r3, r3, #12
 80004ba:	4219      	tst	r1, r3
 80004bc:	d100      	bne.n	80004c0 <__aeabi_ddiv+0x264>
 80004be:	e0e2      	b.n	8000686 <__aeabi_ddiv+0x42a>
 80004c0:	4659      	mov	r1, fp
 80004c2:	4219      	tst	r1, r3
 80004c4:	d000      	beq.n	80004c8 <__aeabi_ddiv+0x26c>
 80004c6:	e0de      	b.n	8000686 <__aeabi_ddiv+0x42a>
 80004c8:	430b      	orrs	r3, r1
 80004ca:	031b      	lsls	r3, r3, #12
 80004cc:	0017      	movs	r7, r2
 80004ce:	0b1b      	lsrs	r3, r3, #12
 80004d0:	46a2      	mov	sl, r4
 80004d2:	4a01      	ldr	r2, [pc, #4]	; (80004d8 <__aeabi_ddiv+0x27c>)
 80004d4:	e750      	b.n	8000378 <__aeabi_ddiv+0x11c>
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	000007ff 	.word	0x000007ff
 80004dc:	fffffc01 	.word	0xfffffc01
 80004e0:	08004250 	.word	0x08004250
 80004e4:	000003ff 	.word	0x000003ff
 80004e8:	feffffff 	.word	0xfeffffff
 80004ec:	000007fe 	.word	0x000007fe
 80004f0:	800fffff 	.word	0x800fffff
 80004f4:	fffffc0d 	.word	0xfffffc0d
 80004f8:	fffff801 	.word	0xfffff801
 80004fc:	000003f3 	.word	0x000003f3
 8000500:	45d9      	cmp	r9, fp
 8000502:	d900      	bls.n	8000506 <__aeabi_ddiv+0x2aa>
 8000504:	e0cb      	b.n	800069e <__aeabi_ddiv+0x442>
 8000506:	d100      	bne.n	800050a <__aeabi_ddiv+0x2ae>
 8000508:	e0c6      	b.n	8000698 <__aeabi_ddiv+0x43c>
 800050a:	003c      	movs	r4, r7
 800050c:	4648      	mov	r0, r9
 800050e:	2700      	movs	r7, #0
 8000510:	9b00      	ldr	r3, [sp, #0]
 8000512:	3b01      	subs	r3, #1
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	465b      	mov	r3, fp
 8000518:	0e16      	lsrs	r6, r2, #24
 800051a:	021b      	lsls	r3, r3, #8
 800051c:	431e      	orrs	r6, r3
 800051e:	0213      	lsls	r3, r2, #8
 8000520:	4698      	mov	r8, r3
 8000522:	0433      	lsls	r3, r6, #16
 8000524:	0c1b      	lsrs	r3, r3, #16
 8000526:	4699      	mov	r9, r3
 8000528:	0c31      	lsrs	r1, r6, #16
 800052a:	9101      	str	r1, [sp, #4]
 800052c:	f7ff fe72 	bl	8000214 <__aeabi_uidivmod>
 8000530:	464a      	mov	r2, r9
 8000532:	4342      	muls	r2, r0
 8000534:	040b      	lsls	r3, r1, #16
 8000536:	0c21      	lsrs	r1, r4, #16
 8000538:	0005      	movs	r5, r0
 800053a:	4319      	orrs	r1, r3
 800053c:	428a      	cmp	r2, r1
 800053e:	d907      	bls.n	8000550 <__aeabi_ddiv+0x2f4>
 8000540:	1989      	adds	r1, r1, r6
 8000542:	3d01      	subs	r5, #1
 8000544:	428e      	cmp	r6, r1
 8000546:	d803      	bhi.n	8000550 <__aeabi_ddiv+0x2f4>
 8000548:	428a      	cmp	r2, r1
 800054a:	d901      	bls.n	8000550 <__aeabi_ddiv+0x2f4>
 800054c:	1e85      	subs	r5, r0, #2
 800054e:	1989      	adds	r1, r1, r6
 8000550:	1a88      	subs	r0, r1, r2
 8000552:	9901      	ldr	r1, [sp, #4]
 8000554:	f7ff fe5e 	bl	8000214 <__aeabi_uidivmod>
 8000558:	0409      	lsls	r1, r1, #16
 800055a:	468c      	mov	ip, r1
 800055c:	464a      	mov	r2, r9
 800055e:	0421      	lsls	r1, r4, #16
 8000560:	4664      	mov	r4, ip
 8000562:	4342      	muls	r2, r0
 8000564:	0c09      	lsrs	r1, r1, #16
 8000566:	0003      	movs	r3, r0
 8000568:	4321      	orrs	r1, r4
 800056a:	428a      	cmp	r2, r1
 800056c:	d904      	bls.n	8000578 <__aeabi_ddiv+0x31c>
 800056e:	1989      	adds	r1, r1, r6
 8000570:	3b01      	subs	r3, #1
 8000572:	428e      	cmp	r6, r1
 8000574:	d800      	bhi.n	8000578 <__aeabi_ddiv+0x31c>
 8000576:	e0f1      	b.n	800075c <__aeabi_ddiv+0x500>
 8000578:	042d      	lsls	r5, r5, #16
 800057a:	431d      	orrs	r5, r3
 800057c:	46ab      	mov	fp, r5
 800057e:	4643      	mov	r3, r8
 8000580:	1a89      	subs	r1, r1, r2
 8000582:	4642      	mov	r2, r8
 8000584:	0c28      	lsrs	r0, r5, #16
 8000586:	0412      	lsls	r2, r2, #16
 8000588:	0c1d      	lsrs	r5, r3, #16
 800058a:	465b      	mov	r3, fp
 800058c:	0c14      	lsrs	r4, r2, #16
 800058e:	0022      	movs	r2, r4
 8000590:	041b      	lsls	r3, r3, #16
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	435a      	muls	r2, r3
 8000596:	9403      	str	r4, [sp, #12]
 8000598:	436b      	muls	r3, r5
 800059a:	4344      	muls	r4, r0
 800059c:	9502      	str	r5, [sp, #8]
 800059e:	4368      	muls	r0, r5
 80005a0:	191b      	adds	r3, r3, r4
 80005a2:	0c15      	lsrs	r5, r2, #16
 80005a4:	18eb      	adds	r3, r5, r3
 80005a6:	429c      	cmp	r4, r3
 80005a8:	d903      	bls.n	80005b2 <__aeabi_ddiv+0x356>
 80005aa:	2480      	movs	r4, #128	; 0x80
 80005ac:	0264      	lsls	r4, r4, #9
 80005ae:	46a4      	mov	ip, r4
 80005b0:	4460      	add	r0, ip
 80005b2:	0c1c      	lsrs	r4, r3, #16
 80005b4:	0415      	lsls	r5, r2, #16
 80005b6:	041b      	lsls	r3, r3, #16
 80005b8:	0c2d      	lsrs	r5, r5, #16
 80005ba:	1820      	adds	r0, r4, r0
 80005bc:	195d      	adds	r5, r3, r5
 80005be:	4281      	cmp	r1, r0
 80005c0:	d377      	bcc.n	80006b2 <__aeabi_ddiv+0x456>
 80005c2:	d073      	beq.n	80006ac <__aeabi_ddiv+0x450>
 80005c4:	1a0c      	subs	r4, r1, r0
 80005c6:	4aa2      	ldr	r2, [pc, #648]	; (8000850 <__aeabi_ddiv+0x5f4>)
 80005c8:	1b7d      	subs	r5, r7, r5
 80005ca:	42af      	cmp	r7, r5
 80005cc:	41bf      	sbcs	r7, r7
 80005ce:	4694      	mov	ip, r2
 80005d0:	9b00      	ldr	r3, [sp, #0]
 80005d2:	427f      	negs	r7, r7
 80005d4:	4463      	add	r3, ip
 80005d6:	1be0      	subs	r0, r4, r7
 80005d8:	001c      	movs	r4, r3
 80005da:	4286      	cmp	r6, r0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_ddiv+0x384>
 80005de:	e0db      	b.n	8000798 <__aeabi_ddiv+0x53c>
 80005e0:	9901      	ldr	r1, [sp, #4]
 80005e2:	f7ff fe17 	bl	8000214 <__aeabi_uidivmod>
 80005e6:	464a      	mov	r2, r9
 80005e8:	4342      	muls	r2, r0
 80005ea:	040b      	lsls	r3, r1, #16
 80005ec:	0c29      	lsrs	r1, r5, #16
 80005ee:	0007      	movs	r7, r0
 80005f0:	4319      	orrs	r1, r3
 80005f2:	428a      	cmp	r2, r1
 80005f4:	d907      	bls.n	8000606 <__aeabi_ddiv+0x3aa>
 80005f6:	1989      	adds	r1, r1, r6
 80005f8:	3f01      	subs	r7, #1
 80005fa:	428e      	cmp	r6, r1
 80005fc:	d803      	bhi.n	8000606 <__aeabi_ddiv+0x3aa>
 80005fe:	428a      	cmp	r2, r1
 8000600:	d901      	bls.n	8000606 <__aeabi_ddiv+0x3aa>
 8000602:	1e87      	subs	r7, r0, #2
 8000604:	1989      	adds	r1, r1, r6
 8000606:	1a88      	subs	r0, r1, r2
 8000608:	9901      	ldr	r1, [sp, #4]
 800060a:	f7ff fe03 	bl	8000214 <__aeabi_uidivmod>
 800060e:	0409      	lsls	r1, r1, #16
 8000610:	464a      	mov	r2, r9
 8000612:	4689      	mov	r9, r1
 8000614:	0429      	lsls	r1, r5, #16
 8000616:	464d      	mov	r5, r9
 8000618:	4342      	muls	r2, r0
 800061a:	0c09      	lsrs	r1, r1, #16
 800061c:	0003      	movs	r3, r0
 800061e:	4329      	orrs	r1, r5
 8000620:	428a      	cmp	r2, r1
 8000622:	d907      	bls.n	8000634 <__aeabi_ddiv+0x3d8>
 8000624:	1989      	adds	r1, r1, r6
 8000626:	3b01      	subs	r3, #1
 8000628:	428e      	cmp	r6, r1
 800062a:	d803      	bhi.n	8000634 <__aeabi_ddiv+0x3d8>
 800062c:	428a      	cmp	r2, r1
 800062e:	d901      	bls.n	8000634 <__aeabi_ddiv+0x3d8>
 8000630:	1e83      	subs	r3, r0, #2
 8000632:	1989      	adds	r1, r1, r6
 8000634:	043f      	lsls	r7, r7, #16
 8000636:	1a89      	subs	r1, r1, r2
 8000638:	003a      	movs	r2, r7
 800063a:	9f03      	ldr	r7, [sp, #12]
 800063c:	431a      	orrs	r2, r3
 800063e:	0038      	movs	r0, r7
 8000640:	0413      	lsls	r3, r2, #16
 8000642:	0c1b      	lsrs	r3, r3, #16
 8000644:	4358      	muls	r0, r3
 8000646:	4681      	mov	r9, r0
 8000648:	9802      	ldr	r0, [sp, #8]
 800064a:	0c15      	lsrs	r5, r2, #16
 800064c:	436f      	muls	r7, r5
 800064e:	4343      	muls	r3, r0
 8000650:	4345      	muls	r5, r0
 8000652:	4648      	mov	r0, r9
 8000654:	0c00      	lsrs	r0, r0, #16
 8000656:	4684      	mov	ip, r0
 8000658:	19db      	adds	r3, r3, r7
 800065a:	4463      	add	r3, ip
 800065c:	429f      	cmp	r7, r3
 800065e:	d903      	bls.n	8000668 <__aeabi_ddiv+0x40c>
 8000660:	2080      	movs	r0, #128	; 0x80
 8000662:	0240      	lsls	r0, r0, #9
 8000664:	4684      	mov	ip, r0
 8000666:	4465      	add	r5, ip
 8000668:	4648      	mov	r0, r9
 800066a:	0c1f      	lsrs	r7, r3, #16
 800066c:	0400      	lsls	r0, r0, #16
 800066e:	041b      	lsls	r3, r3, #16
 8000670:	0c00      	lsrs	r0, r0, #16
 8000672:	197d      	adds	r5, r7, r5
 8000674:	1818      	adds	r0, r3, r0
 8000676:	42a9      	cmp	r1, r5
 8000678:	d200      	bcs.n	800067c <__aeabi_ddiv+0x420>
 800067a:	e084      	b.n	8000786 <__aeabi_ddiv+0x52a>
 800067c:	d100      	bne.n	8000680 <__aeabi_ddiv+0x424>
 800067e:	e07f      	b.n	8000780 <__aeabi_ddiv+0x524>
 8000680:	2301      	movs	r3, #1
 8000682:	431a      	orrs	r2, r3
 8000684:	e657      	b.n	8000336 <__aeabi_ddiv+0xda>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	464a      	mov	r2, r9
 800068a:	031b      	lsls	r3, r3, #12
 800068c:	4313      	orrs	r3, r2
 800068e:	031b      	lsls	r3, r3, #12
 8000690:	0b1b      	lsrs	r3, r3, #12
 8000692:	46aa      	mov	sl, r5
 8000694:	4a6f      	ldr	r2, [pc, #444]	; (8000854 <__aeabi_ddiv+0x5f8>)
 8000696:	e66f      	b.n	8000378 <__aeabi_ddiv+0x11c>
 8000698:	42ba      	cmp	r2, r7
 800069a:	d900      	bls.n	800069e <__aeabi_ddiv+0x442>
 800069c:	e735      	b.n	800050a <__aeabi_ddiv+0x2ae>
 800069e:	464b      	mov	r3, r9
 80006a0:	07dc      	lsls	r4, r3, #31
 80006a2:	0858      	lsrs	r0, r3, #1
 80006a4:	087b      	lsrs	r3, r7, #1
 80006a6:	431c      	orrs	r4, r3
 80006a8:	07ff      	lsls	r7, r7, #31
 80006aa:	e734      	b.n	8000516 <__aeabi_ddiv+0x2ba>
 80006ac:	2400      	movs	r4, #0
 80006ae:	42af      	cmp	r7, r5
 80006b0:	d289      	bcs.n	80005c6 <__aeabi_ddiv+0x36a>
 80006b2:	4447      	add	r7, r8
 80006b4:	4547      	cmp	r7, r8
 80006b6:	41a4      	sbcs	r4, r4
 80006b8:	465b      	mov	r3, fp
 80006ba:	4264      	negs	r4, r4
 80006bc:	19a4      	adds	r4, r4, r6
 80006be:	1864      	adds	r4, r4, r1
 80006c0:	3b01      	subs	r3, #1
 80006c2:	42a6      	cmp	r6, r4
 80006c4:	d21e      	bcs.n	8000704 <__aeabi_ddiv+0x4a8>
 80006c6:	42a0      	cmp	r0, r4
 80006c8:	d86d      	bhi.n	80007a6 <__aeabi_ddiv+0x54a>
 80006ca:	d100      	bne.n	80006ce <__aeabi_ddiv+0x472>
 80006cc:	e0b6      	b.n	800083c <__aeabi_ddiv+0x5e0>
 80006ce:	1a24      	subs	r4, r4, r0
 80006d0:	469b      	mov	fp, r3
 80006d2:	e778      	b.n	80005c6 <__aeabi_ddiv+0x36a>
 80006d4:	0003      	movs	r3, r0
 80006d6:	465a      	mov	r2, fp
 80006d8:	3b28      	subs	r3, #40	; 0x28
 80006da:	409a      	lsls	r2, r3
 80006dc:	2700      	movs	r7, #0
 80006de:	4691      	mov	r9, r2
 80006e0:	e688      	b.n	80003f4 <__aeabi_ddiv+0x198>
 80006e2:	4658      	mov	r0, fp
 80006e4:	f000 ff24 	bl	8001530 <__clzsi2>
 80006e8:	3020      	adds	r0, #32
 80006ea:	e672      	b.n	80003d2 <__aeabi_ddiv+0x176>
 80006ec:	0003      	movs	r3, r0
 80006ee:	4652      	mov	r2, sl
 80006f0:	3b28      	subs	r3, #40	; 0x28
 80006f2:	409a      	lsls	r2, r3
 80006f4:	4693      	mov	fp, r2
 80006f6:	2200      	movs	r2, #0
 80006f8:	e6b4      	b.n	8000464 <__aeabi_ddiv+0x208>
 80006fa:	4650      	mov	r0, sl
 80006fc:	f000 ff18 	bl	8001530 <__clzsi2>
 8000700:	3020      	adds	r0, #32
 8000702:	e69a      	b.n	800043a <__aeabi_ddiv+0x1de>
 8000704:	42a6      	cmp	r6, r4
 8000706:	d1e2      	bne.n	80006ce <__aeabi_ddiv+0x472>
 8000708:	45b8      	cmp	r8, r7
 800070a:	d9dc      	bls.n	80006c6 <__aeabi_ddiv+0x46a>
 800070c:	1a34      	subs	r4, r6, r0
 800070e:	469b      	mov	fp, r3
 8000710:	e759      	b.n	80005c6 <__aeabi_ddiv+0x36a>
 8000712:	2b1f      	cmp	r3, #31
 8000714:	dc65      	bgt.n	80007e2 <__aeabi_ddiv+0x586>
 8000716:	4c50      	ldr	r4, [pc, #320]	; (8000858 <__aeabi_ddiv+0x5fc>)
 8000718:	9900      	ldr	r1, [sp, #0]
 800071a:	46a4      	mov	ip, r4
 800071c:	465c      	mov	r4, fp
 800071e:	4461      	add	r1, ip
 8000720:	0008      	movs	r0, r1
 8000722:	408c      	lsls	r4, r1
 8000724:	0011      	movs	r1, r2
 8000726:	4082      	lsls	r2, r0
 8000728:	40d9      	lsrs	r1, r3
 800072a:	1e50      	subs	r0, r2, #1
 800072c:	4182      	sbcs	r2, r0
 800072e:	430c      	orrs	r4, r1
 8000730:	4314      	orrs	r4, r2
 8000732:	465a      	mov	r2, fp
 8000734:	40da      	lsrs	r2, r3
 8000736:	0013      	movs	r3, r2
 8000738:	0762      	lsls	r2, r4, #29
 800073a:	d009      	beq.n	8000750 <__aeabi_ddiv+0x4f4>
 800073c:	220f      	movs	r2, #15
 800073e:	4022      	ands	r2, r4
 8000740:	2a04      	cmp	r2, #4
 8000742:	d005      	beq.n	8000750 <__aeabi_ddiv+0x4f4>
 8000744:	0022      	movs	r2, r4
 8000746:	1d14      	adds	r4, r2, #4
 8000748:	4294      	cmp	r4, r2
 800074a:	4189      	sbcs	r1, r1
 800074c:	4249      	negs	r1, r1
 800074e:	185b      	adds	r3, r3, r1
 8000750:	021a      	lsls	r2, r3, #8
 8000752:	d562      	bpl.n	800081a <__aeabi_ddiv+0x5be>
 8000754:	2201      	movs	r2, #1
 8000756:	2300      	movs	r3, #0
 8000758:	2700      	movs	r7, #0
 800075a:	e60d      	b.n	8000378 <__aeabi_ddiv+0x11c>
 800075c:	428a      	cmp	r2, r1
 800075e:	d800      	bhi.n	8000762 <__aeabi_ddiv+0x506>
 8000760:	e70a      	b.n	8000578 <__aeabi_ddiv+0x31c>
 8000762:	1e83      	subs	r3, r0, #2
 8000764:	1989      	adds	r1, r1, r6
 8000766:	e707      	b.n	8000578 <__aeabi_ddiv+0x31c>
 8000768:	230f      	movs	r3, #15
 800076a:	4013      	ands	r3, r2
 800076c:	2b04      	cmp	r3, #4
 800076e:	d100      	bne.n	8000772 <__aeabi_ddiv+0x516>
 8000770:	e5e6      	b.n	8000340 <__aeabi_ddiv+0xe4>
 8000772:	1d17      	adds	r7, r2, #4
 8000774:	4297      	cmp	r7, r2
 8000776:	4192      	sbcs	r2, r2
 8000778:	4253      	negs	r3, r2
 800077a:	449b      	add	fp, r3
 800077c:	08fa      	lsrs	r2, r7, #3
 800077e:	e5e0      	b.n	8000342 <__aeabi_ddiv+0xe6>
 8000780:	2800      	cmp	r0, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_ddiv+0x52a>
 8000784:	e5d7      	b.n	8000336 <__aeabi_ddiv+0xda>
 8000786:	1871      	adds	r1, r6, r1
 8000788:	1e53      	subs	r3, r2, #1
 800078a:	42b1      	cmp	r1, r6
 800078c:	d327      	bcc.n	80007de <__aeabi_ddiv+0x582>
 800078e:	42a9      	cmp	r1, r5
 8000790:	d315      	bcc.n	80007be <__aeabi_ddiv+0x562>
 8000792:	d058      	beq.n	8000846 <__aeabi_ddiv+0x5ea>
 8000794:	001a      	movs	r2, r3
 8000796:	e773      	b.n	8000680 <__aeabi_ddiv+0x424>
 8000798:	2b00      	cmp	r3, #0
 800079a:	dc00      	bgt.n	800079e <__aeabi_ddiv+0x542>
 800079c:	e604      	b.n	80003a8 <__aeabi_ddiv+0x14c>
 800079e:	2301      	movs	r3, #1
 80007a0:	2200      	movs	r2, #0
 80007a2:	449b      	add	fp, r3
 80007a4:	e5cd      	b.n	8000342 <__aeabi_ddiv+0xe6>
 80007a6:	2302      	movs	r3, #2
 80007a8:	4447      	add	r7, r8
 80007aa:	4547      	cmp	r7, r8
 80007ac:	4189      	sbcs	r1, r1
 80007ae:	425b      	negs	r3, r3
 80007b0:	469c      	mov	ip, r3
 80007b2:	4249      	negs	r1, r1
 80007b4:	1989      	adds	r1, r1, r6
 80007b6:	190c      	adds	r4, r1, r4
 80007b8:	44e3      	add	fp, ip
 80007ba:	1a24      	subs	r4, r4, r0
 80007bc:	e703      	b.n	80005c6 <__aeabi_ddiv+0x36a>
 80007be:	4643      	mov	r3, r8
 80007c0:	005f      	lsls	r7, r3, #1
 80007c2:	4547      	cmp	r7, r8
 80007c4:	419b      	sbcs	r3, r3
 80007c6:	46b8      	mov	r8, r7
 80007c8:	425b      	negs	r3, r3
 80007ca:	199e      	adds	r6, r3, r6
 80007cc:	3a02      	subs	r2, #2
 80007ce:	1989      	adds	r1, r1, r6
 80007d0:	42a9      	cmp	r1, r5
 80007d2:	d000      	beq.n	80007d6 <__aeabi_ddiv+0x57a>
 80007d4:	e754      	b.n	8000680 <__aeabi_ddiv+0x424>
 80007d6:	4540      	cmp	r0, r8
 80007d8:	d000      	beq.n	80007dc <__aeabi_ddiv+0x580>
 80007da:	e751      	b.n	8000680 <__aeabi_ddiv+0x424>
 80007dc:	e5ab      	b.n	8000336 <__aeabi_ddiv+0xda>
 80007de:	001a      	movs	r2, r3
 80007e0:	e7f6      	b.n	80007d0 <__aeabi_ddiv+0x574>
 80007e2:	211f      	movs	r1, #31
 80007e4:	465f      	mov	r7, fp
 80007e6:	4249      	negs	r1, r1
 80007e8:	1b0c      	subs	r4, r1, r4
 80007ea:	40e7      	lsrs	r7, r4
 80007ec:	2b20      	cmp	r3, #32
 80007ee:	d007      	beq.n	8000800 <__aeabi_ddiv+0x5a4>
 80007f0:	491a      	ldr	r1, [pc, #104]	; (800085c <__aeabi_ddiv+0x600>)
 80007f2:	9b00      	ldr	r3, [sp, #0]
 80007f4:	468c      	mov	ip, r1
 80007f6:	4463      	add	r3, ip
 80007f8:	0018      	movs	r0, r3
 80007fa:	465b      	mov	r3, fp
 80007fc:	4083      	lsls	r3, r0
 80007fe:	431a      	orrs	r2, r3
 8000800:	1e50      	subs	r0, r2, #1
 8000802:	4182      	sbcs	r2, r0
 8000804:	433a      	orrs	r2, r7
 8000806:	2707      	movs	r7, #7
 8000808:	2300      	movs	r3, #0
 800080a:	4017      	ands	r7, r2
 800080c:	d009      	beq.n	8000822 <__aeabi_ddiv+0x5c6>
 800080e:	210f      	movs	r1, #15
 8000810:	2300      	movs	r3, #0
 8000812:	4011      	ands	r1, r2
 8000814:	0014      	movs	r4, r2
 8000816:	2904      	cmp	r1, #4
 8000818:	d195      	bne.n	8000746 <__aeabi_ddiv+0x4ea>
 800081a:	0022      	movs	r2, r4
 800081c:	075f      	lsls	r7, r3, #29
 800081e:	025b      	lsls	r3, r3, #9
 8000820:	0b1b      	lsrs	r3, r3, #12
 8000822:	08d2      	lsrs	r2, r2, #3
 8000824:	4317      	orrs	r7, r2
 8000826:	2200      	movs	r2, #0
 8000828:	e5a6      	b.n	8000378 <__aeabi_ddiv+0x11c>
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	4659      	mov	r1, fp
 800082e:	031b      	lsls	r3, r3, #12
 8000830:	430b      	orrs	r3, r1
 8000832:	031b      	lsls	r3, r3, #12
 8000834:	0017      	movs	r7, r2
 8000836:	0b1b      	lsrs	r3, r3, #12
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <__aeabi_ddiv+0x5f8>)
 800083a:	e59d      	b.n	8000378 <__aeabi_ddiv+0x11c>
 800083c:	42bd      	cmp	r5, r7
 800083e:	d8b2      	bhi.n	80007a6 <__aeabi_ddiv+0x54a>
 8000840:	469b      	mov	fp, r3
 8000842:	2400      	movs	r4, #0
 8000844:	e6bf      	b.n	80005c6 <__aeabi_ddiv+0x36a>
 8000846:	4580      	cmp	r8, r0
 8000848:	d3b9      	bcc.n	80007be <__aeabi_ddiv+0x562>
 800084a:	001a      	movs	r2, r3
 800084c:	e7c3      	b.n	80007d6 <__aeabi_ddiv+0x57a>
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	000003ff 	.word	0x000003ff
 8000854:	000007ff 	.word	0x000007ff
 8000858:	0000041e 	.word	0x0000041e
 800085c:	0000043e 	.word	0x0000043e

08000860 <__aeabi_dmul>:
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	4657      	mov	r7, sl
 8000864:	46de      	mov	lr, fp
 8000866:	464e      	mov	r6, r9
 8000868:	4645      	mov	r5, r8
 800086a:	b5e0      	push	{r5, r6, r7, lr}
 800086c:	4683      	mov	fp, r0
 800086e:	0006      	movs	r6, r0
 8000870:	030f      	lsls	r7, r1, #12
 8000872:	0048      	lsls	r0, r1, #1
 8000874:	b087      	sub	sp, #28
 8000876:	4692      	mov	sl, r2
 8000878:	001d      	movs	r5, r3
 800087a:	0b3f      	lsrs	r7, r7, #12
 800087c:	0d40      	lsrs	r0, r0, #21
 800087e:	0fcc      	lsrs	r4, r1, #31
 8000880:	2800      	cmp	r0, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dmul+0x26>
 8000884:	e06f      	b.n	8000966 <__aeabi_dmul+0x106>
 8000886:	4bde      	ldr	r3, [pc, #888]	; (8000c00 <__aeabi_dmul+0x3a0>)
 8000888:	4298      	cmp	r0, r3
 800088a:	d038      	beq.n	80008fe <__aeabi_dmul+0x9e>
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	00ff      	lsls	r7, r7, #3
 8000890:	041b      	lsls	r3, r3, #16
 8000892:	431f      	orrs	r7, r3
 8000894:	0f73      	lsrs	r3, r6, #29
 8000896:	433b      	orrs	r3, r7
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	4bda      	ldr	r3, [pc, #872]	; (8000c04 <__aeabi_dmul+0x3a4>)
 800089c:	2700      	movs	r7, #0
 800089e:	4699      	mov	r9, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	469b      	mov	fp, r3
 80008a4:	00f6      	lsls	r6, r6, #3
 80008a6:	4481      	add	r9, r0
 80008a8:	032b      	lsls	r3, r5, #12
 80008aa:	0069      	lsls	r1, r5, #1
 80008ac:	0b1b      	lsrs	r3, r3, #12
 80008ae:	4652      	mov	r2, sl
 80008b0:	4698      	mov	r8, r3
 80008b2:	0d49      	lsrs	r1, r1, #21
 80008b4:	0fed      	lsrs	r5, r5, #31
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_dmul+0x5c>
 80008ba:	e085      	b.n	80009c8 <__aeabi_dmul+0x168>
 80008bc:	4bd0      	ldr	r3, [pc, #832]	; (8000c00 <__aeabi_dmul+0x3a0>)
 80008be:	4299      	cmp	r1, r3
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dmul+0x64>
 80008c2:	e073      	b.n	80009ac <__aeabi_dmul+0x14c>
 80008c4:	4643      	mov	r3, r8
 80008c6:	00da      	lsls	r2, r3, #3
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	041b      	lsls	r3, r3, #16
 80008cc:	4313      	orrs	r3, r2
 80008ce:	4652      	mov	r2, sl
 80008d0:	48cc      	ldr	r0, [pc, #816]	; (8000c04 <__aeabi_dmul+0x3a4>)
 80008d2:	0f52      	lsrs	r2, r2, #29
 80008d4:	4684      	mov	ip, r0
 80008d6:	4313      	orrs	r3, r2
 80008d8:	4652      	mov	r2, sl
 80008da:	2000      	movs	r0, #0
 80008dc:	4461      	add	r1, ip
 80008de:	00d2      	lsls	r2, r2, #3
 80008e0:	4489      	add	r9, r1
 80008e2:	0021      	movs	r1, r4
 80008e4:	4069      	eors	r1, r5
 80008e6:	9100      	str	r1, [sp, #0]
 80008e8:	468c      	mov	ip, r1
 80008ea:	2101      	movs	r1, #1
 80008ec:	4449      	add	r1, r9
 80008ee:	468a      	mov	sl, r1
 80008f0:	2f0f      	cmp	r7, #15
 80008f2:	d900      	bls.n	80008f6 <__aeabi_dmul+0x96>
 80008f4:	e090      	b.n	8000a18 <__aeabi_dmul+0x1b8>
 80008f6:	49c4      	ldr	r1, [pc, #784]	; (8000c08 <__aeabi_dmul+0x3a8>)
 80008f8:	00bf      	lsls	r7, r7, #2
 80008fa:	59cf      	ldr	r7, [r1, r7]
 80008fc:	46bf      	mov	pc, r7
 80008fe:	465b      	mov	r3, fp
 8000900:	433b      	orrs	r3, r7
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	d000      	beq.n	8000908 <__aeabi_dmul+0xa8>
 8000906:	e16a      	b.n	8000bde <__aeabi_dmul+0x37e>
 8000908:	2302      	movs	r3, #2
 800090a:	2708      	movs	r7, #8
 800090c:	2600      	movs	r6, #0
 800090e:	4681      	mov	r9, r0
 8000910:	469b      	mov	fp, r3
 8000912:	e7c9      	b.n	80008a8 <__aeabi_dmul+0x48>
 8000914:	0032      	movs	r2, r6
 8000916:	4658      	mov	r0, fp
 8000918:	9b01      	ldr	r3, [sp, #4]
 800091a:	4661      	mov	r1, ip
 800091c:	9100      	str	r1, [sp, #0]
 800091e:	2802      	cmp	r0, #2
 8000920:	d100      	bne.n	8000924 <__aeabi_dmul+0xc4>
 8000922:	e075      	b.n	8000a10 <__aeabi_dmul+0x1b0>
 8000924:	2803      	cmp	r0, #3
 8000926:	d100      	bne.n	800092a <__aeabi_dmul+0xca>
 8000928:	e1fe      	b.n	8000d28 <__aeabi_dmul+0x4c8>
 800092a:	2801      	cmp	r0, #1
 800092c:	d000      	beq.n	8000930 <__aeabi_dmul+0xd0>
 800092e:	e12c      	b.n	8000b8a <__aeabi_dmul+0x32a>
 8000930:	2300      	movs	r3, #0
 8000932:	2700      	movs	r7, #0
 8000934:	2600      	movs	r6, #0
 8000936:	2500      	movs	r5, #0
 8000938:	033f      	lsls	r7, r7, #12
 800093a:	0d2a      	lsrs	r2, r5, #20
 800093c:	0b3f      	lsrs	r7, r7, #12
 800093e:	48b3      	ldr	r0, [pc, #716]	; (8000c0c <__aeabi_dmul+0x3ac>)
 8000940:	0512      	lsls	r2, r2, #20
 8000942:	433a      	orrs	r2, r7
 8000944:	4002      	ands	r2, r0
 8000946:	051b      	lsls	r3, r3, #20
 8000948:	4313      	orrs	r3, r2
 800094a:	9a00      	ldr	r2, [sp, #0]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	07d1      	lsls	r1, r2, #31
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	430b      	orrs	r3, r1
 8000954:	0030      	movs	r0, r6
 8000956:	0019      	movs	r1, r3
 8000958:	b007      	add	sp, #28
 800095a:	bc3c      	pop	{r2, r3, r4, r5}
 800095c:	4690      	mov	r8, r2
 800095e:	4699      	mov	r9, r3
 8000960:	46a2      	mov	sl, r4
 8000962:	46ab      	mov	fp, r5
 8000964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000966:	465b      	mov	r3, fp
 8000968:	433b      	orrs	r3, r7
 800096a:	9301      	str	r3, [sp, #4]
 800096c:	d100      	bne.n	8000970 <__aeabi_dmul+0x110>
 800096e:	e12f      	b.n	8000bd0 <__aeabi_dmul+0x370>
 8000970:	2f00      	cmp	r7, #0
 8000972:	d100      	bne.n	8000976 <__aeabi_dmul+0x116>
 8000974:	e1a5      	b.n	8000cc2 <__aeabi_dmul+0x462>
 8000976:	0038      	movs	r0, r7
 8000978:	f000 fdda 	bl	8001530 <__clzsi2>
 800097c:	0003      	movs	r3, r0
 800097e:	3b0b      	subs	r3, #11
 8000980:	2b1c      	cmp	r3, #28
 8000982:	dd00      	ble.n	8000986 <__aeabi_dmul+0x126>
 8000984:	e196      	b.n	8000cb4 <__aeabi_dmul+0x454>
 8000986:	221d      	movs	r2, #29
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	465a      	mov	r2, fp
 800098c:	0001      	movs	r1, r0
 800098e:	40da      	lsrs	r2, r3
 8000990:	465e      	mov	r6, fp
 8000992:	3908      	subs	r1, #8
 8000994:	408f      	lsls	r7, r1
 8000996:	0013      	movs	r3, r2
 8000998:	408e      	lsls	r6, r1
 800099a:	433b      	orrs	r3, r7
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	4b9c      	ldr	r3, [pc, #624]	; (8000c10 <__aeabi_dmul+0x3b0>)
 80009a0:	2700      	movs	r7, #0
 80009a2:	1a1b      	subs	r3, r3, r0
 80009a4:	4699      	mov	r9, r3
 80009a6:	2300      	movs	r3, #0
 80009a8:	469b      	mov	fp, r3
 80009aa:	e77d      	b.n	80008a8 <__aeabi_dmul+0x48>
 80009ac:	4641      	mov	r1, r8
 80009ae:	4653      	mov	r3, sl
 80009b0:	430b      	orrs	r3, r1
 80009b2:	4993      	ldr	r1, [pc, #588]	; (8000c00 <__aeabi_dmul+0x3a0>)
 80009b4:	468c      	mov	ip, r1
 80009b6:	44e1      	add	r9, ip
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d000      	beq.n	80009be <__aeabi_dmul+0x15e>
 80009bc:	e11a      	b.n	8000bf4 <__aeabi_dmul+0x394>
 80009be:	2202      	movs	r2, #2
 80009c0:	2002      	movs	r0, #2
 80009c2:	4317      	orrs	r7, r2
 80009c4:	2200      	movs	r2, #0
 80009c6:	e78c      	b.n	80008e2 <__aeabi_dmul+0x82>
 80009c8:	4313      	orrs	r3, r2
 80009ca:	d100      	bne.n	80009ce <__aeabi_dmul+0x16e>
 80009cc:	e10d      	b.n	8000bea <__aeabi_dmul+0x38a>
 80009ce:	4643      	mov	r3, r8
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_dmul+0x176>
 80009d4:	e181      	b.n	8000cda <__aeabi_dmul+0x47a>
 80009d6:	4640      	mov	r0, r8
 80009d8:	f000 fdaa 	bl	8001530 <__clzsi2>
 80009dc:	0002      	movs	r2, r0
 80009de:	3a0b      	subs	r2, #11
 80009e0:	2a1c      	cmp	r2, #28
 80009e2:	dd00      	ble.n	80009e6 <__aeabi_dmul+0x186>
 80009e4:	e172      	b.n	8000ccc <__aeabi_dmul+0x46c>
 80009e6:	0001      	movs	r1, r0
 80009e8:	4643      	mov	r3, r8
 80009ea:	3908      	subs	r1, #8
 80009ec:	408b      	lsls	r3, r1
 80009ee:	4698      	mov	r8, r3
 80009f0:	231d      	movs	r3, #29
 80009f2:	1a9a      	subs	r2, r3, r2
 80009f4:	4653      	mov	r3, sl
 80009f6:	40d3      	lsrs	r3, r2
 80009f8:	001a      	movs	r2, r3
 80009fa:	4643      	mov	r3, r8
 80009fc:	4313      	orrs	r3, r2
 80009fe:	4652      	mov	r2, sl
 8000a00:	408a      	lsls	r2, r1
 8000a02:	4649      	mov	r1, r9
 8000a04:	1a08      	subs	r0, r1, r0
 8000a06:	4982      	ldr	r1, [pc, #520]	; (8000c10 <__aeabi_dmul+0x3b0>)
 8000a08:	4689      	mov	r9, r1
 8000a0a:	4481      	add	r9, r0
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	e768      	b.n	80008e2 <__aeabi_dmul+0x82>
 8000a10:	4b7b      	ldr	r3, [pc, #492]	; (8000c00 <__aeabi_dmul+0x3a0>)
 8000a12:	2700      	movs	r7, #0
 8000a14:	2600      	movs	r6, #0
 8000a16:	e78e      	b.n	8000936 <__aeabi_dmul+0xd6>
 8000a18:	0c14      	lsrs	r4, r2, #16
 8000a1a:	0412      	lsls	r2, r2, #16
 8000a1c:	0c12      	lsrs	r2, r2, #16
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0c37      	lsrs	r7, r6, #16
 8000a22:	0436      	lsls	r6, r6, #16
 8000a24:	0c35      	lsrs	r5, r6, #16
 8000a26:	4379      	muls	r1, r7
 8000a28:	0028      	movs	r0, r5
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	002e      	movs	r6, r5
 8000a2e:	4360      	muls	r0, r4
 8000a30:	4460      	add	r0, ip
 8000a32:	4683      	mov	fp, r0
 8000a34:	4356      	muls	r6, r2
 8000a36:	0021      	movs	r1, r4
 8000a38:	0c30      	lsrs	r0, r6, #16
 8000a3a:	4680      	mov	r8, r0
 8000a3c:	4658      	mov	r0, fp
 8000a3e:	4379      	muls	r1, r7
 8000a40:	4440      	add	r0, r8
 8000a42:	9102      	str	r1, [sp, #8]
 8000a44:	4584      	cmp	ip, r0
 8000a46:	d906      	bls.n	8000a56 <__aeabi_dmul+0x1f6>
 8000a48:	4688      	mov	r8, r1
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	0249      	lsls	r1, r1, #9
 8000a4e:	468c      	mov	ip, r1
 8000a50:	44e0      	add	r8, ip
 8000a52:	4641      	mov	r1, r8
 8000a54:	9102      	str	r1, [sp, #8]
 8000a56:	0436      	lsls	r6, r6, #16
 8000a58:	0c01      	lsrs	r1, r0, #16
 8000a5a:	0c36      	lsrs	r6, r6, #16
 8000a5c:	0400      	lsls	r0, r0, #16
 8000a5e:	468b      	mov	fp, r1
 8000a60:	1981      	adds	r1, r0, r6
 8000a62:	0c1e      	lsrs	r6, r3, #16
 8000a64:	041b      	lsls	r3, r3, #16
 8000a66:	0c1b      	lsrs	r3, r3, #16
 8000a68:	9103      	str	r1, [sp, #12]
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	4379      	muls	r1, r7
 8000a6e:	468c      	mov	ip, r1
 8000a70:	0028      	movs	r0, r5
 8000a72:	4375      	muls	r5, r6
 8000a74:	4465      	add	r5, ip
 8000a76:	46a8      	mov	r8, r5
 8000a78:	4358      	muls	r0, r3
 8000a7a:	0c05      	lsrs	r5, r0, #16
 8000a7c:	4445      	add	r5, r8
 8000a7e:	4377      	muls	r7, r6
 8000a80:	42a9      	cmp	r1, r5
 8000a82:	d903      	bls.n	8000a8c <__aeabi_dmul+0x22c>
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0249      	lsls	r1, r1, #9
 8000a88:	468c      	mov	ip, r1
 8000a8a:	4467      	add	r7, ip
 8000a8c:	0c29      	lsrs	r1, r5, #16
 8000a8e:	468c      	mov	ip, r1
 8000a90:	0039      	movs	r1, r7
 8000a92:	0400      	lsls	r0, r0, #16
 8000a94:	0c00      	lsrs	r0, r0, #16
 8000a96:	042d      	lsls	r5, r5, #16
 8000a98:	182d      	adds	r5, r5, r0
 8000a9a:	4461      	add	r1, ip
 8000a9c:	44ab      	add	fp, r5
 8000a9e:	9105      	str	r1, [sp, #20]
 8000aa0:	4659      	mov	r1, fp
 8000aa2:	9104      	str	r1, [sp, #16]
 8000aa4:	9901      	ldr	r1, [sp, #4]
 8000aa6:	040f      	lsls	r7, r1, #16
 8000aa8:	0c3f      	lsrs	r7, r7, #16
 8000aaa:	0c08      	lsrs	r0, r1, #16
 8000aac:	0039      	movs	r1, r7
 8000aae:	4351      	muls	r1, r2
 8000ab0:	4342      	muls	r2, r0
 8000ab2:	4690      	mov	r8, r2
 8000ab4:	0002      	movs	r2, r0
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	0c09      	lsrs	r1, r1, #16
 8000aba:	468b      	mov	fp, r1
 8000abc:	4362      	muls	r2, r4
 8000abe:	437c      	muls	r4, r7
 8000ac0:	4444      	add	r4, r8
 8000ac2:	445c      	add	r4, fp
 8000ac4:	45a0      	cmp	r8, r4
 8000ac6:	d903      	bls.n	8000ad0 <__aeabi_dmul+0x270>
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0249      	lsls	r1, r1, #9
 8000acc:	4688      	mov	r8, r1
 8000ace:	4442      	add	r2, r8
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	4688      	mov	r8, r1
 8000ad4:	4661      	mov	r1, ip
 8000ad6:	0409      	lsls	r1, r1, #16
 8000ad8:	0c09      	lsrs	r1, r1, #16
 8000ada:	468c      	mov	ip, r1
 8000adc:	0039      	movs	r1, r7
 8000ade:	4359      	muls	r1, r3
 8000ae0:	4343      	muls	r3, r0
 8000ae2:	4370      	muls	r0, r6
 8000ae4:	437e      	muls	r6, r7
 8000ae6:	0c0f      	lsrs	r7, r1, #16
 8000ae8:	18f6      	adds	r6, r6, r3
 8000aea:	0424      	lsls	r4, r4, #16
 8000aec:	19be      	adds	r6, r7, r6
 8000aee:	4464      	add	r4, ip
 8000af0:	4442      	add	r2, r8
 8000af2:	468c      	mov	ip, r1
 8000af4:	42b3      	cmp	r3, r6
 8000af6:	d903      	bls.n	8000b00 <__aeabi_dmul+0x2a0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	025b      	lsls	r3, r3, #9
 8000afc:	4698      	mov	r8, r3
 8000afe:	4440      	add	r0, r8
 8000b00:	9b02      	ldr	r3, [sp, #8]
 8000b02:	4661      	mov	r1, ip
 8000b04:	4698      	mov	r8, r3
 8000b06:	9b04      	ldr	r3, [sp, #16]
 8000b08:	0437      	lsls	r7, r6, #16
 8000b0a:	4443      	add	r3, r8
 8000b0c:	469b      	mov	fp, r3
 8000b0e:	45ab      	cmp	fp, r5
 8000b10:	41ad      	sbcs	r5, r5
 8000b12:	426b      	negs	r3, r5
 8000b14:	040d      	lsls	r5, r1, #16
 8000b16:	9905      	ldr	r1, [sp, #20]
 8000b18:	0c2d      	lsrs	r5, r5, #16
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	197f      	adds	r7, r7, r5
 8000b1e:	4467      	add	r7, ip
 8000b20:	18fd      	adds	r5, r7, r3
 8000b22:	46a8      	mov	r8, r5
 8000b24:	465d      	mov	r5, fp
 8000b26:	192d      	adds	r5, r5, r4
 8000b28:	42a5      	cmp	r5, r4
 8000b2a:	41a4      	sbcs	r4, r4
 8000b2c:	4693      	mov	fp, r2
 8000b2e:	4264      	negs	r4, r4
 8000b30:	46a4      	mov	ip, r4
 8000b32:	44c3      	add	fp, r8
 8000b34:	44dc      	add	ip, fp
 8000b36:	428f      	cmp	r7, r1
 8000b38:	41bf      	sbcs	r7, r7
 8000b3a:	4598      	cmp	r8, r3
 8000b3c:	419b      	sbcs	r3, r3
 8000b3e:	4593      	cmp	fp, r2
 8000b40:	4192      	sbcs	r2, r2
 8000b42:	45a4      	cmp	ip, r4
 8000b44:	41a4      	sbcs	r4, r4
 8000b46:	425b      	negs	r3, r3
 8000b48:	427f      	negs	r7, r7
 8000b4a:	431f      	orrs	r7, r3
 8000b4c:	0c36      	lsrs	r6, r6, #16
 8000b4e:	4252      	negs	r2, r2
 8000b50:	4264      	negs	r4, r4
 8000b52:	19bf      	adds	r7, r7, r6
 8000b54:	4322      	orrs	r2, r4
 8000b56:	18bf      	adds	r7, r7, r2
 8000b58:	4662      	mov	r2, ip
 8000b5a:	1838      	adds	r0, r7, r0
 8000b5c:	0243      	lsls	r3, r0, #9
 8000b5e:	0dd2      	lsrs	r2, r2, #23
 8000b60:	9903      	ldr	r1, [sp, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	026a      	lsls	r2, r5, #9
 8000b66:	430a      	orrs	r2, r1
 8000b68:	1e50      	subs	r0, r2, #1
 8000b6a:	4182      	sbcs	r2, r0
 8000b6c:	4661      	mov	r1, ip
 8000b6e:	0ded      	lsrs	r5, r5, #23
 8000b70:	432a      	orrs	r2, r5
 8000b72:	024e      	lsls	r6, r1, #9
 8000b74:	4332      	orrs	r2, r6
 8000b76:	01d9      	lsls	r1, r3, #7
 8000b78:	d400      	bmi.n	8000b7c <__aeabi_dmul+0x31c>
 8000b7a:	e0b3      	b.n	8000ce4 <__aeabi_dmul+0x484>
 8000b7c:	2601      	movs	r6, #1
 8000b7e:	0850      	lsrs	r0, r2, #1
 8000b80:	4032      	ands	r2, r6
 8000b82:	4302      	orrs	r2, r0
 8000b84:	07de      	lsls	r6, r3, #31
 8000b86:	4332      	orrs	r2, r6
 8000b88:	085b      	lsrs	r3, r3, #1
 8000b8a:	4c22      	ldr	r4, [pc, #136]	; (8000c14 <__aeabi_dmul+0x3b4>)
 8000b8c:	4454      	add	r4, sl
 8000b8e:	2c00      	cmp	r4, #0
 8000b90:	dd62      	ble.n	8000c58 <__aeabi_dmul+0x3f8>
 8000b92:	0751      	lsls	r1, r2, #29
 8000b94:	d009      	beq.n	8000baa <__aeabi_dmul+0x34a>
 8000b96:	200f      	movs	r0, #15
 8000b98:	4010      	ands	r0, r2
 8000b9a:	2804      	cmp	r0, #4
 8000b9c:	d005      	beq.n	8000baa <__aeabi_dmul+0x34a>
 8000b9e:	1d10      	adds	r0, r2, #4
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	4192      	sbcs	r2, r2
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	189b      	adds	r3, r3, r2
 8000ba8:	0002      	movs	r2, r0
 8000baa:	01d9      	lsls	r1, r3, #7
 8000bac:	d504      	bpl.n	8000bb8 <__aeabi_dmul+0x358>
 8000bae:	2480      	movs	r4, #128	; 0x80
 8000bb0:	4819      	ldr	r0, [pc, #100]	; (8000c18 <__aeabi_dmul+0x3b8>)
 8000bb2:	00e4      	lsls	r4, r4, #3
 8000bb4:	4003      	ands	r3, r0
 8000bb6:	4454      	add	r4, sl
 8000bb8:	4818      	ldr	r0, [pc, #96]	; (8000c1c <__aeabi_dmul+0x3bc>)
 8000bba:	4284      	cmp	r4, r0
 8000bbc:	dd00      	ble.n	8000bc0 <__aeabi_dmul+0x360>
 8000bbe:	e727      	b.n	8000a10 <__aeabi_dmul+0x1b0>
 8000bc0:	075e      	lsls	r6, r3, #29
 8000bc2:	025b      	lsls	r3, r3, #9
 8000bc4:	08d2      	lsrs	r2, r2, #3
 8000bc6:	0b1f      	lsrs	r7, r3, #12
 8000bc8:	0563      	lsls	r3, r4, #21
 8000bca:	4316      	orrs	r6, r2
 8000bcc:	0d5b      	lsrs	r3, r3, #21
 8000bce:	e6b2      	b.n	8000936 <__aeabi_dmul+0xd6>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4699      	mov	r9, r3
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	2704      	movs	r7, #4
 8000bd8:	2600      	movs	r6, #0
 8000bda:	469b      	mov	fp, r3
 8000bdc:	e664      	b.n	80008a8 <__aeabi_dmul+0x48>
 8000bde:	2303      	movs	r3, #3
 8000be0:	9701      	str	r7, [sp, #4]
 8000be2:	4681      	mov	r9, r0
 8000be4:	270c      	movs	r7, #12
 8000be6:	469b      	mov	fp, r3
 8000be8:	e65e      	b.n	80008a8 <__aeabi_dmul+0x48>
 8000bea:	2201      	movs	r2, #1
 8000bec:	2001      	movs	r0, #1
 8000bee:	4317      	orrs	r7, r2
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	e676      	b.n	80008e2 <__aeabi_dmul+0x82>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	e671      	b.n	80008e2 <__aeabi_dmul+0x82>
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	000007ff 	.word	0x000007ff
 8000c04:	fffffc01 	.word	0xfffffc01
 8000c08:	08004290 	.word	0x08004290
 8000c0c:	800fffff 	.word	0x800fffff
 8000c10:	fffffc0d 	.word	0xfffffc0d
 8000c14:	000003ff 	.word	0x000003ff
 8000c18:	feffffff 	.word	0xfeffffff
 8000c1c:	000007fe 	.word	0x000007fe
 8000c20:	2300      	movs	r3, #0
 8000c22:	2780      	movs	r7, #128	; 0x80
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	033f      	lsls	r7, r7, #12
 8000c28:	2600      	movs	r6, #0
 8000c2a:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <__aeabi_dmul+0x4d8>)
 8000c2c:	e683      	b.n	8000936 <__aeabi_dmul+0xd6>
 8000c2e:	9b01      	ldr	r3, [sp, #4]
 8000c30:	0032      	movs	r2, r6
 8000c32:	46a4      	mov	ip, r4
 8000c34:	4658      	mov	r0, fp
 8000c36:	e670      	b.n	800091a <__aeabi_dmul+0xba>
 8000c38:	46ac      	mov	ip, r5
 8000c3a:	e66e      	b.n	800091a <__aeabi_dmul+0xba>
 8000c3c:	2780      	movs	r7, #128	; 0x80
 8000c3e:	9901      	ldr	r1, [sp, #4]
 8000c40:	033f      	lsls	r7, r7, #12
 8000c42:	4239      	tst	r1, r7
 8000c44:	d02d      	beq.n	8000ca2 <__aeabi_dmul+0x442>
 8000c46:	423b      	tst	r3, r7
 8000c48:	d12b      	bne.n	8000ca2 <__aeabi_dmul+0x442>
 8000c4a:	431f      	orrs	r7, r3
 8000c4c:	033f      	lsls	r7, r7, #12
 8000c4e:	0b3f      	lsrs	r7, r7, #12
 8000c50:	9500      	str	r5, [sp, #0]
 8000c52:	0016      	movs	r6, r2
 8000c54:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <__aeabi_dmul+0x4d8>)
 8000c56:	e66e      	b.n	8000936 <__aeabi_dmul+0xd6>
 8000c58:	2501      	movs	r5, #1
 8000c5a:	1b2d      	subs	r5, r5, r4
 8000c5c:	2d38      	cmp	r5, #56	; 0x38
 8000c5e:	dd00      	ble.n	8000c62 <__aeabi_dmul+0x402>
 8000c60:	e666      	b.n	8000930 <__aeabi_dmul+0xd0>
 8000c62:	2d1f      	cmp	r5, #31
 8000c64:	dc40      	bgt.n	8000ce8 <__aeabi_dmul+0x488>
 8000c66:	4835      	ldr	r0, [pc, #212]	; (8000d3c <__aeabi_dmul+0x4dc>)
 8000c68:	001c      	movs	r4, r3
 8000c6a:	4450      	add	r0, sl
 8000c6c:	0016      	movs	r6, r2
 8000c6e:	4082      	lsls	r2, r0
 8000c70:	4084      	lsls	r4, r0
 8000c72:	40ee      	lsrs	r6, r5
 8000c74:	1e50      	subs	r0, r2, #1
 8000c76:	4182      	sbcs	r2, r0
 8000c78:	4334      	orrs	r4, r6
 8000c7a:	4314      	orrs	r4, r2
 8000c7c:	40eb      	lsrs	r3, r5
 8000c7e:	0762      	lsls	r2, r4, #29
 8000c80:	d009      	beq.n	8000c96 <__aeabi_dmul+0x436>
 8000c82:	220f      	movs	r2, #15
 8000c84:	4022      	ands	r2, r4
 8000c86:	2a04      	cmp	r2, #4
 8000c88:	d005      	beq.n	8000c96 <__aeabi_dmul+0x436>
 8000c8a:	0022      	movs	r2, r4
 8000c8c:	1d14      	adds	r4, r2, #4
 8000c8e:	4294      	cmp	r4, r2
 8000c90:	4180      	sbcs	r0, r0
 8000c92:	4240      	negs	r0, r0
 8000c94:	181b      	adds	r3, r3, r0
 8000c96:	021a      	lsls	r2, r3, #8
 8000c98:	d53e      	bpl.n	8000d18 <__aeabi_dmul+0x4b8>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	e649      	b.n	8000936 <__aeabi_dmul+0xd6>
 8000ca2:	2780      	movs	r7, #128	; 0x80
 8000ca4:	9b01      	ldr	r3, [sp, #4]
 8000ca6:	033f      	lsls	r7, r7, #12
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	033f      	lsls	r7, r7, #12
 8000cac:	0b3f      	lsrs	r7, r7, #12
 8000cae:	9400      	str	r4, [sp, #0]
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <__aeabi_dmul+0x4d8>)
 8000cb2:	e640      	b.n	8000936 <__aeabi_dmul+0xd6>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	465a      	mov	r2, fp
 8000cb8:	3b28      	subs	r3, #40	; 0x28
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	9201      	str	r2, [sp, #4]
 8000cc0:	e66d      	b.n	800099e <__aeabi_dmul+0x13e>
 8000cc2:	4658      	mov	r0, fp
 8000cc4:	f000 fc34 	bl	8001530 <__clzsi2>
 8000cc8:	3020      	adds	r0, #32
 8000cca:	e657      	b.n	800097c <__aeabi_dmul+0x11c>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	4652      	mov	r2, sl
 8000cd0:	3b28      	subs	r3, #40	; 0x28
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	e693      	b.n	8000a02 <__aeabi_dmul+0x1a2>
 8000cda:	4650      	mov	r0, sl
 8000cdc:	f000 fc28 	bl	8001530 <__clzsi2>
 8000ce0:	3020      	adds	r0, #32
 8000ce2:	e67b      	b.n	80009dc <__aeabi_dmul+0x17c>
 8000ce4:	46ca      	mov	sl, r9
 8000ce6:	e750      	b.n	8000b8a <__aeabi_dmul+0x32a>
 8000ce8:	201f      	movs	r0, #31
 8000cea:	001e      	movs	r6, r3
 8000cec:	4240      	negs	r0, r0
 8000cee:	1b04      	subs	r4, r0, r4
 8000cf0:	40e6      	lsrs	r6, r4
 8000cf2:	2d20      	cmp	r5, #32
 8000cf4:	d003      	beq.n	8000cfe <__aeabi_dmul+0x49e>
 8000cf6:	4c12      	ldr	r4, [pc, #72]	; (8000d40 <__aeabi_dmul+0x4e0>)
 8000cf8:	4454      	add	r4, sl
 8000cfa:	40a3      	lsls	r3, r4
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	1e50      	subs	r0, r2, #1
 8000d00:	4182      	sbcs	r2, r0
 8000d02:	4332      	orrs	r2, r6
 8000d04:	2607      	movs	r6, #7
 8000d06:	2700      	movs	r7, #0
 8000d08:	4016      	ands	r6, r2
 8000d0a:	d009      	beq.n	8000d20 <__aeabi_dmul+0x4c0>
 8000d0c:	200f      	movs	r0, #15
 8000d0e:	2300      	movs	r3, #0
 8000d10:	4010      	ands	r0, r2
 8000d12:	0014      	movs	r4, r2
 8000d14:	2804      	cmp	r0, #4
 8000d16:	d1b9      	bne.n	8000c8c <__aeabi_dmul+0x42c>
 8000d18:	0022      	movs	r2, r4
 8000d1a:	075e      	lsls	r6, r3, #29
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	0b1f      	lsrs	r7, r3, #12
 8000d20:	08d2      	lsrs	r2, r2, #3
 8000d22:	4316      	orrs	r6, r2
 8000d24:	2300      	movs	r3, #0
 8000d26:	e606      	b.n	8000936 <__aeabi_dmul+0xd6>
 8000d28:	2780      	movs	r7, #128	; 0x80
 8000d2a:	033f      	lsls	r7, r7, #12
 8000d2c:	431f      	orrs	r7, r3
 8000d2e:	033f      	lsls	r7, r7, #12
 8000d30:	0b3f      	lsrs	r7, r7, #12
 8000d32:	0016      	movs	r6, r2
 8000d34:	4b00      	ldr	r3, [pc, #0]	; (8000d38 <__aeabi_dmul+0x4d8>)
 8000d36:	e5fe      	b.n	8000936 <__aeabi_dmul+0xd6>
 8000d38:	000007ff 	.word	0x000007ff
 8000d3c:	0000041e 	.word	0x0000041e
 8000d40:	0000043e 	.word	0x0000043e

08000d44 <__aeabi_dsub>:
 8000d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d46:	4657      	mov	r7, sl
 8000d48:	464e      	mov	r6, r9
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	46de      	mov	lr, fp
 8000d4e:	000c      	movs	r4, r1
 8000d50:	0309      	lsls	r1, r1, #12
 8000d52:	b5e0      	push	{r5, r6, r7, lr}
 8000d54:	0a49      	lsrs	r1, r1, #9
 8000d56:	0f46      	lsrs	r6, r0, #29
 8000d58:	005f      	lsls	r7, r3, #1
 8000d5a:	4331      	orrs	r1, r6
 8000d5c:	031e      	lsls	r6, r3, #12
 8000d5e:	0fdb      	lsrs	r3, r3, #31
 8000d60:	0a76      	lsrs	r6, r6, #9
 8000d62:	469b      	mov	fp, r3
 8000d64:	0f53      	lsrs	r3, r2, #29
 8000d66:	4333      	orrs	r3, r6
 8000d68:	4ec8      	ldr	r6, [pc, #800]	; (800108c <__aeabi_dsub+0x348>)
 8000d6a:	0065      	lsls	r5, r4, #1
 8000d6c:	00c0      	lsls	r0, r0, #3
 8000d6e:	0fe4      	lsrs	r4, r4, #31
 8000d70:	00d2      	lsls	r2, r2, #3
 8000d72:	0d6d      	lsrs	r5, r5, #21
 8000d74:	46a2      	mov	sl, r4
 8000d76:	4681      	mov	r9, r0
 8000d78:	0d7f      	lsrs	r7, r7, #21
 8000d7a:	469c      	mov	ip, r3
 8000d7c:	4690      	mov	r8, r2
 8000d7e:	42b7      	cmp	r7, r6
 8000d80:	d100      	bne.n	8000d84 <__aeabi_dsub+0x40>
 8000d82:	e0b9      	b.n	8000ef8 <__aeabi_dsub+0x1b4>
 8000d84:	465b      	mov	r3, fp
 8000d86:	2601      	movs	r6, #1
 8000d88:	4073      	eors	r3, r6
 8000d8a:	469b      	mov	fp, r3
 8000d8c:	1bee      	subs	r6, r5, r7
 8000d8e:	45a3      	cmp	fp, r4
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dsub+0x50>
 8000d92:	e083      	b.n	8000e9c <__aeabi_dsub+0x158>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	dd63      	ble.n	8000e60 <__aeabi_dsub+0x11c>
 8000d98:	2f00      	cmp	r7, #0
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_dsub+0x5a>
 8000d9c:	e0b1      	b.n	8000f02 <__aeabi_dsub+0x1be>
 8000d9e:	4663      	mov	r3, ip
 8000da0:	4313      	orrs	r3, r2
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dsub+0x62>
 8000da4:	e123      	b.n	8000fee <__aeabi_dsub+0x2aa>
 8000da6:	1e73      	subs	r3, r6, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d000      	beq.n	8000dae <__aeabi_dsub+0x6a>
 8000dac:	e1ba      	b.n	8001124 <__aeabi_dsub+0x3e0>
 8000dae:	1a86      	subs	r6, r0, r2
 8000db0:	4663      	mov	r3, ip
 8000db2:	42b0      	cmp	r0, r6
 8000db4:	4180      	sbcs	r0, r0
 8000db6:	2501      	movs	r5, #1
 8000db8:	1ac9      	subs	r1, r1, r3
 8000dba:	4240      	negs	r0, r0
 8000dbc:	1a09      	subs	r1, r1, r0
 8000dbe:	020b      	lsls	r3, r1, #8
 8000dc0:	d400      	bmi.n	8000dc4 <__aeabi_dsub+0x80>
 8000dc2:	e147      	b.n	8001054 <__aeabi_dsub+0x310>
 8000dc4:	0249      	lsls	r1, r1, #9
 8000dc6:	0a4b      	lsrs	r3, r1, #9
 8000dc8:	4698      	mov	r8, r3
 8000dca:	4643      	mov	r3, r8
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dsub+0x8e>
 8000dd0:	e189      	b.n	80010e6 <__aeabi_dsub+0x3a2>
 8000dd2:	4640      	mov	r0, r8
 8000dd4:	f000 fbac 	bl	8001530 <__clzsi2>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	3b08      	subs	r3, #8
 8000ddc:	2b1f      	cmp	r3, #31
 8000dde:	dd00      	ble.n	8000de2 <__aeabi_dsub+0x9e>
 8000de0:	e17c      	b.n	80010dc <__aeabi_dsub+0x398>
 8000de2:	2220      	movs	r2, #32
 8000de4:	0030      	movs	r0, r6
 8000de6:	1ad2      	subs	r2, r2, r3
 8000de8:	4641      	mov	r1, r8
 8000dea:	40d0      	lsrs	r0, r2
 8000dec:	4099      	lsls	r1, r3
 8000dee:	0002      	movs	r2, r0
 8000df0:	409e      	lsls	r6, r3
 8000df2:	430a      	orrs	r2, r1
 8000df4:	429d      	cmp	r5, r3
 8000df6:	dd00      	ble.n	8000dfa <__aeabi_dsub+0xb6>
 8000df8:	e16a      	b.n	80010d0 <__aeabi_dsub+0x38c>
 8000dfa:	1b5d      	subs	r5, r3, r5
 8000dfc:	1c6b      	adds	r3, r5, #1
 8000dfe:	2b1f      	cmp	r3, #31
 8000e00:	dd00      	ble.n	8000e04 <__aeabi_dsub+0xc0>
 8000e02:	e194      	b.n	800112e <__aeabi_dsub+0x3ea>
 8000e04:	2120      	movs	r1, #32
 8000e06:	0010      	movs	r0, r2
 8000e08:	0035      	movs	r5, r6
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	408e      	lsls	r6, r1
 8000e0e:	40da      	lsrs	r2, r3
 8000e10:	4088      	lsls	r0, r1
 8000e12:	40dd      	lsrs	r5, r3
 8000e14:	1e71      	subs	r1, r6, #1
 8000e16:	418e      	sbcs	r6, r1
 8000e18:	0011      	movs	r1, r2
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	4328      	orrs	r0, r5
 8000e1e:	2500      	movs	r5, #0
 8000e20:	4306      	orrs	r6, r0
 8000e22:	4032      	ands	r2, r6
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	d009      	beq.n	8000e3c <__aeabi_dsub+0xf8>
 8000e28:	230f      	movs	r3, #15
 8000e2a:	4033      	ands	r3, r6
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d005      	beq.n	8000e3c <__aeabi_dsub+0xf8>
 8000e30:	1d33      	adds	r3, r6, #4
 8000e32:	42b3      	cmp	r3, r6
 8000e34:	41b6      	sbcs	r6, r6
 8000e36:	4276      	negs	r6, r6
 8000e38:	1989      	adds	r1, r1, r6
 8000e3a:	001e      	movs	r6, r3
 8000e3c:	020b      	lsls	r3, r1, #8
 8000e3e:	d400      	bmi.n	8000e42 <__aeabi_dsub+0xfe>
 8000e40:	e23d      	b.n	80012be <__aeabi_dsub+0x57a>
 8000e42:	1c6a      	adds	r2, r5, #1
 8000e44:	4b91      	ldr	r3, [pc, #580]	; (800108c <__aeabi_dsub+0x348>)
 8000e46:	0555      	lsls	r5, r2, #21
 8000e48:	0d6d      	lsrs	r5, r5, #21
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dsub+0x10c>
 8000e4e:	e119      	b.n	8001084 <__aeabi_dsub+0x340>
 8000e50:	4a8f      	ldr	r2, [pc, #572]	; (8001090 <__aeabi_dsub+0x34c>)
 8000e52:	08f6      	lsrs	r6, r6, #3
 8000e54:	400a      	ands	r2, r1
 8000e56:	0757      	lsls	r7, r2, #29
 8000e58:	0252      	lsls	r2, r2, #9
 8000e5a:	4337      	orrs	r7, r6
 8000e5c:	0b12      	lsrs	r2, r2, #12
 8000e5e:	e09b      	b.n	8000f98 <__aeabi_dsub+0x254>
 8000e60:	2e00      	cmp	r6, #0
 8000e62:	d000      	beq.n	8000e66 <__aeabi_dsub+0x122>
 8000e64:	e0c5      	b.n	8000ff2 <__aeabi_dsub+0x2ae>
 8000e66:	1c6e      	adds	r6, r5, #1
 8000e68:	0576      	lsls	r6, r6, #21
 8000e6a:	0d76      	lsrs	r6, r6, #21
 8000e6c:	2e01      	cmp	r6, #1
 8000e6e:	dc00      	bgt.n	8000e72 <__aeabi_dsub+0x12e>
 8000e70:	e148      	b.n	8001104 <__aeabi_dsub+0x3c0>
 8000e72:	4667      	mov	r7, ip
 8000e74:	1a86      	subs	r6, r0, r2
 8000e76:	1bcb      	subs	r3, r1, r7
 8000e78:	42b0      	cmp	r0, r6
 8000e7a:	41bf      	sbcs	r7, r7
 8000e7c:	427f      	negs	r7, r7
 8000e7e:	46b8      	mov	r8, r7
 8000e80:	001f      	movs	r7, r3
 8000e82:	4643      	mov	r3, r8
 8000e84:	1aff      	subs	r7, r7, r3
 8000e86:	003b      	movs	r3, r7
 8000e88:	46b8      	mov	r8, r7
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	d500      	bpl.n	8000e90 <__aeabi_dsub+0x14c>
 8000e8e:	e15f      	b.n	8001150 <__aeabi_dsub+0x40c>
 8000e90:	4337      	orrs	r7, r6
 8000e92:	d19a      	bne.n	8000dca <__aeabi_dsub+0x86>
 8000e94:	2200      	movs	r2, #0
 8000e96:	2400      	movs	r4, #0
 8000e98:	2500      	movs	r5, #0
 8000e9a:	e079      	b.n	8000f90 <__aeabi_dsub+0x24c>
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	dc00      	bgt.n	8000ea2 <__aeabi_dsub+0x15e>
 8000ea0:	e0fa      	b.n	8001098 <__aeabi_dsub+0x354>
 8000ea2:	2f00      	cmp	r7, #0
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dsub+0x164>
 8000ea6:	e08d      	b.n	8000fc4 <__aeabi_dsub+0x280>
 8000ea8:	4b78      	ldr	r3, [pc, #480]	; (800108c <__aeabi_dsub+0x348>)
 8000eaa:	429d      	cmp	r5, r3
 8000eac:	d067      	beq.n	8000f7e <__aeabi_dsub+0x23a>
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	4667      	mov	r7, ip
 8000eb2:	041b      	lsls	r3, r3, #16
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	46bc      	mov	ip, r7
 8000eb8:	2e38      	cmp	r6, #56	; 0x38
 8000eba:	dc00      	bgt.n	8000ebe <__aeabi_dsub+0x17a>
 8000ebc:	e152      	b.n	8001164 <__aeabi_dsub+0x420>
 8000ebe:	4663      	mov	r3, ip
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	4193      	sbcs	r3, r2
 8000ec6:	181e      	adds	r6, r3, r0
 8000ec8:	4286      	cmp	r6, r0
 8000eca:	4180      	sbcs	r0, r0
 8000ecc:	4240      	negs	r0, r0
 8000ece:	1809      	adds	r1, r1, r0
 8000ed0:	020b      	lsls	r3, r1, #8
 8000ed2:	d400      	bmi.n	8000ed6 <__aeabi_dsub+0x192>
 8000ed4:	e0be      	b.n	8001054 <__aeabi_dsub+0x310>
 8000ed6:	4b6d      	ldr	r3, [pc, #436]	; (800108c <__aeabi_dsub+0x348>)
 8000ed8:	3501      	adds	r5, #1
 8000eda:	429d      	cmp	r5, r3
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_dsub+0x19c>
 8000ede:	e0d2      	b.n	8001086 <__aeabi_dsub+0x342>
 8000ee0:	4a6b      	ldr	r2, [pc, #428]	; (8001090 <__aeabi_dsub+0x34c>)
 8000ee2:	0873      	lsrs	r3, r6, #1
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	400e      	ands	r6, r1
 8000eea:	431e      	orrs	r6, r3
 8000eec:	0851      	lsrs	r1, r2, #1
 8000eee:	07d3      	lsls	r3, r2, #31
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	431e      	orrs	r6, r3
 8000ef4:	4032      	ands	r2, r6
 8000ef6:	e795      	b.n	8000e24 <__aeabi_dsub+0xe0>
 8000ef8:	001e      	movs	r6, r3
 8000efa:	4316      	orrs	r6, r2
 8000efc:	d000      	beq.n	8000f00 <__aeabi_dsub+0x1bc>
 8000efe:	e745      	b.n	8000d8c <__aeabi_dsub+0x48>
 8000f00:	e740      	b.n	8000d84 <__aeabi_dsub+0x40>
 8000f02:	4b62      	ldr	r3, [pc, #392]	; (800108c <__aeabi_dsub+0x348>)
 8000f04:	429d      	cmp	r5, r3
 8000f06:	d03a      	beq.n	8000f7e <__aeabi_dsub+0x23a>
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	4667      	mov	r7, ip
 8000f0c:	041b      	lsls	r3, r3, #16
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	46bc      	mov	ip, r7
 8000f12:	2e38      	cmp	r6, #56	; 0x38
 8000f14:	dd00      	ble.n	8000f18 <__aeabi_dsub+0x1d4>
 8000f16:	e0eb      	b.n	80010f0 <__aeabi_dsub+0x3ac>
 8000f18:	2e1f      	cmp	r6, #31
 8000f1a:	dc00      	bgt.n	8000f1e <__aeabi_dsub+0x1da>
 8000f1c:	e13a      	b.n	8001194 <__aeabi_dsub+0x450>
 8000f1e:	0033      	movs	r3, r6
 8000f20:	4667      	mov	r7, ip
 8000f22:	3b20      	subs	r3, #32
 8000f24:	40df      	lsrs	r7, r3
 8000f26:	003b      	movs	r3, r7
 8000f28:	2e20      	cmp	r6, #32
 8000f2a:	d005      	beq.n	8000f38 <__aeabi_dsub+0x1f4>
 8000f2c:	2740      	movs	r7, #64	; 0x40
 8000f2e:	1bbf      	subs	r7, r7, r6
 8000f30:	4666      	mov	r6, ip
 8000f32:	40be      	lsls	r6, r7
 8000f34:	4332      	orrs	r2, r6
 8000f36:	4690      	mov	r8, r2
 8000f38:	4646      	mov	r6, r8
 8000f3a:	1e72      	subs	r2, r6, #1
 8000f3c:	4196      	sbcs	r6, r2
 8000f3e:	4333      	orrs	r3, r6
 8000f40:	e0da      	b.n	80010f8 <__aeabi_dsub+0x3b4>
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dsub+0x204>
 8000f46:	e214      	b.n	8001372 <__aeabi_dsub+0x62e>
 8000f48:	4663      	mov	r3, ip
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dsub+0x20c>
 8000f4e:	e168      	b.n	8001222 <__aeabi_dsub+0x4de>
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	074e      	lsls	r6, r1, #29
 8000f54:	08c0      	lsrs	r0, r0, #3
 8000f56:	08c9      	lsrs	r1, r1, #3
 8000f58:	031b      	lsls	r3, r3, #12
 8000f5a:	4306      	orrs	r6, r0
 8000f5c:	4219      	tst	r1, r3
 8000f5e:	d008      	beq.n	8000f72 <__aeabi_dsub+0x22e>
 8000f60:	4660      	mov	r0, ip
 8000f62:	08c0      	lsrs	r0, r0, #3
 8000f64:	4218      	tst	r0, r3
 8000f66:	d104      	bne.n	8000f72 <__aeabi_dsub+0x22e>
 8000f68:	4663      	mov	r3, ip
 8000f6a:	0001      	movs	r1, r0
 8000f6c:	08d2      	lsrs	r2, r2, #3
 8000f6e:	075e      	lsls	r6, r3, #29
 8000f70:	4316      	orrs	r6, r2
 8000f72:	00f3      	lsls	r3, r6, #3
 8000f74:	4699      	mov	r9, r3
 8000f76:	00c9      	lsls	r1, r1, #3
 8000f78:	0f72      	lsrs	r2, r6, #29
 8000f7a:	4d44      	ldr	r5, [pc, #272]	; (800108c <__aeabi_dsub+0x348>)
 8000f7c:	4311      	orrs	r1, r2
 8000f7e:	464b      	mov	r3, r9
 8000f80:	08de      	lsrs	r6, r3, #3
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <__aeabi_dsub+0x348>)
 8000f84:	074f      	lsls	r7, r1, #29
 8000f86:	4337      	orrs	r7, r6
 8000f88:	08ca      	lsrs	r2, r1, #3
 8000f8a:	429d      	cmp	r5, r3
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dsub+0x24c>
 8000f8e:	e06e      	b.n	800106e <__aeabi_dsub+0x32a>
 8000f90:	0312      	lsls	r2, r2, #12
 8000f92:	056d      	lsls	r5, r5, #21
 8000f94:	0b12      	lsrs	r2, r2, #12
 8000f96:	0d6d      	lsrs	r5, r5, #21
 8000f98:	2100      	movs	r1, #0
 8000f9a:	0312      	lsls	r2, r2, #12
 8000f9c:	0b13      	lsrs	r3, r2, #12
 8000f9e:	0d0a      	lsrs	r2, r1, #20
 8000fa0:	0512      	lsls	r2, r2, #20
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <__aeabi_dsub+0x350>)
 8000fa6:	052d      	lsls	r5, r5, #20
 8000fa8:	4013      	ands	r3, r2
 8000faa:	432b      	orrs	r3, r5
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	07e4      	lsls	r4, r4, #31
 8000fb0:	085b      	lsrs	r3, r3, #1
 8000fb2:	4323      	orrs	r3, r4
 8000fb4:	0038      	movs	r0, r7
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	bc3c      	pop	{r2, r3, r4, r5}
 8000fba:	4690      	mov	r8, r2
 8000fbc:	4699      	mov	r9, r3
 8000fbe:	46a2      	mov	sl, r4
 8000fc0:	46ab      	mov	fp, r5
 8000fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fc4:	4663      	mov	r3, ip
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	d011      	beq.n	8000fee <__aeabi_dsub+0x2aa>
 8000fca:	1e73      	subs	r3, r6, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d000      	beq.n	8000fd2 <__aeabi_dsub+0x28e>
 8000fd0:	e107      	b.n	80011e2 <__aeabi_dsub+0x49e>
 8000fd2:	1886      	adds	r6, r0, r2
 8000fd4:	4286      	cmp	r6, r0
 8000fd6:	4180      	sbcs	r0, r0
 8000fd8:	4461      	add	r1, ip
 8000fda:	4240      	negs	r0, r0
 8000fdc:	1809      	adds	r1, r1, r0
 8000fde:	2501      	movs	r5, #1
 8000fe0:	020b      	lsls	r3, r1, #8
 8000fe2:	d537      	bpl.n	8001054 <__aeabi_dsub+0x310>
 8000fe4:	2502      	movs	r5, #2
 8000fe6:	e77b      	b.n	8000ee0 <__aeabi_dsub+0x19c>
 8000fe8:	003e      	movs	r6, r7
 8000fea:	4661      	mov	r1, ip
 8000fec:	4691      	mov	r9, r2
 8000fee:	0035      	movs	r5, r6
 8000ff0:	e7c5      	b.n	8000f7e <__aeabi_dsub+0x23a>
 8000ff2:	465c      	mov	r4, fp
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_dsub+0x2b6>
 8000ff8:	e0e1      	b.n	80011be <__aeabi_dsub+0x47a>
 8000ffa:	000b      	movs	r3, r1
 8000ffc:	4303      	orrs	r3, r0
 8000ffe:	d0f3      	beq.n	8000fe8 <__aeabi_dsub+0x2a4>
 8001000:	1c73      	adds	r3, r6, #1
 8001002:	d100      	bne.n	8001006 <__aeabi_dsub+0x2c2>
 8001004:	e1ac      	b.n	8001360 <__aeabi_dsub+0x61c>
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <__aeabi_dsub+0x348>)
 8001008:	429f      	cmp	r7, r3
 800100a:	d100      	bne.n	800100e <__aeabi_dsub+0x2ca>
 800100c:	e13a      	b.n	8001284 <__aeabi_dsub+0x540>
 800100e:	43f3      	mvns	r3, r6
 8001010:	2b38      	cmp	r3, #56	; 0x38
 8001012:	dd00      	ble.n	8001016 <__aeabi_dsub+0x2d2>
 8001014:	e16f      	b.n	80012f6 <__aeabi_dsub+0x5b2>
 8001016:	2b1f      	cmp	r3, #31
 8001018:	dd00      	ble.n	800101c <__aeabi_dsub+0x2d8>
 800101a:	e18c      	b.n	8001336 <__aeabi_dsub+0x5f2>
 800101c:	2520      	movs	r5, #32
 800101e:	000e      	movs	r6, r1
 8001020:	1aed      	subs	r5, r5, r3
 8001022:	40ae      	lsls	r6, r5
 8001024:	46b0      	mov	r8, r6
 8001026:	0006      	movs	r6, r0
 8001028:	46aa      	mov	sl, r5
 800102a:	40de      	lsrs	r6, r3
 800102c:	4645      	mov	r5, r8
 800102e:	4335      	orrs	r5, r6
 8001030:	002e      	movs	r6, r5
 8001032:	4655      	mov	r5, sl
 8001034:	40d9      	lsrs	r1, r3
 8001036:	40a8      	lsls	r0, r5
 8001038:	4663      	mov	r3, ip
 800103a:	1e45      	subs	r5, r0, #1
 800103c:	41a8      	sbcs	r0, r5
 800103e:	1a5b      	subs	r3, r3, r1
 8001040:	469c      	mov	ip, r3
 8001042:	4330      	orrs	r0, r6
 8001044:	1a16      	subs	r6, r2, r0
 8001046:	42b2      	cmp	r2, r6
 8001048:	4192      	sbcs	r2, r2
 800104a:	4663      	mov	r3, ip
 800104c:	4252      	negs	r2, r2
 800104e:	1a99      	subs	r1, r3, r2
 8001050:	003d      	movs	r5, r7
 8001052:	e6b4      	b.n	8000dbe <__aeabi_dsub+0x7a>
 8001054:	2207      	movs	r2, #7
 8001056:	4032      	ands	r2, r6
 8001058:	2a00      	cmp	r2, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dsub+0x31a>
 800105c:	e6e4      	b.n	8000e28 <__aeabi_dsub+0xe4>
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_dsub+0x348>)
 8001060:	08f6      	lsrs	r6, r6, #3
 8001062:	074f      	lsls	r7, r1, #29
 8001064:	4337      	orrs	r7, r6
 8001066:	08ca      	lsrs	r2, r1, #3
 8001068:	429d      	cmp	r5, r3
 800106a:	d000      	beq.n	800106e <__aeabi_dsub+0x32a>
 800106c:	e790      	b.n	8000f90 <__aeabi_dsub+0x24c>
 800106e:	003b      	movs	r3, r7
 8001070:	4313      	orrs	r3, r2
 8001072:	d100      	bne.n	8001076 <__aeabi_dsub+0x332>
 8001074:	e1a6      	b.n	80013c4 <__aeabi_dsub+0x680>
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	031b      	lsls	r3, r3, #12
 800107a:	431a      	orrs	r2, r3
 800107c:	0312      	lsls	r2, r2, #12
 800107e:	0b12      	lsrs	r2, r2, #12
 8001080:	4d02      	ldr	r5, [pc, #8]	; (800108c <__aeabi_dsub+0x348>)
 8001082:	e789      	b.n	8000f98 <__aeabi_dsub+0x254>
 8001084:	0015      	movs	r5, r2
 8001086:	2200      	movs	r2, #0
 8001088:	2700      	movs	r7, #0
 800108a:	e785      	b.n	8000f98 <__aeabi_dsub+0x254>
 800108c:	000007ff 	.word	0x000007ff
 8001090:	ff7fffff 	.word	0xff7fffff
 8001094:	800fffff 	.word	0x800fffff
 8001098:	2e00      	cmp	r6, #0
 800109a:	d000      	beq.n	800109e <__aeabi_dsub+0x35a>
 800109c:	e0c7      	b.n	800122e <__aeabi_dsub+0x4ea>
 800109e:	1c6b      	adds	r3, r5, #1
 80010a0:	055e      	lsls	r6, r3, #21
 80010a2:	0d76      	lsrs	r6, r6, #21
 80010a4:	2e01      	cmp	r6, #1
 80010a6:	dc00      	bgt.n	80010aa <__aeabi_dsub+0x366>
 80010a8:	e0f0      	b.n	800128c <__aeabi_dsub+0x548>
 80010aa:	4dc8      	ldr	r5, [pc, #800]	; (80013cc <__aeabi_dsub+0x688>)
 80010ac:	42ab      	cmp	r3, r5
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dsub+0x36e>
 80010b0:	e0b9      	b.n	8001226 <__aeabi_dsub+0x4e2>
 80010b2:	1885      	adds	r5, r0, r2
 80010b4:	000a      	movs	r2, r1
 80010b6:	4285      	cmp	r5, r0
 80010b8:	4189      	sbcs	r1, r1
 80010ba:	4462      	add	r2, ip
 80010bc:	4249      	negs	r1, r1
 80010be:	1851      	adds	r1, r2, r1
 80010c0:	2207      	movs	r2, #7
 80010c2:	07ce      	lsls	r6, r1, #31
 80010c4:	086d      	lsrs	r5, r5, #1
 80010c6:	432e      	orrs	r6, r5
 80010c8:	0849      	lsrs	r1, r1, #1
 80010ca:	4032      	ands	r2, r6
 80010cc:	001d      	movs	r5, r3
 80010ce:	e6a9      	b.n	8000e24 <__aeabi_dsub+0xe0>
 80010d0:	49bf      	ldr	r1, [pc, #764]	; (80013d0 <__aeabi_dsub+0x68c>)
 80010d2:	1aed      	subs	r5, r5, r3
 80010d4:	4011      	ands	r1, r2
 80010d6:	2207      	movs	r2, #7
 80010d8:	4032      	ands	r2, r6
 80010da:	e6a3      	b.n	8000e24 <__aeabi_dsub+0xe0>
 80010dc:	0032      	movs	r2, r6
 80010de:	3828      	subs	r0, #40	; 0x28
 80010e0:	4082      	lsls	r2, r0
 80010e2:	2600      	movs	r6, #0
 80010e4:	e686      	b.n	8000df4 <__aeabi_dsub+0xb0>
 80010e6:	0030      	movs	r0, r6
 80010e8:	f000 fa22 	bl	8001530 <__clzsi2>
 80010ec:	3020      	adds	r0, #32
 80010ee:	e673      	b.n	8000dd8 <__aeabi_dsub+0x94>
 80010f0:	4663      	mov	r3, ip
 80010f2:	4313      	orrs	r3, r2
 80010f4:	1e5a      	subs	r2, r3, #1
 80010f6:	4193      	sbcs	r3, r2
 80010f8:	1ac6      	subs	r6, r0, r3
 80010fa:	42b0      	cmp	r0, r6
 80010fc:	4180      	sbcs	r0, r0
 80010fe:	4240      	negs	r0, r0
 8001100:	1a09      	subs	r1, r1, r0
 8001102:	e65c      	b.n	8000dbe <__aeabi_dsub+0x7a>
 8001104:	000e      	movs	r6, r1
 8001106:	4667      	mov	r7, ip
 8001108:	4306      	orrs	r6, r0
 800110a:	4317      	orrs	r7, r2
 800110c:	2d00      	cmp	r5, #0
 800110e:	d15e      	bne.n	80011ce <__aeabi_dsub+0x48a>
 8001110:	2e00      	cmp	r6, #0
 8001112:	d000      	beq.n	8001116 <__aeabi_dsub+0x3d2>
 8001114:	e0f3      	b.n	80012fe <__aeabi_dsub+0x5ba>
 8001116:	2f00      	cmp	r7, #0
 8001118:	d100      	bne.n	800111c <__aeabi_dsub+0x3d8>
 800111a:	e11e      	b.n	800135a <__aeabi_dsub+0x616>
 800111c:	465c      	mov	r4, fp
 800111e:	4661      	mov	r1, ip
 8001120:	4691      	mov	r9, r2
 8001122:	e72c      	b.n	8000f7e <__aeabi_dsub+0x23a>
 8001124:	4fa9      	ldr	r7, [pc, #676]	; (80013cc <__aeabi_dsub+0x688>)
 8001126:	42be      	cmp	r6, r7
 8001128:	d07b      	beq.n	8001222 <__aeabi_dsub+0x4de>
 800112a:	001e      	movs	r6, r3
 800112c:	e6f1      	b.n	8000f12 <__aeabi_dsub+0x1ce>
 800112e:	0010      	movs	r0, r2
 8001130:	3d1f      	subs	r5, #31
 8001132:	40e8      	lsrs	r0, r5
 8001134:	2b20      	cmp	r3, #32
 8001136:	d003      	beq.n	8001140 <__aeabi_dsub+0x3fc>
 8001138:	2140      	movs	r1, #64	; 0x40
 800113a:	1acb      	subs	r3, r1, r3
 800113c:	409a      	lsls	r2, r3
 800113e:	4316      	orrs	r6, r2
 8001140:	1e73      	subs	r3, r6, #1
 8001142:	419e      	sbcs	r6, r3
 8001144:	2207      	movs	r2, #7
 8001146:	4306      	orrs	r6, r0
 8001148:	4032      	ands	r2, r6
 800114a:	2100      	movs	r1, #0
 800114c:	2500      	movs	r5, #0
 800114e:	e783      	b.n	8001058 <__aeabi_dsub+0x314>
 8001150:	1a16      	subs	r6, r2, r0
 8001152:	4663      	mov	r3, ip
 8001154:	42b2      	cmp	r2, r6
 8001156:	4180      	sbcs	r0, r0
 8001158:	1a59      	subs	r1, r3, r1
 800115a:	4240      	negs	r0, r0
 800115c:	1a0b      	subs	r3, r1, r0
 800115e:	4698      	mov	r8, r3
 8001160:	465c      	mov	r4, fp
 8001162:	e632      	b.n	8000dca <__aeabi_dsub+0x86>
 8001164:	2e1f      	cmp	r6, #31
 8001166:	dd00      	ble.n	800116a <__aeabi_dsub+0x426>
 8001168:	e0ab      	b.n	80012c2 <__aeabi_dsub+0x57e>
 800116a:	2720      	movs	r7, #32
 800116c:	1bbb      	subs	r3, r7, r6
 800116e:	469a      	mov	sl, r3
 8001170:	4663      	mov	r3, ip
 8001172:	4657      	mov	r7, sl
 8001174:	40bb      	lsls	r3, r7
 8001176:	4699      	mov	r9, r3
 8001178:	0013      	movs	r3, r2
 800117a:	464f      	mov	r7, r9
 800117c:	40f3      	lsrs	r3, r6
 800117e:	431f      	orrs	r7, r3
 8001180:	003b      	movs	r3, r7
 8001182:	4657      	mov	r7, sl
 8001184:	40ba      	lsls	r2, r7
 8001186:	1e57      	subs	r7, r2, #1
 8001188:	41ba      	sbcs	r2, r7
 800118a:	4313      	orrs	r3, r2
 800118c:	4662      	mov	r2, ip
 800118e:	40f2      	lsrs	r2, r6
 8001190:	1889      	adds	r1, r1, r2
 8001192:	e698      	b.n	8000ec6 <__aeabi_dsub+0x182>
 8001194:	2720      	movs	r7, #32
 8001196:	1bbb      	subs	r3, r7, r6
 8001198:	469a      	mov	sl, r3
 800119a:	4663      	mov	r3, ip
 800119c:	4657      	mov	r7, sl
 800119e:	40bb      	lsls	r3, r7
 80011a0:	4699      	mov	r9, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	464f      	mov	r7, r9
 80011a6:	40f3      	lsrs	r3, r6
 80011a8:	431f      	orrs	r7, r3
 80011aa:	003b      	movs	r3, r7
 80011ac:	4657      	mov	r7, sl
 80011ae:	40ba      	lsls	r2, r7
 80011b0:	1e57      	subs	r7, r2, #1
 80011b2:	41ba      	sbcs	r2, r7
 80011b4:	4313      	orrs	r3, r2
 80011b6:	4662      	mov	r2, ip
 80011b8:	40f2      	lsrs	r2, r6
 80011ba:	1a89      	subs	r1, r1, r2
 80011bc:	e79c      	b.n	80010f8 <__aeabi_dsub+0x3b4>
 80011be:	4b83      	ldr	r3, [pc, #524]	; (80013cc <__aeabi_dsub+0x688>)
 80011c0:	429f      	cmp	r7, r3
 80011c2:	d05f      	beq.n	8001284 <__aeabi_dsub+0x540>
 80011c4:	2580      	movs	r5, #128	; 0x80
 80011c6:	042d      	lsls	r5, r5, #16
 80011c8:	4273      	negs	r3, r6
 80011ca:	4329      	orrs	r1, r5
 80011cc:	e720      	b.n	8001010 <__aeabi_dsub+0x2cc>
 80011ce:	2e00      	cmp	r6, #0
 80011d0:	d10c      	bne.n	80011ec <__aeabi_dsub+0x4a8>
 80011d2:	2f00      	cmp	r7, #0
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dsub+0x494>
 80011d6:	e0d0      	b.n	800137a <__aeabi_dsub+0x636>
 80011d8:	465c      	mov	r4, fp
 80011da:	4661      	mov	r1, ip
 80011dc:	4691      	mov	r9, r2
 80011de:	4d7b      	ldr	r5, [pc, #492]	; (80013cc <__aeabi_dsub+0x688>)
 80011e0:	e6cd      	b.n	8000f7e <__aeabi_dsub+0x23a>
 80011e2:	4f7a      	ldr	r7, [pc, #488]	; (80013cc <__aeabi_dsub+0x688>)
 80011e4:	42be      	cmp	r6, r7
 80011e6:	d01c      	beq.n	8001222 <__aeabi_dsub+0x4de>
 80011e8:	001e      	movs	r6, r3
 80011ea:	e665      	b.n	8000eb8 <__aeabi_dsub+0x174>
 80011ec:	2f00      	cmp	r7, #0
 80011ee:	d018      	beq.n	8001222 <__aeabi_dsub+0x4de>
 80011f0:	08c0      	lsrs	r0, r0, #3
 80011f2:	074e      	lsls	r6, r1, #29
 80011f4:	4306      	orrs	r6, r0
 80011f6:	2080      	movs	r0, #128	; 0x80
 80011f8:	08c9      	lsrs	r1, r1, #3
 80011fa:	0300      	lsls	r0, r0, #12
 80011fc:	4201      	tst	r1, r0
 80011fe:	d008      	beq.n	8001212 <__aeabi_dsub+0x4ce>
 8001200:	4663      	mov	r3, ip
 8001202:	08dc      	lsrs	r4, r3, #3
 8001204:	4204      	tst	r4, r0
 8001206:	d104      	bne.n	8001212 <__aeabi_dsub+0x4ce>
 8001208:	0021      	movs	r1, r4
 800120a:	46da      	mov	sl, fp
 800120c:	08d2      	lsrs	r2, r2, #3
 800120e:	075e      	lsls	r6, r3, #29
 8001210:	4316      	orrs	r6, r2
 8001212:	00f3      	lsls	r3, r6, #3
 8001214:	4699      	mov	r9, r3
 8001216:	2401      	movs	r4, #1
 8001218:	4653      	mov	r3, sl
 800121a:	00c9      	lsls	r1, r1, #3
 800121c:	0f72      	lsrs	r2, r6, #29
 800121e:	4311      	orrs	r1, r2
 8001220:	401c      	ands	r4, r3
 8001222:	4d6a      	ldr	r5, [pc, #424]	; (80013cc <__aeabi_dsub+0x688>)
 8001224:	e6ab      	b.n	8000f7e <__aeabi_dsub+0x23a>
 8001226:	001d      	movs	r5, r3
 8001228:	2200      	movs	r2, #0
 800122a:	2700      	movs	r7, #0
 800122c:	e6b4      	b.n	8000f98 <__aeabi_dsub+0x254>
 800122e:	2d00      	cmp	r5, #0
 8001230:	d159      	bne.n	80012e6 <__aeabi_dsub+0x5a2>
 8001232:	000b      	movs	r3, r1
 8001234:	4303      	orrs	r3, r0
 8001236:	d100      	bne.n	800123a <__aeabi_dsub+0x4f6>
 8001238:	e6d6      	b.n	8000fe8 <__aeabi_dsub+0x2a4>
 800123a:	1c73      	adds	r3, r6, #1
 800123c:	d100      	bne.n	8001240 <__aeabi_dsub+0x4fc>
 800123e:	e0b2      	b.n	80013a6 <__aeabi_dsub+0x662>
 8001240:	4b62      	ldr	r3, [pc, #392]	; (80013cc <__aeabi_dsub+0x688>)
 8001242:	429f      	cmp	r7, r3
 8001244:	d01e      	beq.n	8001284 <__aeabi_dsub+0x540>
 8001246:	43f3      	mvns	r3, r6
 8001248:	2b38      	cmp	r3, #56	; 0x38
 800124a:	dc6f      	bgt.n	800132c <__aeabi_dsub+0x5e8>
 800124c:	2b1f      	cmp	r3, #31
 800124e:	dd00      	ble.n	8001252 <__aeabi_dsub+0x50e>
 8001250:	e097      	b.n	8001382 <__aeabi_dsub+0x63e>
 8001252:	2520      	movs	r5, #32
 8001254:	000e      	movs	r6, r1
 8001256:	1aed      	subs	r5, r5, r3
 8001258:	40ae      	lsls	r6, r5
 800125a:	46b0      	mov	r8, r6
 800125c:	0006      	movs	r6, r0
 800125e:	46aa      	mov	sl, r5
 8001260:	40de      	lsrs	r6, r3
 8001262:	4645      	mov	r5, r8
 8001264:	4335      	orrs	r5, r6
 8001266:	002e      	movs	r6, r5
 8001268:	4655      	mov	r5, sl
 800126a:	40a8      	lsls	r0, r5
 800126c:	40d9      	lsrs	r1, r3
 800126e:	1e45      	subs	r5, r0, #1
 8001270:	41a8      	sbcs	r0, r5
 8001272:	448c      	add	ip, r1
 8001274:	4306      	orrs	r6, r0
 8001276:	18b6      	adds	r6, r6, r2
 8001278:	4296      	cmp	r6, r2
 800127a:	4192      	sbcs	r2, r2
 800127c:	4251      	negs	r1, r2
 800127e:	4461      	add	r1, ip
 8001280:	003d      	movs	r5, r7
 8001282:	e625      	b.n	8000ed0 <__aeabi_dsub+0x18c>
 8001284:	003d      	movs	r5, r7
 8001286:	4661      	mov	r1, ip
 8001288:	4691      	mov	r9, r2
 800128a:	e678      	b.n	8000f7e <__aeabi_dsub+0x23a>
 800128c:	000b      	movs	r3, r1
 800128e:	4303      	orrs	r3, r0
 8001290:	2d00      	cmp	r5, #0
 8001292:	d000      	beq.n	8001296 <__aeabi_dsub+0x552>
 8001294:	e655      	b.n	8000f42 <__aeabi_dsub+0x1fe>
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f5      	beq.n	8001286 <__aeabi_dsub+0x542>
 800129a:	4663      	mov	r3, ip
 800129c:	4313      	orrs	r3, r2
 800129e:	d100      	bne.n	80012a2 <__aeabi_dsub+0x55e>
 80012a0:	e66d      	b.n	8000f7e <__aeabi_dsub+0x23a>
 80012a2:	1886      	adds	r6, r0, r2
 80012a4:	4286      	cmp	r6, r0
 80012a6:	4180      	sbcs	r0, r0
 80012a8:	4461      	add	r1, ip
 80012aa:	4240      	negs	r0, r0
 80012ac:	1809      	adds	r1, r1, r0
 80012ae:	2200      	movs	r2, #0
 80012b0:	020b      	lsls	r3, r1, #8
 80012b2:	d400      	bmi.n	80012b6 <__aeabi_dsub+0x572>
 80012b4:	e6d0      	b.n	8001058 <__aeabi_dsub+0x314>
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <__aeabi_dsub+0x68c>)
 80012b8:	3501      	adds	r5, #1
 80012ba:	4019      	ands	r1, r3
 80012bc:	e5b2      	b.n	8000e24 <__aeabi_dsub+0xe0>
 80012be:	46b1      	mov	r9, r6
 80012c0:	e65d      	b.n	8000f7e <__aeabi_dsub+0x23a>
 80012c2:	0033      	movs	r3, r6
 80012c4:	4667      	mov	r7, ip
 80012c6:	3b20      	subs	r3, #32
 80012c8:	40df      	lsrs	r7, r3
 80012ca:	003b      	movs	r3, r7
 80012cc:	2e20      	cmp	r6, #32
 80012ce:	d005      	beq.n	80012dc <__aeabi_dsub+0x598>
 80012d0:	2740      	movs	r7, #64	; 0x40
 80012d2:	1bbf      	subs	r7, r7, r6
 80012d4:	4666      	mov	r6, ip
 80012d6:	40be      	lsls	r6, r7
 80012d8:	4332      	orrs	r2, r6
 80012da:	4690      	mov	r8, r2
 80012dc:	4646      	mov	r6, r8
 80012de:	1e72      	subs	r2, r6, #1
 80012e0:	4196      	sbcs	r6, r2
 80012e2:	4333      	orrs	r3, r6
 80012e4:	e5ef      	b.n	8000ec6 <__aeabi_dsub+0x182>
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <__aeabi_dsub+0x688>)
 80012e8:	429f      	cmp	r7, r3
 80012ea:	d0cb      	beq.n	8001284 <__aeabi_dsub+0x540>
 80012ec:	2580      	movs	r5, #128	; 0x80
 80012ee:	042d      	lsls	r5, r5, #16
 80012f0:	4273      	negs	r3, r6
 80012f2:	4329      	orrs	r1, r5
 80012f4:	e7a8      	b.n	8001248 <__aeabi_dsub+0x504>
 80012f6:	4308      	orrs	r0, r1
 80012f8:	1e41      	subs	r1, r0, #1
 80012fa:	4188      	sbcs	r0, r1
 80012fc:	e6a2      	b.n	8001044 <__aeabi_dsub+0x300>
 80012fe:	2f00      	cmp	r7, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_dsub+0x5c0>
 8001302:	e63c      	b.n	8000f7e <__aeabi_dsub+0x23a>
 8001304:	4663      	mov	r3, ip
 8001306:	1a86      	subs	r6, r0, r2
 8001308:	1acf      	subs	r7, r1, r3
 800130a:	42b0      	cmp	r0, r6
 800130c:	419b      	sbcs	r3, r3
 800130e:	425b      	negs	r3, r3
 8001310:	1afb      	subs	r3, r7, r3
 8001312:	4698      	mov	r8, r3
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	d54e      	bpl.n	80013b6 <__aeabi_dsub+0x672>
 8001318:	1a16      	subs	r6, r2, r0
 800131a:	4663      	mov	r3, ip
 800131c:	42b2      	cmp	r2, r6
 800131e:	4192      	sbcs	r2, r2
 8001320:	1a59      	subs	r1, r3, r1
 8001322:	4252      	negs	r2, r2
 8001324:	1a89      	subs	r1, r1, r2
 8001326:	465c      	mov	r4, fp
 8001328:	2200      	movs	r2, #0
 800132a:	e57b      	b.n	8000e24 <__aeabi_dsub+0xe0>
 800132c:	4301      	orrs	r1, r0
 800132e:	000e      	movs	r6, r1
 8001330:	1e71      	subs	r1, r6, #1
 8001332:	418e      	sbcs	r6, r1
 8001334:	e79f      	b.n	8001276 <__aeabi_dsub+0x532>
 8001336:	001d      	movs	r5, r3
 8001338:	000e      	movs	r6, r1
 800133a:	3d20      	subs	r5, #32
 800133c:	40ee      	lsrs	r6, r5
 800133e:	46b0      	mov	r8, r6
 8001340:	2b20      	cmp	r3, #32
 8001342:	d004      	beq.n	800134e <__aeabi_dsub+0x60a>
 8001344:	2540      	movs	r5, #64	; 0x40
 8001346:	1aeb      	subs	r3, r5, r3
 8001348:	4099      	lsls	r1, r3
 800134a:	4308      	orrs	r0, r1
 800134c:	4681      	mov	r9, r0
 800134e:	4648      	mov	r0, r9
 8001350:	4643      	mov	r3, r8
 8001352:	1e41      	subs	r1, r0, #1
 8001354:	4188      	sbcs	r0, r1
 8001356:	4318      	orrs	r0, r3
 8001358:	e674      	b.n	8001044 <__aeabi_dsub+0x300>
 800135a:	2200      	movs	r2, #0
 800135c:	2400      	movs	r4, #0
 800135e:	e617      	b.n	8000f90 <__aeabi_dsub+0x24c>
 8001360:	1a16      	subs	r6, r2, r0
 8001362:	4663      	mov	r3, ip
 8001364:	42b2      	cmp	r2, r6
 8001366:	4192      	sbcs	r2, r2
 8001368:	1a59      	subs	r1, r3, r1
 800136a:	4252      	negs	r2, r2
 800136c:	1a89      	subs	r1, r1, r2
 800136e:	003d      	movs	r5, r7
 8001370:	e525      	b.n	8000dbe <__aeabi_dsub+0x7a>
 8001372:	4661      	mov	r1, ip
 8001374:	4691      	mov	r9, r2
 8001376:	4d15      	ldr	r5, [pc, #84]	; (80013cc <__aeabi_dsub+0x688>)
 8001378:	e601      	b.n	8000f7e <__aeabi_dsub+0x23a>
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	2400      	movs	r4, #0
 800137e:	0312      	lsls	r2, r2, #12
 8001380:	e679      	b.n	8001076 <__aeabi_dsub+0x332>
 8001382:	001d      	movs	r5, r3
 8001384:	000e      	movs	r6, r1
 8001386:	3d20      	subs	r5, #32
 8001388:	40ee      	lsrs	r6, r5
 800138a:	46b0      	mov	r8, r6
 800138c:	2b20      	cmp	r3, #32
 800138e:	d004      	beq.n	800139a <__aeabi_dsub+0x656>
 8001390:	2540      	movs	r5, #64	; 0x40
 8001392:	1aeb      	subs	r3, r5, r3
 8001394:	4099      	lsls	r1, r3
 8001396:	4308      	orrs	r0, r1
 8001398:	4681      	mov	r9, r0
 800139a:	464e      	mov	r6, r9
 800139c:	4643      	mov	r3, r8
 800139e:	1e71      	subs	r1, r6, #1
 80013a0:	418e      	sbcs	r6, r1
 80013a2:	431e      	orrs	r6, r3
 80013a4:	e767      	b.n	8001276 <__aeabi_dsub+0x532>
 80013a6:	1886      	adds	r6, r0, r2
 80013a8:	4296      	cmp	r6, r2
 80013aa:	419b      	sbcs	r3, r3
 80013ac:	4461      	add	r1, ip
 80013ae:	425b      	negs	r3, r3
 80013b0:	18c9      	adds	r1, r1, r3
 80013b2:	003d      	movs	r5, r7
 80013b4:	e58c      	b.n	8000ed0 <__aeabi_dsub+0x18c>
 80013b6:	4647      	mov	r7, r8
 80013b8:	4337      	orrs	r7, r6
 80013ba:	d0ce      	beq.n	800135a <__aeabi_dsub+0x616>
 80013bc:	2207      	movs	r2, #7
 80013be:	4641      	mov	r1, r8
 80013c0:	4032      	ands	r2, r6
 80013c2:	e649      	b.n	8001058 <__aeabi_dsub+0x314>
 80013c4:	2700      	movs	r7, #0
 80013c6:	003a      	movs	r2, r7
 80013c8:	e5e6      	b.n	8000f98 <__aeabi_dsub+0x254>
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	000007ff 	.word	0x000007ff
 80013d0:	ff7fffff 	.word	0xff7fffff

080013d4 <__aeabi_d2iz>:
 80013d4:	b530      	push	{r4, r5, lr}
 80013d6:	4d14      	ldr	r5, [pc, #80]	; (8001428 <__aeabi_d2iz+0x54>)
 80013d8:	030a      	lsls	r2, r1, #12
 80013da:	004b      	lsls	r3, r1, #1
 80013dc:	0b12      	lsrs	r2, r2, #12
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	0fc9      	lsrs	r1, r1, #31
 80013e2:	2400      	movs	r4, #0
 80013e4:	42ab      	cmp	r3, r5
 80013e6:	dd11      	ble.n	800140c <__aeabi_d2iz+0x38>
 80013e8:	4c10      	ldr	r4, [pc, #64]	; (800142c <__aeabi_d2iz+0x58>)
 80013ea:	42a3      	cmp	r3, r4
 80013ec:	dc10      	bgt.n	8001410 <__aeabi_d2iz+0x3c>
 80013ee:	2480      	movs	r4, #128	; 0x80
 80013f0:	0364      	lsls	r4, r4, #13
 80013f2:	4322      	orrs	r2, r4
 80013f4:	4c0e      	ldr	r4, [pc, #56]	; (8001430 <__aeabi_d2iz+0x5c>)
 80013f6:	1ae4      	subs	r4, r4, r3
 80013f8:	2c1f      	cmp	r4, #31
 80013fa:	dd0c      	ble.n	8001416 <__aeabi_d2iz+0x42>
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <__aeabi_d2iz+0x60>)
 80013fe:	1ac3      	subs	r3, r0, r3
 8001400:	40da      	lsrs	r2, r3
 8001402:	0013      	movs	r3, r2
 8001404:	425c      	negs	r4, r3
 8001406:	2900      	cmp	r1, #0
 8001408:	d100      	bne.n	800140c <__aeabi_d2iz+0x38>
 800140a:	001c      	movs	r4, r3
 800140c:	0020      	movs	r0, r4
 800140e:	bd30      	pop	{r4, r5, pc}
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <__aeabi_d2iz+0x64>)
 8001412:	18cc      	adds	r4, r1, r3
 8001414:	e7fa      	b.n	800140c <__aeabi_d2iz+0x38>
 8001416:	4d09      	ldr	r5, [pc, #36]	; (800143c <__aeabi_d2iz+0x68>)
 8001418:	40e0      	lsrs	r0, r4
 800141a:	46ac      	mov	ip, r5
 800141c:	4463      	add	r3, ip
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	4303      	orrs	r3, r0
 8001424:	e7ee      	b.n	8001404 <__aeabi_d2iz+0x30>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	000003fe 	.word	0x000003fe
 800142c:	0000041d 	.word	0x0000041d
 8001430:	00000433 	.word	0x00000433
 8001434:	00000413 	.word	0x00000413
 8001438:	7fffffff 	.word	0x7fffffff
 800143c:	fffffbed 	.word	0xfffffbed

08001440 <__aeabi_i2d>:
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	2800      	cmp	r0, #0
 8001444:	d02d      	beq.n	80014a2 <__aeabi_i2d+0x62>
 8001446:	17c3      	asrs	r3, r0, #31
 8001448:	18c5      	adds	r5, r0, r3
 800144a:	405d      	eors	r5, r3
 800144c:	0fc4      	lsrs	r4, r0, #31
 800144e:	0028      	movs	r0, r5
 8001450:	f000 f86e 	bl	8001530 <__clzsi2>
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <__aeabi_i2d+0x6c>)
 8001456:	1a1b      	subs	r3, r3, r0
 8001458:	055b      	lsls	r3, r3, #21
 800145a:	0d5b      	lsrs	r3, r3, #21
 800145c:	280a      	cmp	r0, #10
 800145e:	dd15      	ble.n	800148c <__aeabi_i2d+0x4c>
 8001460:	380b      	subs	r0, #11
 8001462:	4085      	lsls	r5, r0
 8001464:	2200      	movs	r2, #0
 8001466:	032d      	lsls	r5, r5, #12
 8001468:	0b2d      	lsrs	r5, r5, #12
 800146a:	2100      	movs	r1, #0
 800146c:	0010      	movs	r0, r2
 800146e:	032d      	lsls	r5, r5, #12
 8001470:	0d0a      	lsrs	r2, r1, #20
 8001472:	0b2d      	lsrs	r5, r5, #12
 8001474:	0512      	lsls	r2, r2, #20
 8001476:	432a      	orrs	r2, r5
 8001478:	4d0d      	ldr	r5, [pc, #52]	; (80014b0 <__aeabi_i2d+0x70>)
 800147a:	051b      	lsls	r3, r3, #20
 800147c:	402a      	ands	r2, r5
 800147e:	4313      	orrs	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	07e4      	lsls	r4, r4, #31
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	4323      	orrs	r3, r4
 8001488:	0019      	movs	r1, r3
 800148a:	bd70      	pop	{r4, r5, r6, pc}
 800148c:	0002      	movs	r2, r0
 800148e:	0029      	movs	r1, r5
 8001490:	3215      	adds	r2, #21
 8001492:	4091      	lsls	r1, r2
 8001494:	000a      	movs	r2, r1
 8001496:	210b      	movs	r1, #11
 8001498:	1a08      	subs	r0, r1, r0
 800149a:	40c5      	lsrs	r5, r0
 800149c:	032d      	lsls	r5, r5, #12
 800149e:	0b2d      	lsrs	r5, r5, #12
 80014a0:	e7e3      	b.n	800146a <__aeabi_i2d+0x2a>
 80014a2:	2400      	movs	r4, #0
 80014a4:	2300      	movs	r3, #0
 80014a6:	2500      	movs	r5, #0
 80014a8:	2200      	movs	r2, #0
 80014aa:	e7de      	b.n	800146a <__aeabi_i2d+0x2a>
 80014ac:	0000041e 	.word	0x0000041e
 80014b0:	800fffff 	.word	0x800fffff

080014b4 <__aeabi_cdrcmple>:
 80014b4:	4684      	mov	ip, r0
 80014b6:	1c10      	adds	r0, r2, #0
 80014b8:	4662      	mov	r2, ip
 80014ba:	468c      	mov	ip, r1
 80014bc:	1c19      	adds	r1, r3, #0
 80014be:	4663      	mov	r3, ip
 80014c0:	e000      	b.n	80014c4 <__aeabi_cdcmpeq>
 80014c2:	46c0      	nop			; (mov r8, r8)

080014c4 <__aeabi_cdcmpeq>:
 80014c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80014c6:	f000 f8f1 	bl	80016ac <__ledf2>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d401      	bmi.n	80014d2 <__aeabi_cdcmpeq+0xe>
 80014ce:	2100      	movs	r1, #0
 80014d0:	42c8      	cmn	r0, r1
 80014d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080014d4 <__aeabi_dcmpeq>:
 80014d4:	b510      	push	{r4, lr}
 80014d6:	f000 f849 	bl	800156c <__eqdf2>
 80014da:	4240      	negs	r0, r0
 80014dc:	3001      	adds	r0, #1
 80014de:	bd10      	pop	{r4, pc}

080014e0 <__aeabi_dcmplt>:
 80014e0:	b510      	push	{r4, lr}
 80014e2:	f000 f8e3 	bl	80016ac <__ledf2>
 80014e6:	2800      	cmp	r0, #0
 80014e8:	db01      	blt.n	80014ee <__aeabi_dcmplt+0xe>
 80014ea:	2000      	movs	r0, #0
 80014ec:	bd10      	pop	{r4, pc}
 80014ee:	2001      	movs	r0, #1
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)

080014f4 <__aeabi_dcmple>:
 80014f4:	b510      	push	{r4, lr}
 80014f6:	f000 f8d9 	bl	80016ac <__ledf2>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	dd01      	ble.n	8001502 <__aeabi_dcmple+0xe>
 80014fe:	2000      	movs	r0, #0
 8001500:	bd10      	pop	{r4, pc}
 8001502:	2001      	movs	r0, #1
 8001504:	bd10      	pop	{r4, pc}
 8001506:	46c0      	nop			; (mov r8, r8)

08001508 <__aeabi_dcmpgt>:
 8001508:	b510      	push	{r4, lr}
 800150a:	f000 f86b 	bl	80015e4 <__gedf2>
 800150e:	2800      	cmp	r0, #0
 8001510:	dc01      	bgt.n	8001516 <__aeabi_dcmpgt+0xe>
 8001512:	2000      	movs	r0, #0
 8001514:	bd10      	pop	{r4, pc}
 8001516:	2001      	movs	r0, #1
 8001518:	bd10      	pop	{r4, pc}
 800151a:	46c0      	nop			; (mov r8, r8)

0800151c <__aeabi_dcmpge>:
 800151c:	b510      	push	{r4, lr}
 800151e:	f000 f861 	bl	80015e4 <__gedf2>
 8001522:	2800      	cmp	r0, #0
 8001524:	da01      	bge.n	800152a <__aeabi_dcmpge+0xe>
 8001526:	2000      	movs	r0, #0
 8001528:	bd10      	pop	{r4, pc}
 800152a:	2001      	movs	r0, #1
 800152c:	bd10      	pop	{r4, pc}
 800152e:	46c0      	nop			; (mov r8, r8)

08001530 <__clzsi2>:
 8001530:	211c      	movs	r1, #28
 8001532:	2301      	movs	r3, #1
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	4298      	cmp	r0, r3
 8001538:	d301      	bcc.n	800153e <__clzsi2+0xe>
 800153a:	0c00      	lsrs	r0, r0, #16
 800153c:	3910      	subs	r1, #16
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	4298      	cmp	r0, r3
 8001542:	d301      	bcc.n	8001548 <__clzsi2+0x18>
 8001544:	0a00      	lsrs	r0, r0, #8
 8001546:	3908      	subs	r1, #8
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	4298      	cmp	r0, r3
 800154c:	d301      	bcc.n	8001552 <__clzsi2+0x22>
 800154e:	0900      	lsrs	r0, r0, #4
 8001550:	3904      	subs	r1, #4
 8001552:	a202      	add	r2, pc, #8	; (adr r2, 800155c <__clzsi2+0x2c>)
 8001554:	5c10      	ldrb	r0, [r2, r0]
 8001556:	1840      	adds	r0, r0, r1
 8001558:	4770      	bx	lr
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	02020304 	.word	0x02020304
 8001560:	01010101 	.word	0x01010101
	...

0800156c <__eqdf2>:
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	464f      	mov	r7, r9
 8001570:	4646      	mov	r6, r8
 8001572:	46d6      	mov	lr, sl
 8001574:	4684      	mov	ip, r0
 8001576:	b5c0      	push	{r6, r7, lr}
 8001578:	4680      	mov	r8, r0
 800157a:	4e19      	ldr	r6, [pc, #100]	; (80015e0 <__eqdf2+0x74>)
 800157c:	0318      	lsls	r0, r3, #12
 800157e:	030f      	lsls	r7, r1, #12
 8001580:	004d      	lsls	r5, r1, #1
 8001582:	0b00      	lsrs	r0, r0, #12
 8001584:	005c      	lsls	r4, r3, #1
 8001586:	4682      	mov	sl, r0
 8001588:	0b3f      	lsrs	r7, r7, #12
 800158a:	0d6d      	lsrs	r5, r5, #21
 800158c:	0fc9      	lsrs	r1, r1, #31
 800158e:	4691      	mov	r9, r2
 8001590:	0d64      	lsrs	r4, r4, #21
 8001592:	0fdb      	lsrs	r3, r3, #31
 8001594:	2001      	movs	r0, #1
 8001596:	42b5      	cmp	r5, r6
 8001598:	d00a      	beq.n	80015b0 <__eqdf2+0x44>
 800159a:	42b4      	cmp	r4, r6
 800159c:	d003      	beq.n	80015a6 <__eqdf2+0x3a>
 800159e:	42a5      	cmp	r5, r4
 80015a0:	d101      	bne.n	80015a6 <__eqdf2+0x3a>
 80015a2:	4557      	cmp	r7, sl
 80015a4:	d00c      	beq.n	80015c0 <__eqdf2+0x54>
 80015a6:	bc1c      	pop	{r2, r3, r4}
 80015a8:	4690      	mov	r8, r2
 80015aa:	4699      	mov	r9, r3
 80015ac:	46a2      	mov	sl, r4
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b0:	4666      	mov	r6, ip
 80015b2:	433e      	orrs	r6, r7
 80015b4:	d1f7      	bne.n	80015a6 <__eqdf2+0x3a>
 80015b6:	42ac      	cmp	r4, r5
 80015b8:	d1f5      	bne.n	80015a6 <__eqdf2+0x3a>
 80015ba:	4654      	mov	r4, sl
 80015bc:	4314      	orrs	r4, r2
 80015be:	d1f2      	bne.n	80015a6 <__eqdf2+0x3a>
 80015c0:	2001      	movs	r0, #1
 80015c2:	45c8      	cmp	r8, r9
 80015c4:	d1ef      	bne.n	80015a6 <__eqdf2+0x3a>
 80015c6:	4299      	cmp	r1, r3
 80015c8:	d007      	beq.n	80015da <__eqdf2+0x6e>
 80015ca:	2d00      	cmp	r5, #0
 80015cc:	d1eb      	bne.n	80015a6 <__eqdf2+0x3a>
 80015ce:	4663      	mov	r3, ip
 80015d0:	431f      	orrs	r7, r3
 80015d2:	0038      	movs	r0, r7
 80015d4:	1e47      	subs	r7, r0, #1
 80015d6:	41b8      	sbcs	r0, r7
 80015d8:	e7e5      	b.n	80015a6 <__eqdf2+0x3a>
 80015da:	2000      	movs	r0, #0
 80015dc:	e7e3      	b.n	80015a6 <__eqdf2+0x3a>
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	000007ff 	.word	0x000007ff

080015e4 <__gedf2>:
 80015e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e6:	464f      	mov	r7, r9
 80015e8:	4646      	mov	r6, r8
 80015ea:	46d6      	mov	lr, sl
 80015ec:	004d      	lsls	r5, r1, #1
 80015ee:	b5c0      	push	{r6, r7, lr}
 80015f0:	030e      	lsls	r6, r1, #12
 80015f2:	0fc9      	lsrs	r1, r1, #31
 80015f4:	468a      	mov	sl, r1
 80015f6:	492c      	ldr	r1, [pc, #176]	; (80016a8 <__gedf2+0xc4>)
 80015f8:	031f      	lsls	r7, r3, #12
 80015fa:	005c      	lsls	r4, r3, #1
 80015fc:	4680      	mov	r8, r0
 80015fe:	0b36      	lsrs	r6, r6, #12
 8001600:	0d6d      	lsrs	r5, r5, #21
 8001602:	4691      	mov	r9, r2
 8001604:	0b3f      	lsrs	r7, r7, #12
 8001606:	0d64      	lsrs	r4, r4, #21
 8001608:	0fdb      	lsrs	r3, r3, #31
 800160a:	428d      	cmp	r5, r1
 800160c:	d01e      	beq.n	800164c <__gedf2+0x68>
 800160e:	428c      	cmp	r4, r1
 8001610:	d016      	beq.n	8001640 <__gedf2+0x5c>
 8001612:	2d00      	cmp	r5, #0
 8001614:	d11e      	bne.n	8001654 <__gedf2+0x70>
 8001616:	4330      	orrs	r0, r6
 8001618:	4684      	mov	ip, r0
 800161a:	2c00      	cmp	r4, #0
 800161c:	d101      	bne.n	8001622 <__gedf2+0x3e>
 800161e:	433a      	orrs	r2, r7
 8001620:	d023      	beq.n	800166a <__gedf2+0x86>
 8001622:	4662      	mov	r2, ip
 8001624:	2a00      	cmp	r2, #0
 8001626:	d01a      	beq.n	800165e <__gedf2+0x7a>
 8001628:	459a      	cmp	sl, r3
 800162a:	d029      	beq.n	8001680 <__gedf2+0x9c>
 800162c:	4651      	mov	r1, sl
 800162e:	2002      	movs	r0, #2
 8001630:	3901      	subs	r1, #1
 8001632:	4008      	ands	r0, r1
 8001634:	3801      	subs	r0, #1
 8001636:	bc1c      	pop	{r2, r3, r4}
 8001638:	4690      	mov	r8, r2
 800163a:	4699      	mov	r9, r3
 800163c:	46a2      	mov	sl, r4
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001640:	0039      	movs	r1, r7
 8001642:	4311      	orrs	r1, r2
 8001644:	d0e5      	beq.n	8001612 <__gedf2+0x2e>
 8001646:	2002      	movs	r0, #2
 8001648:	4240      	negs	r0, r0
 800164a:	e7f4      	b.n	8001636 <__gedf2+0x52>
 800164c:	4330      	orrs	r0, r6
 800164e:	d1fa      	bne.n	8001646 <__gedf2+0x62>
 8001650:	42ac      	cmp	r4, r5
 8001652:	d00f      	beq.n	8001674 <__gedf2+0x90>
 8001654:	2c00      	cmp	r4, #0
 8001656:	d10f      	bne.n	8001678 <__gedf2+0x94>
 8001658:	433a      	orrs	r2, r7
 800165a:	d0e7      	beq.n	800162c <__gedf2+0x48>
 800165c:	e00c      	b.n	8001678 <__gedf2+0x94>
 800165e:	2201      	movs	r2, #1
 8001660:	3b01      	subs	r3, #1
 8001662:	4393      	bics	r3, r2
 8001664:	0018      	movs	r0, r3
 8001666:	3001      	adds	r0, #1
 8001668:	e7e5      	b.n	8001636 <__gedf2+0x52>
 800166a:	4663      	mov	r3, ip
 800166c:	2000      	movs	r0, #0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0e1      	beq.n	8001636 <__gedf2+0x52>
 8001672:	e7db      	b.n	800162c <__gedf2+0x48>
 8001674:	433a      	orrs	r2, r7
 8001676:	d1e6      	bne.n	8001646 <__gedf2+0x62>
 8001678:	459a      	cmp	sl, r3
 800167a:	d1d7      	bne.n	800162c <__gedf2+0x48>
 800167c:	42a5      	cmp	r5, r4
 800167e:	dcd5      	bgt.n	800162c <__gedf2+0x48>
 8001680:	42a5      	cmp	r5, r4
 8001682:	db05      	blt.n	8001690 <__gedf2+0xac>
 8001684:	42be      	cmp	r6, r7
 8001686:	d8d1      	bhi.n	800162c <__gedf2+0x48>
 8001688:	d008      	beq.n	800169c <__gedf2+0xb8>
 800168a:	2000      	movs	r0, #0
 800168c:	42be      	cmp	r6, r7
 800168e:	d2d2      	bcs.n	8001636 <__gedf2+0x52>
 8001690:	4650      	mov	r0, sl
 8001692:	2301      	movs	r3, #1
 8001694:	3801      	subs	r0, #1
 8001696:	4398      	bics	r0, r3
 8001698:	3001      	adds	r0, #1
 800169a:	e7cc      	b.n	8001636 <__gedf2+0x52>
 800169c:	45c8      	cmp	r8, r9
 800169e:	d8c5      	bhi.n	800162c <__gedf2+0x48>
 80016a0:	2000      	movs	r0, #0
 80016a2:	45c8      	cmp	r8, r9
 80016a4:	d3f4      	bcc.n	8001690 <__gedf2+0xac>
 80016a6:	e7c6      	b.n	8001636 <__gedf2+0x52>
 80016a8:	000007ff 	.word	0x000007ff

080016ac <__ledf2>:
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	464f      	mov	r7, r9
 80016b0:	4646      	mov	r6, r8
 80016b2:	46d6      	mov	lr, sl
 80016b4:	004d      	lsls	r5, r1, #1
 80016b6:	b5c0      	push	{r6, r7, lr}
 80016b8:	030e      	lsls	r6, r1, #12
 80016ba:	0fc9      	lsrs	r1, r1, #31
 80016bc:	468a      	mov	sl, r1
 80016be:	492e      	ldr	r1, [pc, #184]	; (8001778 <__ledf2+0xcc>)
 80016c0:	031f      	lsls	r7, r3, #12
 80016c2:	005c      	lsls	r4, r3, #1
 80016c4:	4680      	mov	r8, r0
 80016c6:	0b36      	lsrs	r6, r6, #12
 80016c8:	0d6d      	lsrs	r5, r5, #21
 80016ca:	4691      	mov	r9, r2
 80016cc:	0b3f      	lsrs	r7, r7, #12
 80016ce:	0d64      	lsrs	r4, r4, #21
 80016d0:	0fdb      	lsrs	r3, r3, #31
 80016d2:	428d      	cmp	r5, r1
 80016d4:	d018      	beq.n	8001708 <__ledf2+0x5c>
 80016d6:	428c      	cmp	r4, r1
 80016d8:	d011      	beq.n	80016fe <__ledf2+0x52>
 80016da:	2d00      	cmp	r5, #0
 80016dc:	d118      	bne.n	8001710 <__ledf2+0x64>
 80016de:	4330      	orrs	r0, r6
 80016e0:	4684      	mov	ip, r0
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	d11e      	bne.n	8001724 <__ledf2+0x78>
 80016e6:	433a      	orrs	r2, r7
 80016e8:	d11c      	bne.n	8001724 <__ledf2+0x78>
 80016ea:	4663      	mov	r3, ip
 80016ec:	2000      	movs	r0, #0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d030      	beq.n	8001754 <__ledf2+0xa8>
 80016f2:	4651      	mov	r1, sl
 80016f4:	2002      	movs	r0, #2
 80016f6:	3901      	subs	r1, #1
 80016f8:	4008      	ands	r0, r1
 80016fa:	3801      	subs	r0, #1
 80016fc:	e02a      	b.n	8001754 <__ledf2+0xa8>
 80016fe:	0039      	movs	r1, r7
 8001700:	4311      	orrs	r1, r2
 8001702:	d0ea      	beq.n	80016da <__ledf2+0x2e>
 8001704:	2002      	movs	r0, #2
 8001706:	e025      	b.n	8001754 <__ledf2+0xa8>
 8001708:	4330      	orrs	r0, r6
 800170a:	d1fb      	bne.n	8001704 <__ledf2+0x58>
 800170c:	42ac      	cmp	r4, r5
 800170e:	d026      	beq.n	800175e <__ledf2+0xb2>
 8001710:	2c00      	cmp	r4, #0
 8001712:	d126      	bne.n	8001762 <__ledf2+0xb6>
 8001714:	433a      	orrs	r2, r7
 8001716:	d124      	bne.n	8001762 <__ledf2+0xb6>
 8001718:	4651      	mov	r1, sl
 800171a:	2002      	movs	r0, #2
 800171c:	3901      	subs	r1, #1
 800171e:	4008      	ands	r0, r1
 8001720:	3801      	subs	r0, #1
 8001722:	e017      	b.n	8001754 <__ledf2+0xa8>
 8001724:	4662      	mov	r2, ip
 8001726:	2a00      	cmp	r2, #0
 8001728:	d00f      	beq.n	800174a <__ledf2+0x9e>
 800172a:	459a      	cmp	sl, r3
 800172c:	d1e1      	bne.n	80016f2 <__ledf2+0x46>
 800172e:	42a5      	cmp	r5, r4
 8001730:	db05      	blt.n	800173e <__ledf2+0x92>
 8001732:	42be      	cmp	r6, r7
 8001734:	d8dd      	bhi.n	80016f2 <__ledf2+0x46>
 8001736:	d019      	beq.n	800176c <__ledf2+0xc0>
 8001738:	2000      	movs	r0, #0
 800173a:	42be      	cmp	r6, r7
 800173c:	d20a      	bcs.n	8001754 <__ledf2+0xa8>
 800173e:	4650      	mov	r0, sl
 8001740:	2301      	movs	r3, #1
 8001742:	3801      	subs	r0, #1
 8001744:	4398      	bics	r0, r3
 8001746:	3001      	adds	r0, #1
 8001748:	e004      	b.n	8001754 <__ledf2+0xa8>
 800174a:	2201      	movs	r2, #1
 800174c:	3b01      	subs	r3, #1
 800174e:	4393      	bics	r3, r2
 8001750:	0018      	movs	r0, r3
 8001752:	3001      	adds	r0, #1
 8001754:	bc1c      	pop	{r2, r3, r4}
 8001756:	4690      	mov	r8, r2
 8001758:	4699      	mov	r9, r3
 800175a:	46a2      	mov	sl, r4
 800175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175e:	433a      	orrs	r2, r7
 8001760:	d1d0      	bne.n	8001704 <__ledf2+0x58>
 8001762:	459a      	cmp	sl, r3
 8001764:	d1c5      	bne.n	80016f2 <__ledf2+0x46>
 8001766:	42a5      	cmp	r5, r4
 8001768:	dcc3      	bgt.n	80016f2 <__ledf2+0x46>
 800176a:	e7e0      	b.n	800172e <__ledf2+0x82>
 800176c:	45c8      	cmp	r8, r9
 800176e:	d8c0      	bhi.n	80016f2 <__ledf2+0x46>
 8001770:	2000      	movs	r0, #0
 8001772:	45c8      	cmp	r8, r9
 8001774:	d3e3      	bcc.n	800173e <__ledf2+0x92>
 8001776:	e7ed      	b.n	8001754 <__ledf2+0xa8>
 8001778:	000007ff 	.word	0x000007ff

0800177c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001782:	f000 fae9 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001786:	f000 f85f 	bl	8001848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178a:	f000 f97d 	bl	8001a88 <MX_GPIO_Init>
  MX_ADC_Init();
 800178e:	f000 f8a1 	bl	80018d4 <MX_ADC_Init>
  MX_TIM3_Init();
 8001792:	f000 f8fb 	bl	800198c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <main+0xb0>)
 8001798:	0018      	movs	r0, r3
 800179a:	f001 feb1 	bl	8003500 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <main+0xb0>)
 80017a0:	2100      	movs	r1, #0
 80017a2:	0018      	movs	r0, r3
 80017a4:	f001 ff4e 	bl	8003644 <HAL_TIM_PWM_Start>
  int high = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Start ADC Conversion
	  	  HAL_ADC_Start(&hadc);
 80017ac:	4b20      	ldr	r3, [pc, #128]	; (8001830 <main+0xb4>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 fc98 	bl	80020e4 <HAL_ADC_Start>
	  	  // Poll ADC1 Perihperal & TimeOut = 1mSec
	  	  HAL_ADC_PollForConversion(&hadc, 1);
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <main+0xb4>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	0018      	movs	r0, r3
 80017ba:	f000 fce7 	bl	800218c <HAL_ADC_PollForConversion>
	  	  // Read The ADC Conversion Result & Map It To PWM DutyCycle
	  	  uint16_t ang = HAL_ADC_GetValue(&hadc);
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <main+0xb4>)
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 fd75 	bl	80022b0 <HAL_ADC_GetValue>
 80017c6:	0002      	movs	r2, r0
 80017c8:	1cbb      	adds	r3, r7, #2
 80017ca:	801a      	strh	r2, [r3, #0]

	  	  uint16_t analog = ang*3300/(1<<12);
 80017cc:	1cbb      	adds	r3, r7, #2
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <main+0xb8>)
 80017d2:	4353      	muls	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	da02      	bge.n	80017de <main+0x62>
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <main+0xbc>)
 80017da:	4694      	mov	ip, r2
 80017dc:	4463      	add	r3, ip
 80017de:	131b      	asrs	r3, r3, #12
 80017e0:	001a      	movs	r2, r3
 80017e2:	003b      	movs	r3, r7
 80017e4:	801a      	strh	r2, [r3, #0]

	  	  HAL_Delay(2000);
 80017e6:	23fa      	movs	r3, #250	; 0xfa
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 fb18 	bl	8001e20 <HAL_Delay>
	  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, analog/3.33*100);
 80017f0:	003b      	movs	r3, r7
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff fe23 	bl	8001440 <__aeabi_i2d>
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <main+0xc0>)
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <main+0xc4>)
 80017fe:	f7fe fd2d 	bl	800025c <__aeabi_ddiv>
 8001802:	0003      	movs	r3, r0
 8001804:	000c      	movs	r4, r1
 8001806:	0018      	movs	r0, r3
 8001808:	0021      	movs	r1, r4
 800180a:	2200      	movs	r2, #0
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <main+0xc8>)
 800180e:	f7ff f827 	bl	8000860 <__aeabi_dmul>
 8001812:	0003      	movs	r3, r0
 8001814:	000c      	movs	r4, r1
 8001816:	0019      	movs	r1, r3
 8001818:	0022      	movs	r2, r4
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <main+0xb0>)
 800181c:	681c      	ldr	r4, [r3, #0]
 800181e:	0008      	movs	r0, r1
 8001820:	0011      	movs	r1, r2
 8001822:	f7fe fcfd 	bl	8000220 <__aeabi_d2uiz>
 8001826:	0003      	movs	r3, r0
 8001828:	6363      	str	r3, [r4, #52]	; 0x34
  {
 800182a:	e7bf      	b.n	80017ac <main+0x30>
 800182c:	20000028 	.word	0x20000028
 8001830:	20000070 	.word	0x20000070
 8001834:	00000ce4 	.word	0x00000ce4
 8001838:	00000fff 	.word	0x00000fff
 800183c:	0a3d70a4 	.word	0x0a3d70a4
 8001840:	400aa3d7 	.word	0x400aa3d7
 8001844:	40590000 	.word	0x40590000

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b093      	sub	sp, #76	; 0x4c
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	2414      	movs	r4, #20
 8001850:	193b      	adds	r3, r7, r4
 8001852:	0018      	movs	r0, r3
 8001854:	2334      	movs	r3, #52	; 0x34
 8001856:	001a      	movs	r2, r3
 8001858:	2100      	movs	r1, #0
 800185a:	f002 fcd5 	bl	8004208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	0018      	movs	r0, r3
 8001862:	2310      	movs	r3, #16
 8001864:	001a      	movs	r2, r3
 8001866:	2100      	movs	r1, #0
 8001868:	f002 fcce 	bl	8004208 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800186c:	0021      	movs	r1, r4
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2212      	movs	r2, #18
 8001872:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001874:	187b      	adds	r3, r7, r1
 8001876:	2201      	movs	r2, #1
 8001878:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800187a:	187b      	adds	r3, r7, r1
 800187c:	2201      	movs	r2, #1
 800187e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001880:	187b      	adds	r3, r7, r1
 8001882:	2210      	movs	r2, #16
 8001884:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2210      	movs	r2, #16
 800188a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001892:	187b      	adds	r3, r7, r1
 8001894:	0018      	movs	r0, r3
 8001896:	f001 f905 	bl	8002aa4 <HAL_RCC_OscConfig>
 800189a:	1e03      	subs	r3, r0, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800189e:	f000 f93d 	bl	8001b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2100      	movs	r1, #0
 80018be:	0018      	movs	r0, r3
 80018c0:	f001 fc76 	bl	80031b0 <HAL_RCC_ClockConfig>
 80018c4:	1e03      	subs	r3, r0, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80018c8:	f000 f928 	bl	8001b1c <Error_Handler>
  }
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b013      	add	sp, #76	; 0x4c
 80018d2:	bd90      	pop	{r4, r7, pc}

080018d4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	0018      	movs	r0, r3
 80018de:	230c      	movs	r3, #12
 80018e0:	001a      	movs	r2, r3
 80018e2:	2100      	movs	r1, #0
 80018e4:	f002 fc90 	bl	8004208 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80018e8:	4b26      	ldr	r3, [pc, #152]	; (8001984 <MX_ADC_Init+0xb0>)
 80018ea:	4a27      	ldr	r2, [pc, #156]	; (8001988 <MX_ADC_Init+0xb4>)
 80018ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018ee:	4b25      	ldr	r3, [pc, #148]	; (8001984 <MX_ADC_Init+0xb0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80018f4:	4b23      	ldr	r3, [pc, #140]	; (8001984 <MX_ADC_Init+0xb0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <MX_ADC_Init+0xb0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001900:	4b20      	ldr	r3, [pc, #128]	; (8001984 <MX_ADC_Init+0xb0>)
 8001902:	2201      	movs	r2, #1
 8001904:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <MX_ADC_Init+0xb0>)
 8001908:	2204      	movs	r2, #4
 800190a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_ADC_Init+0xb0>)
 800190e:	2200      	movs	r2, #0
 8001910:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <MX_ADC_Init+0xb0>)
 8001914:	2200      	movs	r2, #0
 8001916:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <MX_ADC_Init+0xb0>)
 800191a:	2200      	movs	r2, #0
 800191c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <MX_ADC_Init+0xb0>)
 8001920:	2200      	movs	r2, #0
 8001922:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_ADC_Init+0xb0>)
 8001926:	22c2      	movs	r2, #194	; 0xc2
 8001928:	32ff      	adds	r2, #255	; 0xff
 800192a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <MX_ADC_Init+0xb0>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <MX_ADC_Init+0xb0>)
 8001934:	2224      	movs	r2, #36	; 0x24
 8001936:	2100      	movs	r1, #0
 8001938:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <MX_ADC_Init+0xb0>)
 800193c:	2201      	movs	r2, #1
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <MX_ADC_Init+0xb0>)
 8001942:	0018      	movs	r0, r3
 8001944:	f000 fa8e 	bl	8001e64 <HAL_ADC_Init>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800194c:	f000 f8e6 	bl	8001b1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2202      	movs	r2, #2
 8001954:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	0152      	lsls	r2, r2, #5
 800195c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	0552      	lsls	r2, r2, #21
 8001964:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001966:	1d3a      	adds	r2, r7, #4
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_ADC_Init+0xb0>)
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f000 fcab 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d001      	beq.n	800197a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001976:	f000 f8d1 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b004      	add	sp, #16
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	20000070 	.word	0x20000070
 8001988:	40012400 	.word	0x40012400

0800198c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08e      	sub	sp, #56	; 0x38
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001992:	2328      	movs	r3, #40	; 0x28
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	0018      	movs	r0, r3
 8001998:	2310      	movs	r3, #16
 800199a:	001a      	movs	r2, r3
 800199c:	2100      	movs	r1, #0
 800199e:	f002 fc33 	bl	8004208 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a2:	2320      	movs	r3, #32
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	0018      	movs	r0, r3
 80019a8:	2308      	movs	r3, #8
 80019aa:	001a      	movs	r2, r3
 80019ac:	2100      	movs	r1, #0
 80019ae:	f002 fc2b 	bl	8004208 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	0018      	movs	r0, r3
 80019b6:	231c      	movs	r3, #28
 80019b8:	001a      	movs	r2, r3
 80019ba:	2100      	movs	r1, #0
 80019bc:	f002 fc24 	bl	8004208 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c0:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <MX_TIM3_Init+0xf4>)
 80019c2:	4a30      	ldr	r2, [pc, #192]	; (8001a84 <MX_TIM3_Init+0xf8>)
 80019c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <MX_TIM3_Init+0xf4>)
 80019c8:	2210      	movs	r2, #16
 80019ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <MX_TIM3_Init+0xf4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <MX_TIM3_Init+0xf4>)
 80019d4:	2264      	movs	r2, #100	; 0x64
 80019d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <MX_TIM3_Init+0xf4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019de:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <MX_TIM3_Init+0xf4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <MX_TIM3_Init+0xf4>)
 80019e6:	0018      	movs	r0, r3
 80019e8:	f001 fd3a 	bl	8003460 <HAL_TIM_Base_Init>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80019f0:	f000 f894 	bl	8001b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f4:	2128      	movs	r1, #40	; 0x28
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	0152      	lsls	r2, r2, #5
 80019fc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019fe:	187a      	adds	r2, r7, r1
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_TIM3_Init+0xf4>)
 8001a02:	0011      	movs	r1, r2
 8001a04:	0018      	movs	r0, r3
 8001a06:	f001 ff85 	bl	8003914 <HAL_TIM_ConfigClockSource>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001a0e:	f000 f885 	bl	8001b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_TIM3_Init+0xf4>)
 8001a14:	0018      	movs	r0, r3
 8001a16:	f001 fdbd 	bl	8003594 <HAL_TIM_PWM_Init>
 8001a1a:	1e03      	subs	r3, r0, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a1e:	f000 f87d 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2120      	movs	r1, #32
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a30:	187a      	adds	r2, r7, r1
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_TIM3_Init+0xf4>)
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f002 fb64 	bl	8004104 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3c:	1e03      	subs	r3, r0, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001a40:	f000 f86c 	bl	8001b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2260      	movs	r2, #96	; 0x60
 8001a48:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2232      	movs	r2, #50	; 0x32
 8001a4e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5c:	1d39      	adds	r1, r7, #4
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MX_TIM3_Init+0xf4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	0018      	movs	r0, r3
 8001a64:	f001 fea6 	bl	80037b4 <HAL_TIM_PWM_ConfigChannel>
 8001a68:	1e03      	subs	r3, r0, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001a6c:	f000 f856 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <MX_TIM3_Init+0xf4>)
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 f8e8 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b00e      	add	sp, #56	; 0x38
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000028 	.word	0x20000028
 8001a84:	40000400 	.word	0x40000400

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	240c      	movs	r4, #12
 8001a90:	193b      	adds	r3, r7, r4
 8001a92:	0018      	movs	r0, r3
 8001a94:	2314      	movs	r3, #20
 8001a96:	001a      	movs	r2, r3
 8001a98:	2100      	movs	r1, #0
 8001a9a:	f002 fbb5 	bl	8004208 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <MX_GPIO_Init+0x8c>)
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_GPIO_Init+0x8c>)
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	0289      	lsls	r1, r1, #10
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	615a      	str	r2, [r3, #20]
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MX_GPIO_Init+0x8c>)
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	029b      	lsls	r3, r3, #10
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <MX_GPIO_Init+0x8c>)
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_GPIO_Init+0x8c>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	02c9      	lsls	r1, r1, #11
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	615a      	str	r2, [r3, #20]
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <MX_GPIO_Init+0x8c>)
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	02db      	lsls	r3, r3, #11
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	015b      	lsls	r3, r3, #5
 8001ada:	480f      	ldr	r0, [pc, #60]	; (8001b18 <MX_GPIO_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	0019      	movs	r1, r3
 8001ae0:	f000 ffa8 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	0152      	lsls	r2, r2, #5
 8001aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	193b      	adds	r3, r7, r4
 8001aee:	2201      	movs	r2, #1
 8001af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <MX_GPIO_Init+0x90>)
 8001b02:	0019      	movs	r1, r3
 8001b04:	0010      	movs	r0, r2
 8001b06:	f000 fe1d 	bl	8002744 <HAL_GPIO_Init>

}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b009      	add	sp, #36	; 0x24
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	40021000 	.word	0x40021000
 8001b18:	48000400 	.word	0x48000400

08001b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_12);
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	015b      	lsls	r3, r3, #5
 8001b24:	4a03      	ldr	r2, [pc, #12]	; (8001b34 <Error_Handler+0x18>)
 8001b26:	0019      	movs	r1, r3
 8001b28:	0010      	movs	r0, r2
 8001b2a:	f000 ffa0 	bl	8002a6e <HAL_GPIO_TogglePin>
	//HAL_Delay(500);
  /* USER CODE END Error_Handler_Debug */
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	48000400 	.word	0x48000400

08001b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_MspInit+0x44>)
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_MspInit+0x44>)
 8001b44:	2101      	movs	r1, #1
 8001b46:	430a      	orrs	r2, r1
 8001b48:	619a      	str	r2, [r3, #24]
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_MspInit+0x44>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_MspInit+0x44>)
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_MspInit+0x44>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	430a      	orrs	r2, r1
 8001b62:	61da      	str	r2, [r3, #28]
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_MspInit+0x44>)
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	055b      	lsls	r3, r3, #21
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	2314      	movs	r3, #20
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	2314      	movs	r3, #20
 8001b90:	001a      	movs	r2, r3
 8001b92:	2100      	movs	r1, #0
 8001b94:	f002 fb38 	bl	8004208 <memset>
  if(hadc->Instance==ADC1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_ADC_MspInit+0x84>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d12c      	bne.n	8001bfc <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_ADC_MspInit+0x88>)
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_ADC_MspInit+0x88>)
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0089      	lsls	r1, r1, #2
 8001bac:	430a      	orrs	r2, r1
 8001bae:	619a      	str	r2, [r3, #24]
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_ADC_MspInit+0x88>)
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_ADC_MspInit+0x88>)
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_ADC_MspInit+0x88>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	0289      	lsls	r1, r1, #10
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_ADC_MspInit+0x88>)
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	029b      	lsls	r3, r3, #10
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bda:	2114      	movs	r1, #20
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2204      	movs	r2, #4
 8001be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2203      	movs	r2, #3
 8001be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	187a      	adds	r2, r7, r1
 8001bf0:	2390      	movs	r3, #144	; 0x90
 8001bf2:	05db      	lsls	r3, r3, #23
 8001bf4:	0011      	movs	r1, r2
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 fda4 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b00a      	add	sp, #40	; 0x28
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40012400 	.word	0x40012400
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_TIM_Base_MspInit+0x34>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10b      	bne.n	8001c36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_TIM_Base_MspInit+0x38>)
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_TIM_Base_MspInit+0x38>)
 8001c24:	2102      	movs	r1, #2
 8001c26:	430a      	orrs	r2, r1
 8001c28:	61da      	str	r2, [r3, #28]
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_TIM_Base_MspInit+0x38>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b004      	add	sp, #16
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	230c      	movs	r3, #12
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	0018      	movs	r0, r3
 8001c56:	2314      	movs	r3, #20
 8001c58:	001a      	movs	r2, r3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f002 fad4 	bl	8004208 <memset>
  if(htim->Instance==TIM3)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <HAL_TIM_MspPostInit+0x74>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d123      	bne.n	8001cb2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_TIM_MspPostInit+0x78>)
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_TIM_MspPostInit+0x78>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	02c9      	lsls	r1, r1, #11
 8001c74:	430a      	orrs	r2, r1
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_TIM_MspPostInit+0x78>)
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	02db      	lsls	r3, r3, #11
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c86:	210c      	movs	r1, #12
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	2202      	movs	r2, #2
 8001c92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	187b      	adds	r3, r7, r1
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	4a06      	ldr	r2, [pc, #24]	; (8001cc4 <HAL_TIM_MspPostInit+0x7c>)
 8001caa:	0019      	movs	r1, r3
 8001cac:	0010      	movs	r0, r2
 8001cae:	f000 fd49 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b008      	add	sp, #32
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	48000400 	.word	0x48000400

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf0:	f000 f87a 	bl	8001de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0a:	490e      	ldr	r1, [pc, #56]	; (8001d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <LoopForever+0xe>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d20:	4c0b      	ldr	r4, [pc, #44]	; (8001d50 <LoopForever+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d2e:	f7ff ffe4 	bl	8001cfa <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d32:	f002 fa45 	bl	80041c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d36:	f7ff fd21 	bl	800177c <main>

08001d3a <LoopForever>:

LoopForever:
    b LoopForever
 8001d3a:	e7fe      	b.n	8001d3a <LoopForever>
  ldr   r0, =_estack
 8001d3c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d48:	080042e8 	.word	0x080042e8
  ldr r2, =_sbss
 8001d4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d50:	200000b4 	.word	0x200000b4

08001d54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC1_COMP_IRQHandler>
	...

08001d58 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <HAL_Init+0x24>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_Init+0x24>)
 8001d62:	2110      	movs	r1, #16
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f000 f809 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6e:	f7ff fee3 	bl	8001b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40022000 	.word	0x40022000

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_InitTick+0x5c>)
 8001d8a:	681c      	ldr	r4, [r3, #0]
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_InitTick+0x60>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	0019      	movs	r1, r3
 8001d92:	23fa      	movs	r3, #250	; 0xfa
 8001d94:	0098      	lsls	r0, r3, #2
 8001d96:	f7fe f9b7 	bl	8000108 <__udivsi3>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	0020      	movs	r0, r4
 8001da0:	f7fe f9b2 	bl	8000108 <__udivsi3>
 8001da4:	0003      	movs	r3, r0
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 fcbf 	bl	800272a <HAL_SYSTICK_Config>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e00f      	b.n	8001dd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d80b      	bhi.n	8001dd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	425b      	negs	r3, r3
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f000 fc9c 	bl	8002700 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_InitTick+0x64>)
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b003      	add	sp, #12
 8001dda:	bd90      	pop	{r4, r7, pc}
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_IncTick+0x1c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	001a      	movs	r2, r3
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_IncTick+0x20>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	18d2      	adds	r2, r2, r3
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_IncTick+0x20>)
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	20000008 	.word	0x20000008
 8001e08:	200000b0 	.word	0x200000b0

08001e0c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <HAL_GetTick+0x10>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	200000b0 	.word	0x200000b0

08001e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff fff0 	bl	8001e0c <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3301      	adds	r3, #1
 8001e38:	d005      	beq.n	8001e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_Delay+0x40>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	001a      	movs	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	189b      	adds	r3, r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	f7ff ffe0 	bl	8001e0c <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d8f7      	bhi.n	8001e48 <HAL_Delay+0x28>
  {
  }
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b004      	add	sp, #16
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000008 	.word	0x20000008

08001e64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e125      	b.n	80020ce <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2234      	movs	r2, #52	; 0x34
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff fe70 	bl	8001b80 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d000      	beq.n	8001eac <HAL_ADC_Init+0x48>
 8001eaa:	e103      	b.n	80020b4 <HAL_ADC_Init+0x250>
 8001eac:	230f      	movs	r3, #15
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d000      	beq.n	8001eb8 <HAL_ADC_Init+0x54>
 8001eb6:	e0fd      	b.n	80020b4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001ec2:	d000      	beq.n	8001ec6 <HAL_ADC_Init+0x62>
 8001ec4:	e0f6      	b.n	80020b4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eca:	4a83      	ldr	r2, [pc, #524]	; (80020d8 <HAL_ADC_Init+0x274>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2202      	movs	r2, #2
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2203      	movs	r2, #3
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d112      	bne.n	8001f0a <HAL_ADC_Init+0xa6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d009      	beq.n	8001f06 <HAL_ADC_Init+0xa2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	401a      	ands	r2, r3
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_Init+0xa6>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_ADC_Init+0xa8>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d116      	bne.n	8001f3e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2218      	movs	r2, #24
 8001f18:	4393      	bics	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	0899      	lsrs	r1, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4964      	ldr	r1, [pc, #400]	; (80020dc <HAL_ADC_Init+0x278>)
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7e1b      	ldrb	r3, [r3, #24]
 8001f52:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7e5b      	ldrb	r3, [r3, #25]
 8001f58:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e9b      	ldrb	r3, [r3, #26]
 8001f60:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f62:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d002      	beq.n	8001f72 <HAL_ADC_Init+0x10e>
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	015b      	lsls	r3, r3, #5
 8001f70:	e000      	b.n	8001f74 <HAL_ADC_Init+0x110>
 8001f72:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f74:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f7a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_Init+0x124>
 8001f84:	2304      	movs	r3, #4
 8001f86:	e000      	b.n	8001f8a <HAL_ADC_Init+0x126>
 8001f88:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001f8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2124      	movs	r1, #36	; 0x24
 8001f90:	5c5b      	ldrb	r3, [r3, r1]
 8001f92:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f94:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7edb      	ldrb	r3, [r3, #27]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d115      	bne.n	8001fd0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7e9b      	ldrb	r3, [r3, #26]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	0252      	lsls	r2, r2, #9
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	2201      	movs	r2, #1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	23c2      	movs	r3, #194	; 0xc2
 8001fd6:	33ff      	adds	r3, #255	; 0xff
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d007      	beq.n	8001fec <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68d9      	ldr	r1, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	055b      	lsls	r3, r3, #21
 8002004:	429a      	cmp	r2, r3
 8002006:	d01b      	beq.n	8002040 <HAL_ADC_Init+0x1dc>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2b01      	cmp	r3, #1
 800200e:	d017      	beq.n	8002040 <HAL_ADC_Init+0x1dc>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	2b02      	cmp	r3, #2
 8002016:	d013      	beq.n	8002040 <HAL_ADC_Init+0x1dc>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	2b03      	cmp	r3, #3
 800201e:	d00f      	beq.n	8002040 <HAL_ADC_Init+0x1dc>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	2b04      	cmp	r3, #4
 8002026:	d00b      	beq.n	8002040 <HAL_ADC_Init+0x1dc>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	2b05      	cmp	r3, #5
 800202e:	d007      	beq.n	8002040 <HAL_ADC_Init+0x1dc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	2b06      	cmp	r3, #6
 8002036:	d003      	beq.n	8002040 <HAL_ADC_Init+0x1dc>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	2b07      	cmp	r3, #7
 800203e:	d112      	bne.n	8002066 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2107      	movs	r1, #7
 800204c:	438a      	bics	r2, r1
 800204e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6959      	ldr	r1, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	2207      	movs	r2, #7
 800205c:	401a      	ands	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_ADC_Init+0x27c>)
 800206e:	4013      	ands	r3, r2
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d10b      	bne.n	800208e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	2203      	movs	r2, #3
 8002082:	4393      	bics	r3, r2
 8002084:	2201      	movs	r2, #1
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800208c:	e01c      	b.n	80020c8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	2212      	movs	r2, #18
 8002094:	4393      	bics	r3, r2
 8002096:	2210      	movs	r2, #16
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	2201      	movs	r2, #1
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80020aa:	230f      	movs	r3, #15
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020b2:	e009      	b.n	80020c8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	2210      	movs	r2, #16
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80020c0:	230f      	movs	r3, #15
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020c8:	230f      	movs	r3, #15
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	781b      	ldrb	r3, [r3, #0]
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b004      	add	sp, #16
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	fffffefd 	.word	0xfffffefd
 80020dc:	fffe0219 	.word	0xfffe0219
 80020e0:	833fffe7 	.word	0x833fffe7

080020e4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ec:	230f      	movs	r3, #15
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2204      	movs	r2, #4
 80020fc:	4013      	ands	r3, r2
 80020fe:	d138      	bne.n	8002172 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2234      	movs	r2, #52	; 0x34
 8002104:	5c9b      	ldrb	r3, [r3, r2]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_ADC_Start+0x2a>
 800210a:	2302      	movs	r3, #2
 800210c:	e038      	b.n	8002180 <HAL_ADC_Start+0x9c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2234      	movs	r2, #52	; 0x34
 8002112:	2101      	movs	r1, #1
 8002114:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7e5b      	ldrb	r3, [r3, #25]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d007      	beq.n	800212e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800211e:	230f      	movs	r3, #15
 8002120:	18fc      	adds	r4, r7, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 f9dd 	bl	80024e4 <ADC_Enable>
 800212a:	0003      	movs	r3, r0
 800212c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800212e:	230f      	movs	r3, #15
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d120      	bne.n	800217a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <HAL_ADC_Start+0xa4>)
 800213e:	4013      	ands	r3, r2
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	0052      	lsls	r2, r2, #1
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2234      	movs	r2, #52	; 0x34
 8002154:	2100      	movs	r1, #0
 8002156:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	221c      	movs	r2, #28
 800215e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2104      	movs	r1, #4
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e003      	b.n	800217a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002172:	230f      	movs	r3, #15
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2202      	movs	r2, #2
 8002178:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800217a:	230f      	movs	r3, #15
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	781b      	ldrb	r3, [r3, #0]
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b005      	add	sp, #20
 8002186:	bd90      	pop	{r4, r7, pc}
 8002188:	fffff0fe 	.word	0xfffff0fe

0800218c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	2b08      	cmp	r3, #8
 800219c:	d102      	bne.n	80021a4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800219e:	2308      	movs	r3, #8
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e014      	b.n	80021ce <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10b      	bne.n	80021ca <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	2220      	movs	r2, #32
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2234      	movs	r2, #52	; 0x34
 80021c2:	2100      	movs	r1, #0
 80021c4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80021ca:	230c      	movs	r3, #12
 80021cc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021ce:	f7ff fe1d 	bl	8001e0c <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021d6:	e019      	b.n	800220c <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	d016      	beq.n	800220c <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_ADC_PollForConversion+0x68>
 80021e4:	f7ff fe12 	bl	8001e0c <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d20b      	bcs.n	800220c <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	2204      	movs	r2, #4
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2234      	movs	r2, #52	; 0x34
 8002204:	2100      	movs	r1, #0
 8002206:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e04a      	b.n	80022a2 <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	d0df      	beq.n	80021d8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	0092      	lsls	r2, r2, #2
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	23c0      	movs	r3, #192	; 0xc0
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4013      	ands	r3, r2
 8002232:	d12d      	bne.n	8002290 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002238:	2b00      	cmp	r3, #0
 800223a:	d129      	bne.n	8002290 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2208      	movs	r2, #8
 8002244:	4013      	ands	r3, r2
 8002246:	2b08      	cmp	r3, #8
 8002248:	d122      	bne.n	8002290 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2204      	movs	r2, #4
 8002252:	4013      	ands	r3, r2
 8002254:	d110      	bne.n	8002278 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	210c      	movs	r1, #12
 8002262:	438a      	bics	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_ADC_PollForConversion+0x120>)
 800226c:	4013      	ands	r3, r2
 800226e:	2201      	movs	r2, #1
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
 8002276:	e00b      	b.n	8002290 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	2220      	movs	r2, #32
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	2201      	movs	r2, #1
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7e1b      	ldrb	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	220c      	movs	r2, #12
 800229e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b004      	add	sp, #16
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	fffffefe 	.word	0xfffffefe

080022b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d2:	230f      	movs	r3, #15
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	055b      	lsls	r3, r3, #21
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d011      	beq.n	800230e <HAL_ADC_ConfigChannel+0x46>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d00d      	beq.n	800230e <HAL_ADC_ConfigChannel+0x46>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d009      	beq.n	800230e <HAL_ADC_ConfigChannel+0x46>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d005      	beq.n	800230e <HAL_ADC_ConfigChannel+0x46>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	2b04      	cmp	r3, #4
 8002308:	d001      	beq.n	800230e <HAL_ADC_ConfigChannel+0x46>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2234      	movs	r2, #52	; 0x34
 8002312:	5c9b      	ldrb	r3, [r3, r2]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x54>
 8002318:	2302      	movs	r3, #2
 800231a:	e0d0      	b.n	80024be <HAL_ADC_ConfigChannel+0x1f6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2234      	movs	r2, #52	; 0x34
 8002320:	2101      	movs	r1, #1
 8002322:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2204      	movs	r2, #4
 800232c:	4013      	ands	r3, r2
 800232e:	d000      	beq.n	8002332 <HAL_ADC_ConfigChannel+0x6a>
 8002330:	e0b4      	b.n	800249c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a64      	ldr	r2, [pc, #400]	; (80024c8 <HAL_ADC_ConfigChannel+0x200>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d100      	bne.n	800233e <HAL_ADC_ConfigChannel+0x76>
 800233c:	e082      	b.n	8002444 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	409a      	lsls	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	055b      	lsls	r3, r3, #21
 800235c:	429a      	cmp	r2, r3
 800235e:	d037      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	2b01      	cmp	r3, #1
 8002366:	d033      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	2b02      	cmp	r3, #2
 800236e:	d02f      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	2b03      	cmp	r3, #3
 8002376:	d02b      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	2b04      	cmp	r3, #4
 800237e:	d027      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	2b05      	cmp	r3, #5
 8002386:	d023      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	2b06      	cmp	r3, #6
 800238e:	d01f      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	2b07      	cmp	r3, #7
 8002396:	d01b      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	2107      	movs	r1, #7
 80023a4:	400b      	ands	r3, r1
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d012      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2107      	movs	r1, #7
 80023b6:	438a      	bics	r2, r1
 80023b8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6959      	ldr	r1, [r3, #20]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2207      	movs	r2, #7
 80023c6:	401a      	ands	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d007      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x120>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b11      	cmp	r3, #17
 80023de:	d003      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x120>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b12      	cmp	r3, #18
 80023e6:	d163      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80023e8:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_ADC_ConfigChannel+0x204>)
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d009      	beq.n	8002408 <HAL_ADC_ConfigChannel+0x140>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b11      	cmp	r3, #17
 80023fa:	d102      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x13a>
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	03db      	lsls	r3, r3, #15
 8002400:	e004      	b.n	800240c <HAL_ADC_ConfigChannel+0x144>
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	045b      	lsls	r3, r3, #17
 8002406:	e001      	b.n	800240c <HAL_ADC_ConfigChannel+0x144>
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	4a2f      	ldr	r2, [pc, #188]	; (80024cc <HAL_ADC_ConfigChannel+0x204>)
 800240e:	430b      	orrs	r3, r1
 8002410:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d14a      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_ADC_ConfigChannel+0x208>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	492d      	ldr	r1, [pc, #180]	; (80024d4 <HAL_ADC_ConfigChannel+0x20c>)
 8002420:	0018      	movs	r0, r3
 8002422:	f7fd fe71 	bl	8000108 <__udivsi3>
 8002426:	0003      	movs	r3, r0
 8002428:	001a      	movs	r2, r3
 800242a:	0013      	movs	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	189b      	adds	r3, r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002434:	e002      	b.n	800243c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3b01      	subs	r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f9      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x16e>
 8002442:	e035      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2101      	movs	r1, #1
 8002450:	4099      	lsls	r1, r3
 8002452:	000b      	movs	r3, r1
 8002454:	43d9      	mvns	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	400a      	ands	r2, r1
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b10      	cmp	r3, #16
 8002464:	d007      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x1ae>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b11      	cmp	r3, #17
 800246c:	d003      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x1ae>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b12      	cmp	r3, #18
 8002474:	d11c      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_ADC_ConfigChannel+0x204>)
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d007      	beq.n	8002492 <HAL_ADC_ConfigChannel+0x1ca>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b11      	cmp	r3, #17
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x1c6>
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_ADC_ConfigChannel+0x210>)
 800248c:	e002      	b.n	8002494 <HAL_ADC_ConfigChannel+0x1cc>
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_ADC_ConfigChannel+0x214>)
 8002490:	e000      	b.n	8002494 <HAL_ADC_ConfigChannel+0x1cc>
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_ADC_ConfigChannel+0x218>)
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <HAL_ADC_ConfigChannel+0x204>)
 8002496:	400b      	ands	r3, r1
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e009      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	2220      	movs	r2, #32
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80024a8:	230f      	movs	r3, #15
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2234      	movs	r2, #52	; 0x34
 80024b4:	2100      	movs	r1, #0
 80024b6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80024b8:	230f      	movs	r3, #15
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	781b      	ldrb	r3, [r3, #0]
}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b004      	add	sp, #16
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	00001001 	.word	0x00001001
 80024cc:	40012708 	.word	0x40012708
 80024d0:	20000000 	.word	0x20000000
 80024d4:	000f4240 	.word	0x000f4240
 80024d8:	ffbfffff 	.word	0xffbfffff
 80024dc:	feffffff 	.word	0xfeffffff
 80024e0:	ff7fffff 	.word	0xff7fffff

080024e4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2203      	movs	r2, #3
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d112      	bne.n	8002528 <ADC_Enable+0x44>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
 800250c:	2b01      	cmp	r3, #1
 800250e:	d009      	beq.n	8002524 <ADC_Enable+0x40>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	401a      	ands	r2, r3
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	429a      	cmp	r2, r3
 8002522:	d101      	bne.n	8002528 <ADC_Enable+0x44>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <ADC_Enable+0x46>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d14b      	bne.n	80025c6 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <ADC_Enable+0xec>)
 8002536:	4013      	ands	r3, r2
 8002538:	d00d      	beq.n	8002556 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	2210      	movs	r2, #16
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	2201      	movs	r2, #1
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e038      	b.n	80025c8 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <ADC_Enable+0xf0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	491b      	ldr	r1, [pc, #108]	; (80025d8 <ADC_Enable+0xf4>)
 800256c:	0018      	movs	r0, r3
 800256e:	f7fd fdcb 	bl	8000108 <__udivsi3>
 8002572:	0003      	movs	r3, r0
 8002574:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002576:	e002      	b.n	800257e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3b01      	subs	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002584:	f7ff fc42 	bl	8001e0c <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800258c:	e014      	b.n	80025b8 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800258e:	f7ff fc3d 	bl	8001e0c <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d90d      	bls.n	80025b8 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	2210      	movs	r2, #16
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	2201      	movs	r2, #1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e007      	b.n	80025c8 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d1e3      	bne.n	800258e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	80000017 	.word	0x80000017
 80025d4:	20000000 	.word	0x20000000
 80025d8:	000f4240 	.word	0x000f4240

080025dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	0002      	movs	r2, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	1dfb      	adds	r3, r7, #7
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b7f      	cmp	r3, #127	; 0x7f
 80025f0:	d828      	bhi.n	8002644 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f2:	4a2f      	ldr	r2, [pc, #188]	; (80026b0 <__NVIC_SetPriority+0xd4>)
 80025f4:	1dfb      	adds	r3, r7, #7
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	33c0      	adds	r3, #192	; 0xc0
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	589b      	ldr	r3, [r3, r2]
 8002602:	1dfa      	adds	r2, r7, #7
 8002604:	7812      	ldrb	r2, [r2, #0]
 8002606:	0011      	movs	r1, r2
 8002608:	2203      	movs	r2, #3
 800260a:	400a      	ands	r2, r1
 800260c:	00d2      	lsls	r2, r2, #3
 800260e:	21ff      	movs	r1, #255	; 0xff
 8002610:	4091      	lsls	r1, r2
 8002612:	000a      	movs	r2, r1
 8002614:	43d2      	mvns	r2, r2
 8002616:	401a      	ands	r2, r3
 8002618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	019b      	lsls	r3, r3, #6
 800261e:	22ff      	movs	r2, #255	; 0xff
 8002620:	401a      	ands	r2, r3
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	0018      	movs	r0, r3
 8002628:	2303      	movs	r3, #3
 800262a:	4003      	ands	r3, r0
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002630:	481f      	ldr	r0, [pc, #124]	; (80026b0 <__NVIC_SetPriority+0xd4>)
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b25b      	sxtb	r3, r3
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	430a      	orrs	r2, r1
 800263c:	33c0      	adds	r3, #192	; 0xc0
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002642:	e031      	b.n	80026a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002644:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <__NVIC_SetPriority+0xd8>)
 8002646:	1dfb      	adds	r3, r7, #7
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	0019      	movs	r1, r3
 800264c:	230f      	movs	r3, #15
 800264e:	400b      	ands	r3, r1
 8002650:	3b08      	subs	r3, #8
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3306      	adds	r3, #6
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	3304      	adds	r3, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	1dfa      	adds	r2, r7, #7
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	0011      	movs	r1, r2
 8002664:	2203      	movs	r2, #3
 8002666:	400a      	ands	r2, r1
 8002668:	00d2      	lsls	r2, r2, #3
 800266a:	21ff      	movs	r1, #255	; 0xff
 800266c:	4091      	lsls	r1, r2
 800266e:	000a      	movs	r2, r1
 8002670:	43d2      	mvns	r2, r2
 8002672:	401a      	ands	r2, r3
 8002674:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	019b      	lsls	r3, r3, #6
 800267a:	22ff      	movs	r2, #255	; 0xff
 800267c:	401a      	ands	r2, r3
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	0018      	movs	r0, r3
 8002684:	2303      	movs	r3, #3
 8002686:	4003      	ands	r3, r0
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800268c:	4809      	ldr	r0, [pc, #36]	; (80026b4 <__NVIC_SetPriority+0xd8>)
 800268e:	1dfb      	adds	r3, r7, #7
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	001c      	movs	r4, r3
 8002694:	230f      	movs	r3, #15
 8002696:	4023      	ands	r3, r4
 8002698:	3b08      	subs	r3, #8
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	430a      	orrs	r2, r1
 800269e:	3306      	adds	r3, #6
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	18c3      	adds	r3, r0, r3
 80026a4:	3304      	adds	r3, #4
 80026a6:	601a      	str	r2, [r3, #0]
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b003      	add	sp, #12
 80026ae:	bd90      	pop	{r4, r7, pc}
 80026b0:	e000e100 	.word	0xe000e100
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <SysTick_Config+0x40>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ca:	2301      	movs	r3, #1
 80026cc:	e010      	b.n	80026f0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <SysTick_Config+0x44>)
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	3a01      	subs	r2, #1
 80026d4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d6:	2301      	movs	r3, #1
 80026d8:	425b      	negs	r3, r3
 80026da:	2103      	movs	r1, #3
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff ff7d 	bl	80025dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <SysTick_Config+0x44>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <SysTick_Config+0x44>)
 80026ea:	2207      	movs	r2, #7
 80026ec:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	0018      	movs	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	00ffffff 	.word	0x00ffffff
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	210f      	movs	r1, #15
 800270c:	187b      	adds	r3, r7, r1
 800270e:	1c02      	adds	r2, r0, #0
 8002710:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	187b      	adds	r3, r7, r1
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b25b      	sxtb	r3, r3
 800271a:	0011      	movs	r1, r2
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff ff5d 	bl	80025dc <__NVIC_SetPriority>
}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b004      	add	sp, #16
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f7ff ffbf 	bl	80026b8 <SysTick_Config>
 800273a:	0003      	movs	r3, r0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002752:	e155      	b.n	8002a00 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4091      	lsls	r1, r2
 800275e:	000a      	movs	r2, r1
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d100      	bne.n	800276c <HAL_GPIO_Init+0x28>
 800276a:	e146      	b.n	80029fa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d00b      	beq.n	800278c <HAL_GPIO_Init+0x48>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d007      	beq.n	800278c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002780:	2b11      	cmp	r3, #17
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b12      	cmp	r3, #18
 800278a:	d130      	bne.n	80027ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	409a      	lsls	r2, r3
 800279a:	0013      	movs	r3, r2
 800279c:	43da      	mvns	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	409a      	lsls	r2, r3
 80027ae:	0013      	movs	r3, r2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c2:	2201      	movs	r2, #1
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	409a      	lsls	r2, r3
 80027c8:	0013      	movs	r3, r2
 80027ca:	43da      	mvns	r2, r3
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	2201      	movs	r2, #1
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
 80027e0:	0013      	movs	r3, r2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	43da      	mvns	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	409a      	lsls	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0xea>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b12      	cmp	r3, #18
 800282c:	d123      	bne.n	8002876 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	08da      	lsrs	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3208      	adds	r2, #8
 8002836:	0092      	lsls	r2, r2, #2
 8002838:	58d3      	ldr	r3, [r2, r3]
 800283a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2207      	movs	r2, #7
 8002840:	4013      	ands	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	409a      	lsls	r2, r3
 8002848:	0013      	movs	r3, r2
 800284a:	43da      	mvns	r2, r3
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2107      	movs	r1, #7
 800285a:	400b      	ands	r3, r1
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	409a      	lsls	r2, r3
 8002860:	0013      	movs	r3, r2
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	6939      	ldr	r1, [r7, #16]
 8002874:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	2203      	movs	r2, #3
 8002882:	409a      	lsls	r2, r3
 8002884:	0013      	movs	r3, r2
 8002886:	43da      	mvns	r2, r3
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2203      	movs	r2, #3
 8002894:	401a      	ands	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	409a      	lsls	r2, r3
 800289c:	0013      	movs	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	055b      	lsls	r3, r3, #21
 80028b2:	4013      	ands	r3, r2
 80028b4:	d100      	bne.n	80028b8 <HAL_GPIO_Init+0x174>
 80028b6:	e0a0      	b.n	80029fa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b8:	4b57      	ldr	r3, [pc, #348]	; (8002a18 <HAL_GPIO_Init+0x2d4>)
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <HAL_GPIO_Init+0x2d4>)
 80028be:	2101      	movs	r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	619a      	str	r2, [r3, #24]
 80028c4:	4b54      	ldr	r3, [pc, #336]	; (8002a18 <HAL_GPIO_Init+0x2d4>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2201      	movs	r2, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028d0:	4a52      	ldr	r2, [pc, #328]	; (8002a1c <HAL_GPIO_Init+0x2d8>)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	589b      	ldr	r3, [r3, r2]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2203      	movs	r2, #3
 80028e2:	4013      	ands	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	220f      	movs	r2, #15
 80028e8:	409a      	lsls	r2, r3
 80028ea:	0013      	movs	r3, r2
 80028ec:	43da      	mvns	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	2390      	movs	r3, #144	; 0x90
 80028f8:	05db      	lsls	r3, r3, #23
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d019      	beq.n	8002932 <HAL_GPIO_Init+0x1ee>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a47      	ldr	r2, [pc, #284]	; (8002a20 <HAL_GPIO_Init+0x2dc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x1ea>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a46      	ldr	r2, [pc, #280]	; (8002a24 <HAL_GPIO_Init+0x2e0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x1e6>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a45      	ldr	r2, [pc, #276]	; (8002a28 <HAL_GPIO_Init+0x2e4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x1e2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a44      	ldr	r2, [pc, #272]	; (8002a2c <HAL_GPIO_Init+0x2e8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x1de>
 800291e:	2304      	movs	r3, #4
 8002920:	e008      	b.n	8002934 <HAL_GPIO_Init+0x1f0>
 8002922:	2305      	movs	r3, #5
 8002924:	e006      	b.n	8002934 <HAL_GPIO_Init+0x1f0>
 8002926:	2303      	movs	r3, #3
 8002928:	e004      	b.n	8002934 <HAL_GPIO_Init+0x1f0>
 800292a:	2302      	movs	r3, #2
 800292c:	e002      	b.n	8002934 <HAL_GPIO_Init+0x1f0>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_GPIO_Init+0x1f0>
 8002932:	2300      	movs	r3, #0
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	2103      	movs	r1, #3
 8002938:	400a      	ands	r2, r1
 800293a:	0092      	lsls	r2, r2, #2
 800293c:	4093      	lsls	r3, r2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002944:	4935      	ldr	r1, [pc, #212]	; (8002a1c <HAL_GPIO_Init+0x2d8>)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	3302      	adds	r3, #2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002952:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <HAL_GPIO_Init+0x2ec>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	43da      	mvns	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	025b      	lsls	r3, r3, #9
 800296a:	4013      	ands	r3, r2
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002976:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <HAL_GPIO_Init+0x2ec>)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800297c:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_GPIO_Init+0x2ec>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43da      	mvns	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	029b      	lsls	r3, r3, #10
 8002994:	4013      	ands	r3, r2
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_GPIO_Init+0x2ec>)
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_GPIO_Init+0x2ec>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43da      	mvns	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	035b      	lsls	r3, r3, #13
 80029be:	4013      	ands	r3, r2
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_GPIO_Init+0x2ec>)
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_GPIO_Init+0x2ec>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	43da      	mvns	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	039b      	lsls	r3, r3, #14
 80029e8:	4013      	ands	r3, r2
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_GPIO_Init+0x2ec>)
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3301      	adds	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	40da      	lsrs	r2, r3
 8002a08:	1e13      	subs	r3, r2, #0
 8002a0a:	d000      	beq.n	8002a0e <HAL_GPIO_Init+0x2ca>
 8002a0c:	e6a2      	b.n	8002754 <HAL_GPIO_Init+0x10>
  } 
}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b006      	add	sp, #24
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	48000400 	.word	0x48000400
 8002a24:	48000800 	.word	0x48000800
 8002a28:	48000c00 	.word	0x48000c00
 8002a2c:	48001000 	.word	0x48001000
 8002a30:	40010400 	.word	0x40010400

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	0008      	movs	r0, r1
 8002a3e:	0011      	movs	r1, r2
 8002a40:	1cbb      	adds	r3, r7, #2
 8002a42:	1c02      	adds	r2, r0, #0
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	1c7b      	adds	r3, r7, #1
 8002a48:	1c0a      	adds	r2, r1, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a4c:	1c7b      	adds	r3, r7, #1
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a54:	1cbb      	adds	r3, r7, #2
 8002a56:	881a      	ldrh	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a5e:	1cbb      	adds	r3, r7, #2
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	000a      	movs	r2, r1
 8002a78:	1cbb      	adds	r3, r7, #2
 8002a7a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a82:	1cbb      	adds	r3, r7, #2
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	041a      	lsls	r2, r3, #16
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	1cb9      	adds	r1, r7, #2
 8002a92:	8809      	ldrh	r1, [r1, #0]
 8002a94:	400b      	ands	r3, r1
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b004      	add	sp, #16
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f000 fb76 	bl	80031a4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d100      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x20>
 8002ac2:	e08e      	b.n	8002be2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ac4:	4bc5      	ldr	r3, [pc, #788]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	220c      	movs	r2, #12
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d00e      	beq.n	8002aee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ad0:	4bc2      	ldr	r3, [pc, #776]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	220c      	movs	r2, #12
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d117      	bne.n	8002b0c <HAL_RCC_OscConfig+0x68>
 8002adc:	4bbf      	ldr	r3, [pc, #764]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	23c0      	movs	r3, #192	; 0xc0
 8002ae2:	025b      	lsls	r3, r3, #9
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	025b      	lsls	r3, r3, #9
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d10e      	bne.n	8002b0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aee:	4bbb      	ldr	r3, [pc, #748]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	4013      	ands	r3, r2
 8002af8:	d100      	bne.n	8002afc <HAL_RCC_OscConfig+0x58>
 8002afa:	e071      	b.n	8002be0 <HAL_RCC_OscConfig+0x13c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d000      	beq.n	8002b06 <HAL_RCC_OscConfig+0x62>
 8002b04:	e06c      	b.n	8002be0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f000 fb4c 	bl	80031a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x80>
 8002b14:	4bb1      	ldr	r3, [pc, #708]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4bb0      	ldr	r3, [pc, #704]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b1a:	2180      	movs	r1, #128	; 0x80
 8002b1c:	0249      	lsls	r1, r1, #9
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e02f      	b.n	8002b84 <HAL_RCC_OscConfig+0xe0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0xa2>
 8002b2c:	4bab      	ldr	r3, [pc, #684]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4baa      	ldr	r3, [pc, #680]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b32:	49ab      	ldr	r1, [pc, #684]	; (8002de0 <HAL_RCC_OscConfig+0x33c>)
 8002b34:	400a      	ands	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	4ba8      	ldr	r3, [pc, #672]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4ba7      	ldr	r3, [pc, #668]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b3e:	49a9      	ldr	r1, [pc, #676]	; (8002de4 <HAL_RCC_OscConfig+0x340>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e01e      	b.n	8002b84 <HAL_RCC_OscConfig+0xe0>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10e      	bne.n	8002b6c <HAL_RCC_OscConfig+0xc8>
 8002b4e:	4ba3      	ldr	r3, [pc, #652]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4ba2      	ldr	r3, [pc, #648]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	02c9      	lsls	r1, r1, #11
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	4b9f      	ldr	r3, [pc, #636]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b9e      	ldr	r3, [pc, #632]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	0249      	lsls	r1, r1, #9
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xe0>
 8002b6c:	4b9b      	ldr	r3, [pc, #620]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b9a      	ldr	r3, [pc, #616]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b72:	499b      	ldr	r1, [pc, #620]	; (8002de0 <HAL_RCC_OscConfig+0x33c>)
 8002b74:	400a      	ands	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	4b98      	ldr	r3, [pc, #608]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b97      	ldr	r3, [pc, #604]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b7e:	4999      	ldr	r1, [pc, #612]	; (8002de4 <HAL_RCC_OscConfig+0x340>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d014      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f93e 	bl	8001e0c <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b96:	f7ff f939 	bl	8001e0c <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e2fd      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba8:	4b8c      	ldr	r3, [pc, #560]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	029b      	lsls	r3, r3, #10
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0xf2>
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7ff f929 	bl	8001e0c <HAL_GetTick>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7ff f924 	bl	8001e0c <HAL_GetTick>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e2e8      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	4b82      	ldr	r3, [pc, #520]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	029b      	lsls	r3, r3, #10
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x11c>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d100      	bne.n	8002bee <HAL_RCC_OscConfig+0x14a>
 8002bec:	e06c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bee:	4b7b      	ldr	r3, [pc, #492]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d00e      	beq.n	8002c16 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bf8:	4b78      	ldr	r3, [pc, #480]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d11f      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1a0>
 8002c04:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	23c0      	movs	r3, #192	; 0xc0
 8002c0a:	025b      	lsls	r3, r3, #9
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d116      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	4b71      	ldr	r3, [pc, #452]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_OscConfig+0x188>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e2bb      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b6b      	ldr	r3, [pc, #428]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	22f8      	movs	r2, #248	; 0xf8
 8002c32:	4393      	bics	r3, r2
 8002c34:	0019      	movs	r1, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00da      	lsls	r2, r3, #3
 8002c3c:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	e041      	b.n	8002cc8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d024      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4c:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b62      	ldr	r3, [pc, #392]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff f8d8 	bl	8001e0c <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7ff f8d3 	bl	8001e0c <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e297      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d0f1      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7e:	4b57      	ldr	r3, [pc, #348]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	22f8      	movs	r2, #248	; 0xf8
 8002c84:	4393      	bics	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	00da      	lsls	r2, r3, #3
 8002c8e:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e018      	b.n	8002cc8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b51      	ldr	r3, [pc, #324]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7ff f8b3 	bl	8001e0c <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cac:	f7ff f8ae 	bl	8001e0c <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e272      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d1f1      	bne.n	8002cac <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2208      	movs	r2, #8
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d036      	beq.n	8002d40 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d019      	beq.n	8002d0e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cda:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cde:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7ff f891 	bl	8001e0c <HAL_GetTick>
 8002cea:	0003      	movs	r3, r0
 8002cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7ff f88c 	bl	8001e0c <HAL_GetTick>
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e250      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d0f1      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x24c>
 8002d0c:	e018      	b.n	8002d40 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d12:	4b32      	ldr	r3, [pc, #200]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d14:	2101      	movs	r1, #1
 8002d16:	438a      	bics	r2, r1
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7ff f877 	bl	8001e0c <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d24:	f7ff f872 	bl	8001e0c <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e236      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d36:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d1f1      	bne.n	8002d24 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2204      	movs	r2, #4
 8002d46:	4013      	ands	r3, r2
 8002d48:	d100      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2a8>
 8002d4a:	e0b5      	b.n	8002eb8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4c:	231f      	movs	r3, #31
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	055b      	lsls	r3, r3, #21
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d111      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	0549      	lsls	r1, r1, #21
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	61da      	str	r2, [r3, #28]
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	055b      	lsls	r3, r3, #21
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d7c:	231f      	movs	r3, #31
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_RCC_OscConfig+0x344>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d11a      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_RCC_OscConfig+0x344>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_RCC_OscConfig+0x344>)
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	0049      	lsls	r1, r1, #1
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9e:	f7ff f835 	bl	8001e0c <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da8:	f7ff f830 	bl	8001e0c <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e1f4      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x344>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10e      	bne.n	8002dec <HAL_RCC_OscConfig+0x348>
 8002dce:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002dd0:	6a1a      	ldr	r2, [r3, #32]
 8002dd2:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	621a      	str	r2, [r3, #32]
 8002dda:	e035      	b.n	8002e48 <HAL_RCC_OscConfig+0x3a4>
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	fffeffff 	.word	0xfffeffff
 8002de4:	fffbffff 	.word	0xfffbffff
 8002de8:	40007000 	.word	0x40007000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10c      	bne.n	8002e0e <HAL_RCC_OscConfig+0x36a>
 8002df4:	4bca      	ldr	r3, [pc, #808]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	4bc9      	ldr	r3, [pc, #804]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	621a      	str	r2, [r3, #32]
 8002e00:	4bc7      	ldr	r3, [pc, #796]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	4bc6      	ldr	r3, [pc, #792]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e06:	2104      	movs	r1, #4
 8002e08:	438a      	bics	r2, r1
 8002e0a:	621a      	str	r2, [r3, #32]
 8002e0c:	e01c      	b.n	8002e48 <HAL_RCC_OscConfig+0x3a4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x38c>
 8002e16:	4bc2      	ldr	r3, [pc, #776]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	4bc1      	ldr	r3, [pc, #772]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	621a      	str	r2, [r3, #32]
 8002e22:	4bbf      	ldr	r3, [pc, #764]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	4bbe      	ldr	r3, [pc, #760]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	621a      	str	r2, [r3, #32]
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0x3a4>
 8002e30:	4bbb      	ldr	r3, [pc, #748]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e32:	6a1a      	ldr	r2, [r3, #32]
 8002e34:	4bba      	ldr	r3, [pc, #744]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	438a      	bics	r2, r1
 8002e3a:	621a      	str	r2, [r3, #32]
 8002e3c:	4bb8      	ldr	r3, [pc, #736]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	4bb7      	ldr	r3, [pc, #732]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e42:	2104      	movs	r1, #4
 8002e44:	438a      	bics	r2, r1
 8002e46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d014      	beq.n	8002e7a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7fe ffdc 	bl	8001e0c <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	e009      	b.n	8002e6e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fe ffd7 	bl	8001e0c <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	4aaf      	ldr	r2, [pc, #700]	; (8003124 <HAL_RCC_OscConfig+0x680>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e19a      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6e:	4bac      	ldr	r3, [pc, #688]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x3b6>
 8002e78:	e013      	b.n	8002ea2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7a:	f7fe ffc7 	bl	8001e0c <HAL_GetTick>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e82:	e009      	b.n	8002e98 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7fe ffc2 	bl	8001e0c <HAL_GetTick>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	4aa5      	ldr	r2, [pc, #660]	; (8003124 <HAL_RCC_OscConfig+0x680>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e185      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e98:	4ba1      	ldr	r3, [pc, #644]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ea2:	231f      	movs	r3, #31
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eac:	4b9c      	ldr	r3, [pc, #624]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	4b9b      	ldr	r3, [pc, #620]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002eb2:	499d      	ldr	r1, [pc, #628]	; (8003128 <HAL_RCC_OscConfig+0x684>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d063      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d12a      	bne.n	8002f20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002eca:	4b95      	ldr	r3, [pc, #596]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ece:	4b94      	ldr	r3, [pc, #592]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ed6:	4b92      	ldr	r3, [pc, #584]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eda:	4b91      	ldr	r3, [pc, #580]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002edc:	2101      	movs	r1, #1
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe ff93 	bl	8001e0c <HAL_GetTick>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002eec:	f7fe ff8e 	bl	8001e0c <HAL_GetTick>
 8002ef0:	0002      	movs	r2, r0
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e152      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002efe:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	2202      	movs	r2, #2
 8002f04:	4013      	ands	r3, r2
 8002f06:	d0f1      	beq.n	8002eec <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f08:	4b85      	ldr	r3, [pc, #532]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0c:	22f8      	movs	r2, #248	; 0xf8
 8002f0e:	4393      	bics	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	00da      	lsls	r2, r3, #3
 8002f18:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f1e:	e034      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	3305      	adds	r3, #5
 8002f26:	d111      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002f28:	4b7d      	ldr	r3, [pc, #500]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2c:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f2e:	2104      	movs	r1, #4
 8002f30:	438a      	bics	r2, r1
 8002f32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f34:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	22f8      	movs	r2, #248	; 0xf8
 8002f3a:	4393      	bics	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	00da      	lsls	r2, r3, #3
 8002f44:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f46:	430a      	orrs	r2, r1
 8002f48:	635a      	str	r2, [r3, #52]	; 0x34
 8002f4a:	e01e      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f4c:	4b74      	ldr	r3, [pc, #464]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f50:	4b73      	ldr	r3, [pc, #460]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f52:	2104      	movs	r1, #4
 8002f54:	430a      	orrs	r2, r1
 8002f56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f58:	4b71      	ldr	r3, [pc, #452]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5c:	4b70      	ldr	r3, [pc, #448]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f5e:	2101      	movs	r1, #1
 8002f60:	438a      	bics	r2, r1
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f64:	f7fe ff52 	bl	8001e0c <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f6e:	f7fe ff4d 	bl	8001e0c <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e111      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f80:	4b67      	ldr	r3, [pc, #412]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	2202      	movs	r2, #2
 8002f86:	4013      	ands	r3, r2
 8002f88:	d1f1      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	4013      	ands	r3, r2
 8002f92:	d05c      	beq.n	800304e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f94:	4b62      	ldr	r3, [pc, #392]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	220c      	movs	r2, #12
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b0c      	cmp	r3, #12
 8002f9e:	d00e      	beq.n	8002fbe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002fa0:	4b5f      	ldr	r3, [pc, #380]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	220c      	movs	r2, #12
 8002fa6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d114      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002fac:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	23c0      	movs	r3, #192	; 0xc0
 8002fb2:	025b      	lsls	r3, r3, #9
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	23c0      	movs	r3, #192	; 0xc0
 8002fb8:	025b      	lsls	r3, r3, #9
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002fbe:	4b58      	ldr	r3, [pc, #352]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	025b      	lsls	r3, r3, #9
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d040      	beq.n	800304c <HAL_RCC_OscConfig+0x5a8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d03c      	beq.n	800304c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0e6      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01b      	beq.n	8003016 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe2:	4b4f      	ldr	r3, [pc, #316]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	0249      	lsls	r1, r1, #9
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe ff0e 	bl	8001e0c <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff6:	f7fe ff09 	bl	8001e0c <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0cd      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003008:	4b45      	ldr	r3, [pc, #276]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 800300a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	025b      	lsls	r3, r3, #9
 8003010:	4013      	ands	r3, r2
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x552>
 8003014:	e01b      	b.n	800304e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003016:	4b42      	ldr	r3, [pc, #264]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8003018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 800301c:	4943      	ldr	r1, [pc, #268]	; (800312c <HAL_RCC_OscConfig+0x688>)
 800301e:	400a      	ands	r2, r1
 8003020:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe fef3 	bl	8001e0c <HAL_GetTick>
 8003026:	0003      	movs	r3, r0
 8003028:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800302c:	f7fe feee 	bl	8001e0c <HAL_GetTick>
 8003030:	0002      	movs	r2, r0
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0b2      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800303e:	4b38      	ldr	r3, [pc, #224]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8003040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	025b      	lsls	r3, r3, #9
 8003046:	4013      	ands	r3, r2
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x588>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800304c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d100      	bne.n	8003058 <HAL_RCC_OscConfig+0x5b4>
 8003056:	e0a4      	b.n	80031a2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003058:	4b31      	ldr	r3, [pc, #196]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	220c      	movs	r2, #12
 800305e:	4013      	ands	r3, r2
 8003060:	2b08      	cmp	r3, #8
 8003062:	d100      	bne.n	8003066 <HAL_RCC_OscConfig+0x5c2>
 8003064:	e078      	b.n	8003158 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b02      	cmp	r3, #2
 800306c:	d14c      	bne.n	8003108 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8003074:	492e      	ldr	r1, [pc, #184]	; (8003130 <HAL_RCC_OscConfig+0x68c>)
 8003076:	400a      	ands	r2, r1
 8003078:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe fec7 	bl	8001e0c <HAL_GetTick>
 800307e:	0003      	movs	r3, r0
 8003080:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe fec2 	bl	8001e0c <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e086      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	049b      	lsls	r3, r3, #18
 800309e:	4013      	ands	r3, r2
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a2:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	220f      	movs	r2, #15
 80030a8:	4393      	bics	r3, r2
 80030aa:	0019      	movs	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030b2:	430a      	orrs	r2, r1
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <HAL_RCC_OscConfig+0x690>)
 80030bc:	4013      	ands	r3, r2
 80030be:	0019      	movs	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	431a      	orrs	r2, r3
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	0449      	lsls	r1, r1, #17
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fe95 	bl	8001e0c <HAL_GetTick>
 80030e2:	0003      	movs	r3, r0
 80030e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe fe90 	bl	8001e0c <HAL_GetTick>
 80030ec:	0002      	movs	r2, r0
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e054      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	049b      	lsls	r3, r3, #18
 8003102:	4013      	ands	r3, r2
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x644>
 8003106:	e04c      	b.n	80031a2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <HAL_RCC_OscConfig+0x67c>)
 800310e:	4908      	ldr	r1, [pc, #32]	; (8003130 <HAL_RCC_OscConfig+0x68c>)
 8003110:	400a      	ands	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe fe7a 	bl	8001e0c <HAL_GetTick>
 8003118:	0003      	movs	r3, r0
 800311a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	e015      	b.n	800314a <HAL_RCC_OscConfig+0x6a6>
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	40021000 	.word	0x40021000
 8003124:	00001388 	.word	0x00001388
 8003128:	efffffff 	.word	0xefffffff
 800312c:	fffeffff 	.word	0xfffeffff
 8003130:	feffffff 	.word	0xfeffffff
 8003134:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fe68 	bl	8001e0c <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e02c      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_RCC_OscConfig+0x708>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	049b      	lsls	r3, r3, #18
 8003152:	4013      	ands	r3, r2
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x694>
 8003156:	e024      	b.n	80031a2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e01f      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_RCC_OscConfig+0x708>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_RCC_OscConfig+0x708>)
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	23c0      	movs	r3, #192	; 0xc0
 8003174:	025b      	lsls	r3, r3, #9
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	429a      	cmp	r2, r3
 800317e:	d10e      	bne.n	800319e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	220f      	movs	r2, #15
 8003184:	401a      	ands	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d107      	bne.n	800319e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	23f0      	movs	r3, #240	; 0xf0
 8003192:	039b      	lsls	r3, r3, #14
 8003194:	401a      	ands	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b008      	add	sp, #32
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000

080031b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0bf      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	4b61      	ldr	r3, [pc, #388]	; (800334c <HAL_RCC_ClockConfig+0x19c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2201      	movs	r2, #1
 80031ca:	4013      	ands	r3, r2
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d911      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b5e      	ldr	r3, [pc, #376]	; (800334c <HAL_RCC_ClockConfig+0x19c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	4393      	bics	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	4b5b      	ldr	r3, [pc, #364]	; (800334c <HAL_RCC_ClockConfig+0x19c>)
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e4:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_ClockConfig+0x19c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2201      	movs	r2, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0a6      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d015      	beq.n	800322c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2204      	movs	r2, #4
 8003206:	4013      	ands	r3, r2
 8003208:	d006      	beq.n	8003218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003210:	21e0      	movs	r1, #224	; 0xe0
 8003212:	00c9      	lsls	r1, r1, #3
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003218:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	22f0      	movs	r2, #240	; 0xf0
 800321e:	4393      	bics	r3, r2
 8003220:	0019      	movs	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	4b4a      	ldr	r3, [pc, #296]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	4013      	ands	r3, r2
 8003234:	d04c      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	4b44      	ldr	r3, [pc, #272]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	029b      	lsls	r3, r3, #10
 8003246:	4013      	ands	r3, r2
 8003248:	d120      	bne.n	800328c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e07a      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	4b3e      	ldr	r3, [pc, #248]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	049b      	lsls	r3, r3, #18
 800325e:	4013      	ands	r3, r2
 8003260:	d114      	bne.n	800328c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06e      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	025b      	lsls	r3, r3, #9
 8003276:	4013      	ands	r3, r2
 8003278:	d108      	bne.n	800328c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e062      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	4b34      	ldr	r3, [pc, #208]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2202      	movs	r2, #2
 8003284:	4013      	ands	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e05b      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328c:	4b30      	ldr	r3, [pc, #192]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	4393      	bics	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a0:	f7fe fdb4 	bl	8001e0c <HAL_GetTick>
 80032a4:	0003      	movs	r3, r0
 80032a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a8:	e009      	b.n	80032be <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032aa:	f7fe fdaf 	bl	8001e0c <HAL_GetTick>
 80032ae:	0002      	movs	r2, r0
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <HAL_RCC_ClockConfig+0x1a4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e042      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	220c      	movs	r2, #12
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1ec      	bne.n	80032aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b1e      	ldr	r3, [pc, #120]	; (800334c <HAL_RCC_ClockConfig+0x19c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d211      	bcs.n	8003302 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_RCC_ClockConfig+0x19c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	4393      	bics	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	4b18      	ldr	r3, [pc, #96]	; (800334c <HAL_RCC_ClockConfig+0x19c>)
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_RCC_ClockConfig+0x19c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e020      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2204      	movs	r2, #4
 8003308:	4013      	ands	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <HAL_RCC_ClockConfig+0x1a8>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003320:	f000 f820 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003324:	0001      	movs	r1, r0
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	220f      	movs	r2, #15
 800332e:	4013      	ands	r3, r2
 8003330:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_RCC_ClockConfig+0x1ac>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	000a      	movs	r2, r1
 8003336:	40da      	lsrs	r2, r3
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1b0>)
 800333a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fe fd1f 	bl	8001d80 <HAL_InitTick>
  
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40022000 	.word	0x40022000
 8003350:	40021000 	.word	0x40021000
 8003354:	00001388 	.word	0x00001388
 8003358:	fffff8ff 	.word	0xfffff8ff
 800335c:	080042d0 	.word	0x080042d0
 8003360:	20000000 	.word	0x20000000

08003364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b08f      	sub	sp, #60	; 0x3c
 8003368:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800336a:	2314      	movs	r3, #20
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	4a37      	ldr	r2, [pc, #220]	; (800344c <HAL_RCC_GetSysClockFreq+0xe8>)
 8003370:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003372:	c313      	stmia	r3!, {r0, r1, r4}
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	4a35      	ldr	r2, [pc, #212]	; (8003450 <HAL_RCC_GetSysClockFreq+0xec>)
 800337c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800337e:	c313      	stmia	r3!, {r0, r1, r4}
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003388:	2300      	movs	r3, #0
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
 800338c:	2300      	movs	r3, #0
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003398:	4b2e      	ldr	r3, [pc, #184]	; (8003454 <HAL_RCC_GetSysClockFreq+0xf0>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	220c      	movs	r2, #12
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d006      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x52>
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d043      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0xd0>
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d144      	bne.n	800343a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033b0:	4b29      	ldr	r3, [pc, #164]	; (8003458 <HAL_RCC_GetSysClockFreq+0xf4>)
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033b4:	e044      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	0c9b      	lsrs	r3, r3, #18
 80033ba:	220f      	movs	r2, #15
 80033bc:	4013      	ands	r3, r2
 80033be:	2214      	movs	r2, #20
 80033c0:	18ba      	adds	r2, r7, r2
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80033c6:	4b23      	ldr	r3, [pc, #140]	; (8003454 <HAL_RCC_GetSysClockFreq+0xf0>)
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	220f      	movs	r2, #15
 80033cc:	4013      	ands	r3, r2
 80033ce:	1d3a      	adds	r2, r7, #4
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d6:	23c0      	movs	r3, #192	; 0xc0
 80033d8:	025b      	lsls	r3, r3, #9
 80033da:	401a      	ands	r2, r3
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	025b      	lsls	r3, r3, #9
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d109      	bne.n	80033f8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033e6:	481c      	ldr	r0, [pc, #112]	; (8003458 <HAL_RCC_GetSysClockFreq+0xf4>)
 80033e8:	f7fc fe8e 	bl	8000108 <__udivsi3>
 80033ec:	0003      	movs	r3, r0
 80033ee:	001a      	movs	r2, r3
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	4353      	muls	r3, r2
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
 80033f6:	e01a      	b.n	800342e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80033f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033fa:	23c0      	movs	r3, #192	; 0xc0
 80033fc:	025b      	lsls	r3, r3, #9
 80033fe:	401a      	ands	r2, r3
 8003400:	23c0      	movs	r3, #192	; 0xc0
 8003402:	025b      	lsls	r3, r3, #9
 8003404:	429a      	cmp	r2, r3
 8003406:	d109      	bne.n	800341c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800340a:	4814      	ldr	r0, [pc, #80]	; (800345c <HAL_RCC_GetSysClockFreq+0xf8>)
 800340c:	f7fc fe7c 	bl	8000108 <__udivsi3>
 8003410:	0003      	movs	r3, r0
 8003412:	001a      	movs	r2, r3
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	4353      	muls	r3, r2
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
 800341a:	e008      	b.n	800342e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800341c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341e:	480e      	ldr	r0, [pc, #56]	; (8003458 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003420:	f7fc fe72 	bl	8000108 <__udivsi3>
 8003424:	0003      	movs	r3, r0
 8003426:	001a      	movs	r2, r3
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	4353      	muls	r3, r2
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003432:	e005      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003438:	e002      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_RCC_GetSysClockFreq+0xf4>)
 800343c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800343e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b00f      	add	sp, #60	; 0x3c
 8003448:	bd90      	pop	{r4, r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	08004230 	.word	0x08004230
 8003450:	08004240 	.word	0x08004240
 8003454:	40021000 	.word	0x40021000
 8003458:	007a1200 	.word	0x007a1200
 800345c:	02dc6c00 	.word	0x02dc6c00

08003460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e042      	b.n	80034f8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223d      	movs	r2, #61	; 0x3d
 8003476:	5c9b      	ldrb	r3, [r3, r2]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d107      	bne.n	800348e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	223c      	movs	r2, #60	; 0x3c
 8003482:	2100      	movs	r1, #0
 8003484:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0018      	movs	r0, r3
 800348a:	f7fe fbbf 	bl	8001c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	223d      	movs	r2, #61	; 0x3d
 8003492:	2102      	movs	r1, #2
 8003494:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3304      	adds	r3, #4
 800349e:	0019      	movs	r1, r3
 80034a0:	0010      	movs	r0, r2
 80034a2:	f000 faf5 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2246      	movs	r2, #70	; 0x46
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	223e      	movs	r2, #62	; 0x3e
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	223f      	movs	r2, #63	; 0x3f
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2240      	movs	r2, #64	; 0x40
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2241      	movs	r2, #65	; 0x41
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2242      	movs	r2, #66	; 0x42
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2243      	movs	r2, #67	; 0x43
 80034da:	2101      	movs	r1, #1
 80034dc:	5499      	strb	r1, [r3, r2]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2244      	movs	r2, #68	; 0x44
 80034e2:	2101      	movs	r1, #1
 80034e4:	5499      	strb	r1, [r3, r2]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2245      	movs	r2, #69	; 0x45
 80034ea:	2101      	movs	r1, #1
 80034ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	223d      	movs	r2, #61	; 0x3d
 80034f2:	2101      	movs	r1, #1
 80034f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	223d      	movs	r2, #61	; 0x3d
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d001      	beq.n	8003518 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e033      	b.n	8003580 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	223d      	movs	r2, #61	; 0x3d
 800351c:	2102      	movs	r1, #2
 800351e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a18      	ldr	r2, [pc, #96]	; (8003588 <HAL_TIM_Base_Start+0x88>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00f      	beq.n	800354a <HAL_TIM_Base_Start+0x4a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	05db      	lsls	r3, r3, #23
 8003532:	429a      	cmp	r2, r3
 8003534:	d009      	beq.n	800354a <HAL_TIM_Base_Start+0x4a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a14      	ldr	r2, [pc, #80]	; (800358c <HAL_TIM_Base_Start+0x8c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_TIM_Base_Start+0x4a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a12      	ldr	r2, [pc, #72]	; (8003590 <HAL_TIM_Base_Start+0x90>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d111      	bne.n	800356e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2207      	movs	r2, #7
 8003552:	4013      	ands	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b06      	cmp	r3, #6
 800355a:	d010      	beq.n	800357e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2101      	movs	r1, #1
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	e007      	b.n	800357e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b004      	add	sp, #16
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40000400 	.word	0x40000400
 8003590:	40014000 	.word	0x40014000

08003594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e042      	b.n	800362c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	223d      	movs	r2, #61	; 0x3d
 80035aa:	5c9b      	ldrb	r3, [r3, r2]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	223c      	movs	r2, #60	; 0x3c
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f000 f839 	bl	8003634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	223d      	movs	r2, #61	; 0x3d
 80035c6:	2102      	movs	r1, #2
 80035c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	0019      	movs	r1, r3
 80035d4:	0010      	movs	r0, r2
 80035d6:	f000 fa5b 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2246      	movs	r2, #70	; 0x46
 80035de:	2101      	movs	r1, #1
 80035e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	223e      	movs	r2, #62	; 0x3e
 80035e6:	2101      	movs	r1, #1
 80035e8:	5499      	strb	r1, [r3, r2]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	223f      	movs	r2, #63	; 0x3f
 80035ee:	2101      	movs	r1, #1
 80035f0:	5499      	strb	r1, [r3, r2]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2240      	movs	r2, #64	; 0x40
 80035f6:	2101      	movs	r1, #1
 80035f8:	5499      	strb	r1, [r3, r2]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2241      	movs	r2, #65	; 0x41
 80035fe:	2101      	movs	r1, #1
 8003600:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2242      	movs	r2, #66	; 0x42
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2243      	movs	r2, #67	; 0x43
 800360e:	2101      	movs	r1, #1
 8003610:	5499      	strb	r1, [r3, r2]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2244      	movs	r2, #68	; 0x44
 8003616:	2101      	movs	r1, #1
 8003618:	5499      	strb	r1, [r3, r2]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2245      	movs	r2, #69	; 0x45
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	223d      	movs	r2, #61	; 0x3d
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d108      	bne.n	8003666 <HAL_TIM_PWM_Start+0x22>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	223e      	movs	r2, #62	; 0x3e
 8003658:	5c9b      	ldrb	r3, [r3, r2]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	4193      	sbcs	r3, r2
 8003662:	b2db      	uxtb	r3, r3
 8003664:	e01f      	b.n	80036a6 <HAL_TIM_PWM_Start+0x62>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d108      	bne.n	800367e <HAL_TIM_PWM_Start+0x3a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	223f      	movs	r2, #63	; 0x3f
 8003670:	5c9b      	ldrb	r3, [r3, r2]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	1e5a      	subs	r2, r3, #1
 8003678:	4193      	sbcs	r3, r2
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e013      	b.n	80036a6 <HAL_TIM_PWM_Start+0x62>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d108      	bne.n	8003696 <HAL_TIM_PWM_Start+0x52>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	5c9b      	ldrb	r3, [r3, r2]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	1e5a      	subs	r2, r3, #1
 8003690:	4193      	sbcs	r3, r2
 8003692:	b2db      	uxtb	r3, r3
 8003694:	e007      	b.n	80036a6 <HAL_TIM_PWM_Start+0x62>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2241      	movs	r2, #65	; 0x41
 800369a:	5c9b      	ldrb	r3, [r3, r2]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	4193      	sbcs	r3, r2
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e074      	b.n	8003798 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0x7a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	223e      	movs	r2, #62	; 0x3e
 80036b8:	2102      	movs	r1, #2
 80036ba:	5499      	strb	r1, [r3, r2]
 80036bc:	e013      	b.n	80036e6 <HAL_TIM_PWM_Start+0xa2>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0x8a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	223f      	movs	r2, #63	; 0x3f
 80036c8:	2102      	movs	r1, #2
 80036ca:	5499      	strb	r1, [r3, r2]
 80036cc:	e00b      	b.n	80036e6 <HAL_TIM_PWM_Start+0xa2>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0x9a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2240      	movs	r2, #64	; 0x40
 80036d8:	2102      	movs	r1, #2
 80036da:	5499      	strb	r1, [r3, r2]
 80036dc:	e003      	b.n	80036e6 <HAL_TIM_PWM_Start+0xa2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2241      	movs	r2, #65	; 0x41
 80036e2:	2102      	movs	r1, #2
 80036e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6839      	ldr	r1, [r7, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 fce4 	bl	80040bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a29      	ldr	r2, [pc, #164]	; (80037a0 <HAL_TIM_PWM_Start+0x15c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_TIM_PWM_Start+0xd8>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a28      	ldr	r2, [pc, #160]	; (80037a4 <HAL_TIM_PWM_Start+0x160>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_TIM_PWM_Start+0xd8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <HAL_TIM_PWM_Start+0x164>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_TIM_PWM_Start+0xd8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a25      	ldr	r2, [pc, #148]	; (80037ac <HAL_TIM_PWM_Start+0x168>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d101      	bne.n	8003720 <HAL_TIM_PWM_Start+0xdc>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <HAL_TIM_PWM_Start+0xde>
 8003720:	2300      	movs	r3, #0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2180      	movs	r1, #128	; 0x80
 8003732:	0209      	lsls	r1, r1, #8
 8003734:	430a      	orrs	r2, r1
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_TIM_PWM_Start+0x15c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00f      	beq.n	8003762 <HAL_TIM_PWM_Start+0x11e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	05db      	lsls	r3, r3, #23
 800374a:	429a      	cmp	r2, r3
 800374c:	d009      	beq.n	8003762 <HAL_TIM_PWM_Start+0x11e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <HAL_TIM_PWM_Start+0x16c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_TIM_PWM_Start+0x11e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <HAL_TIM_PWM_Start+0x160>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2207      	movs	r2, #7
 800376a:	4013      	ands	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b06      	cmp	r3, #6
 8003772:	d010      	beq.n	8003796 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003784:	e007      	b.n	8003796 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2101      	movs	r1, #1
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b004      	add	sp, #16
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40014400 	.word	0x40014400
 80037ac:	40014800 	.word	0x40014800
 80037b0:	40000400 	.word	0x40000400

080037b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	223c      	movs	r2, #60	; 0x3c
 80037c4:	5c9b      	ldrb	r3, [r3, r2]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e09c      	b.n	8003908 <HAL_TIM_PWM_ConfigChannel+0x154>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	223c      	movs	r2, #60	; 0x3c
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d029      	beq.n	8003830 <HAL_TIM_PWM_ConfigChannel+0x7c>
 80037dc:	d802      	bhi.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x30>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80037e2:	e08c      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d046      	beq.n	8003876 <HAL_TIM_PWM_ConfigChannel+0xc2>
 80037e8:	2b0c      	cmp	r3, #12
 80037ea:	d065      	beq.n	80038b8 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 80037ec:	e087      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	0011      	movs	r1, r2
 80037f6:	0018      	movs	r0, r3
 80037f8:	f000 f9ca 	bl	8003b90 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2108      	movs	r1, #8
 8003808:	430a      	orrs	r2, r1
 800380a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2104      	movs	r1, #4
 8003818:	438a      	bics	r2, r1
 800381a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6999      	ldr	r1, [r3, #24]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	619a      	str	r2, [r3, #24]
      break;
 800382e:	e066      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	0011      	movs	r1, r2
 8003838:	0018      	movs	r0, r3
 800383a:	f000 fa31 	bl	8003ca0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2180      	movs	r1, #128	; 0x80
 800384a:	0109      	lsls	r1, r1, #4
 800384c:	430a      	orrs	r2, r1
 800384e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	492d      	ldr	r1, [pc, #180]	; (8003910 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 800385c:	400a      	ands	r2, r1
 800385e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6999      	ldr	r1, [r3, #24]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	021a      	lsls	r2, r3, #8
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	619a      	str	r2, [r3, #24]
      break;
 8003874:	e043      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	0011      	movs	r1, r2
 800387e:	0018      	movs	r0, r3
 8003880:	f000 fa92 	bl	8003da8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2108      	movs	r1, #8
 8003890:	430a      	orrs	r2, r1
 8003892:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2104      	movs	r1, #4
 80038a0:	438a      	bics	r2, r1
 80038a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69d9      	ldr	r1, [r3, #28]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	61da      	str	r2, [r3, #28]
      break;
 80038b6:	e022      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	0011      	movs	r1, r2
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 faf7 	bl	8003eb4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	0109      	lsls	r1, r1, #4
 80038d4:	430a      	orrs	r2, r1
 80038d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	490b      	ldr	r1, [pc, #44]	; (8003910 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69d9      	ldr	r1, [r3, #28]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	021a      	lsls	r2, r3, #8
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	61da      	str	r2, [r3, #28]
      break;
 80038fc:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	223c      	movs	r2, #60	; 0x3c
 8003902:	2100      	movs	r1, #0
 8003904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b004      	add	sp, #16
 800390e:	bd80      	pop	{r7, pc}
 8003910:	fffffbff 	.word	0xfffffbff

08003914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	223c      	movs	r2, #60	; 0x3c
 8003922:	5c9b      	ldrb	r3, [r3, r2]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_TIM_ConfigClockSource+0x18>
 8003928:	2302      	movs	r3, #2
 800392a:	e0ab      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0x170>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	223c      	movs	r2, #60	; 0x3c
 8003930:	2101      	movs	r1, #1
 8003932:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	223d      	movs	r2, #61	; 0x3d
 8003938:	2102      	movs	r1, #2
 800393a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2277      	movs	r2, #119	; 0x77
 8003948:	4393      	bics	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a4f      	ldr	r2, [pc, #316]	; (8003a8c <HAL_TIM_ConfigClockSource+0x178>)
 8003950:	4013      	ands	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d100      	bne.n	8003966 <HAL_TIM_ConfigClockSource+0x52>
 8003964:	e06b      	b.n	8003a3e <HAL_TIM_ConfigClockSource+0x12a>
 8003966:	d80e      	bhi.n	8003986 <HAL_TIM_ConfigClockSource+0x72>
 8003968:	2b10      	cmp	r3, #16
 800396a:	d100      	bne.n	800396e <HAL_TIM_ConfigClockSource+0x5a>
 800396c:	e077      	b.n	8003a5e <HAL_TIM_ConfigClockSource+0x14a>
 800396e:	d803      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x64>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d100      	bne.n	8003976 <HAL_TIM_ConfigClockSource+0x62>
 8003974:	e073      	b.n	8003a5e <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003976:	e07c      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003978:	2b20      	cmp	r3, #32
 800397a:	d100      	bne.n	800397e <HAL_TIM_ConfigClockSource+0x6a>
 800397c:	e06f      	b.n	8003a5e <HAL_TIM_ConfigClockSource+0x14a>
 800397e:	2b30      	cmp	r3, #48	; 0x30
 8003980:	d100      	bne.n	8003984 <HAL_TIM_ConfigClockSource+0x70>
 8003982:	e06c      	b.n	8003a5e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003984:	e075      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003986:	2b70      	cmp	r3, #112	; 0x70
 8003988:	d00e      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0x94>
 800398a:	d804      	bhi.n	8003996 <HAL_TIM_ConfigClockSource+0x82>
 800398c:	2b50      	cmp	r3, #80	; 0x50
 800398e:	d036      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0xea>
 8003990:	2b60      	cmp	r3, #96	; 0x60
 8003992:	d044      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003994:	e06d      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003996:	2280      	movs	r2, #128	; 0x80
 8003998:	0152      	lsls	r2, r2, #5
 800399a:	4293      	cmp	r3, r2
 800399c:	d068      	beq.n	8003a70 <HAL_TIM_ConfigClockSource+0x15c>
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	0192      	lsls	r2, r2, #6
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d017      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80039a6:	e064      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f000 fb60 	bl	800407c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2277      	movs	r2, #119	; 0x77
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	609a      	str	r2, [r3, #8]
      break;
 80039d4:	e04d      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6899      	ldr	r1, [r3, #8]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f000 fb49 	bl	800407c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2180      	movs	r1, #128	; 0x80
 80039f6:	01c9      	lsls	r1, r1, #7
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
      break;
 80039fc:	e039      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	f000 fabc 	bl	8003f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2150      	movs	r1, #80	; 0x50
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 fb16 	bl	8004048 <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e029      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	f000 fada 	bl	8003fe4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2160      	movs	r1, #96	; 0x60
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 fb06 	bl	8004048 <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e019      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	f000 fa9c 	bl	8003f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2140      	movs	r1, #64	; 0x40
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 faf6 	bl	8004048 <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e009      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	0019      	movs	r1, r3
 8003a68:	0010      	movs	r0, r2
 8003a6a:	f000 faed 	bl	8004048 <TIM_ITRx_SetConfig>
        break;
 8003a6e:	e000      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003a70:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	223d      	movs	r2, #61	; 0x3d
 8003a76:	2101      	movs	r1, #1
 8003a78:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	223c      	movs	r2, #60	; 0x3c
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	ffff00ff 	.word	0xffff00ff

08003a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a34      	ldr	r2, [pc, #208]	; (8003b74 <TIM_Base_SetConfig+0xe4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d008      	beq.n	8003aba <TIM_Base_SetConfig+0x2a>
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	05db      	lsls	r3, r3, #23
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d003      	beq.n	8003aba <TIM_Base_SetConfig+0x2a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a30      	ldr	r2, [pc, #192]	; (8003b78 <TIM_Base_SetConfig+0xe8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d108      	bne.n	8003acc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2270      	movs	r2, #112	; 0x70
 8003abe:	4393      	bics	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <TIM_Base_SetConfig+0xe4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d018      	beq.n	8003b06 <TIM_Base_SetConfig+0x76>
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	05db      	lsls	r3, r3, #23
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d013      	beq.n	8003b06 <TIM_Base_SetConfig+0x76>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a25      	ldr	r2, [pc, #148]	; (8003b78 <TIM_Base_SetConfig+0xe8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00f      	beq.n	8003b06 <TIM_Base_SetConfig+0x76>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a24      	ldr	r2, [pc, #144]	; (8003b7c <TIM_Base_SetConfig+0xec>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <TIM_Base_SetConfig+0x76>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a23      	ldr	r2, [pc, #140]	; (8003b80 <TIM_Base_SetConfig+0xf0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <TIM_Base_SetConfig+0x76>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <TIM_Base_SetConfig+0xf4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_Base_SetConfig+0x76>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a21      	ldr	r2, [pc, #132]	; (8003b88 <TIM_Base_SetConfig+0xf8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <TIM_Base_SetConfig+0xfc>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2280      	movs	r2, #128	; 0x80
 8003b1c:	4393      	bics	r3, r2
 8003b1e:	001a      	movs	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <TIM_Base_SetConfig+0xe4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00b      	beq.n	8003b5e <TIM_Base_SetConfig+0xce>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <TIM_Base_SetConfig+0xf0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <TIM_Base_SetConfig+0xce>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <TIM_Base_SetConfig+0xf4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d003      	beq.n	8003b5e <TIM_Base_SetConfig+0xce>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a0b      	ldr	r2, [pc, #44]	; (8003b88 <TIM_Base_SetConfig+0xf8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d103      	bne.n	8003b66 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	615a      	str	r2, [r3, #20]
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b004      	add	sp, #16
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40002000 	.word	0x40002000
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800
 8003b8c:	fffffcff 	.word	0xfffffcff

08003b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4393      	bics	r3, r2
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2270      	movs	r2, #112	; 0x70
 8003bbe:	4393      	bics	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	4393      	bics	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	4393      	bics	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <TIM_OC1_SetConfig+0xf8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00b      	beq.n	8003c06 <TIM_OC1_SetConfig+0x76>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <TIM_OC1_SetConfig+0xfc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <TIM_OC1_SetConfig+0x76>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <TIM_OC1_SetConfig+0x100>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <TIM_OC1_SetConfig+0x76>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a24      	ldr	r2, [pc, #144]	; (8003c94 <TIM_OC1_SetConfig+0x104>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10c      	bne.n	8003c20 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	4393      	bics	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <TIM_OC1_SetConfig+0xf8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <TIM_OC1_SetConfig+0xb0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <TIM_OC1_SetConfig+0xfc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_OC1_SetConfig+0xb0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <TIM_OC1_SetConfig+0x100>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_OC1_SetConfig+0xb0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <TIM_OC1_SetConfig+0x104>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d111      	bne.n	8003c64 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4a15      	ldr	r2, [pc, #84]	; (8003c98 <TIM_OC1_SetConfig+0x108>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <TIM_OC1_SetConfig+0x10c>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b006      	add	sp, #24
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	40014400 	.word	0x40014400
 8003c94:	40014800 	.word	0x40014800
 8003c98:	fffffeff 	.word	0xfffffeff
 8003c9c:	fffffdff 	.word	0xfffffdff

08003ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	2210      	movs	r2, #16
 8003cb0:	4393      	bics	r3, r2
 8003cb2:	001a      	movs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a2e      	ldr	r2, [pc, #184]	; (8003d88 <TIM_OC2_SetConfig+0xe8>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a2d      	ldr	r2, [pc, #180]	; (8003d8c <TIM_OC2_SetConfig+0xec>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	4393      	bics	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a24      	ldr	r2, [pc, #144]	; (8003d90 <TIM_OC2_SetConfig+0xf0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10d      	bne.n	8003d1e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2280      	movs	r2, #128	; 0x80
 8003d06:	4393      	bics	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2240      	movs	r2, #64	; 0x40
 8003d1a:	4393      	bics	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a1b      	ldr	r2, [pc, #108]	; (8003d90 <TIM_OC2_SetConfig+0xf0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_OC2_SetConfig+0x9e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1a      	ldr	r2, [pc, #104]	; (8003d94 <TIM_OC2_SetConfig+0xf4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <TIM_OC2_SetConfig+0x9e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a19      	ldr	r2, [pc, #100]	; (8003d98 <TIM_OC2_SetConfig+0xf8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_OC2_SetConfig+0x9e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <TIM_OC2_SetConfig+0xfc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d113      	bne.n	8003d66 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <TIM_OC2_SetConfig+0x100>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4a16      	ldr	r2, [pc, #88]	; (8003da4 <TIM_OC2_SetConfig+0x104>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	621a      	str	r2, [r3, #32]
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b006      	add	sp, #24
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	ffff8fff 	.word	0xffff8fff
 8003d8c:	fffffcff 	.word	0xfffffcff
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40014400 	.word	0x40014400
 8003d9c:	40014800 	.word	0x40014800
 8003da0:	fffffbff 	.word	0xfffffbff
 8003da4:	fffff7ff 	.word	0xfffff7ff

08003da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4a35      	ldr	r2, [pc, #212]	; (8003e8c <TIM_OC3_SetConfig+0xe4>)
 8003db8:	401a      	ands	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2270      	movs	r2, #112	; 0x70
 8003dd4:	4393      	bics	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2203      	movs	r2, #3
 8003ddc:	4393      	bics	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4a28      	ldr	r2, [pc, #160]	; (8003e90 <TIM_OC3_SetConfig+0xe8>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a24      	ldr	r2, [pc, #144]	; (8003e94 <TIM_OC3_SetConfig+0xec>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10d      	bne.n	8003e22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <TIM_OC3_SetConfig+0xf0>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4a1f      	ldr	r2, [pc, #124]	; (8003e9c <TIM_OC3_SetConfig+0xf4>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <TIM_OC3_SetConfig+0xec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00b      	beq.n	8003e42 <TIM_OC3_SetConfig+0x9a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <TIM_OC3_SetConfig+0xf8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <TIM_OC3_SetConfig+0x9a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <TIM_OC3_SetConfig+0xfc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC3_SetConfig+0x9a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <TIM_OC3_SetConfig+0x100>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d113      	bne.n	8003e6a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <TIM_OC3_SetConfig+0x104>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <TIM_OC3_SetConfig+0x108>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b006      	add	sp, #24
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	fffffeff 	.word	0xfffffeff
 8003e90:	fffffdff 	.word	0xfffffdff
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	fffff7ff 	.word	0xfffff7ff
 8003e9c:	fffffbff 	.word	0xfffffbff
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800
 8003eac:	ffffefff 	.word	0xffffefff
 8003eb0:	ffffdfff 	.word	0xffffdfff

08003eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <TIM_OC4_SetConfig+0xb0>)
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <TIM_OC4_SetConfig+0xb4>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <TIM_OC4_SetConfig+0xb8>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <TIM_OC4_SetConfig+0xbc>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	031b      	lsls	r3, r3, #12
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <TIM_OC4_SetConfig+0xc0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <TIM_OC4_SetConfig+0x78>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <TIM_OC4_SetConfig+0xc4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <TIM_OC4_SetConfig+0x78>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <TIM_OC4_SetConfig+0xc8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_OC4_SetConfig+0x78>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <TIM_OC4_SetConfig+0xcc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d109      	bne.n	8003f40 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <TIM_OC4_SetConfig+0xd0>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	019b      	lsls	r3, r3, #6
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b006      	add	sp, #24
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	ffffefff 	.word	0xffffefff
 8003f68:	ffff8fff 	.word	0xffff8fff
 8003f6c:	fffffcff 	.word	0xfffffcff
 8003f70:	ffffdfff 	.word	0xffffdfff
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800
 8003f84:	ffffbfff 	.word	0xffffbfff

08003f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4393      	bics	r3, r2
 8003fa2:	001a      	movs	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	22f0      	movs	r2, #240	; 0xf0
 8003fb2:	4393      	bics	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	220a      	movs	r2, #10
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b006      	add	sp, #24
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	2210      	movs	r2, #16
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	001a      	movs	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	4a0d      	ldr	r2, [pc, #52]	; (8004044 <TIM_TI2_ConfigInputStage+0x60>)
 800400e:	4013      	ands	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	031b      	lsls	r3, r3, #12
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	22a0      	movs	r2, #160	; 0xa0
 8004020:	4393      	bics	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b006      	add	sp, #24
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	ffff0fff 	.word	0xffff0fff

08004048 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2270      	movs	r2, #112	; 0x70
 800405c:	4393      	bics	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	2207      	movs	r2, #7
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	609a      	str	r2, [r3, #8]
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b004      	add	sp, #16
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <TIM_ETR_SetConfig+0x3c>)
 8004094:	4013      	ands	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	021a      	lsls	r2, r3, #8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	431a      	orrs	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	609a      	str	r2, [r3, #8]
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b006      	add	sp, #24
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	ffff00ff 	.word	0xffff00ff

080040bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	221f      	movs	r2, #31
 80040cc:	4013      	ands	r3, r2
 80040ce:	2201      	movs	r2, #1
 80040d0:	409a      	lsls	r2, r3
 80040d2:	0013      	movs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	43d2      	mvns	r2, r2
 80040de:	401a      	ands	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1a      	ldr	r2, [r3, #32]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	211f      	movs	r1, #31
 80040ec:	400b      	ands	r3, r1
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4099      	lsls	r1, r3
 80040f2:	000b      	movs	r3, r1
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b006      	add	sp, #24
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	223c      	movs	r2, #60	; 0x3c
 8004112:	5c9b      	ldrb	r3, [r3, r2]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004118:	2302      	movs	r3, #2
 800411a:	e047      	b.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	223c      	movs	r2, #60	; 0x3c
 8004120:	2101      	movs	r1, #1
 8004122:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	223d      	movs	r2, #61	; 0x3d
 8004128:	2102      	movs	r1, #2
 800412a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2270      	movs	r2, #112	; 0x70
 8004140:	4393      	bics	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00f      	beq.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	05db      	lsls	r3, r3, #23
 8004168:	429a      	cmp	r2, r3
 800416a:	d009      	beq.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a11      	ldr	r2, [pc, #68]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10c      	bne.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2280      	movs	r2, #128	; 0x80
 8004184:	4393      	bics	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	4313      	orrs	r3, r2
 8004190:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	223d      	movs	r2, #61	; 0x3d
 800419e:	2101      	movs	r1, #1
 80041a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	223c      	movs	r2, #60	; 0x3c
 80041a6:	2100      	movs	r1, #0
 80041a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	0018      	movs	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b004      	add	sp, #16
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40014000 	.word	0x40014000

080041c0 <__libc_init_array>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	2600      	movs	r6, #0
 80041c4:	4d0c      	ldr	r5, [pc, #48]	; (80041f8 <__libc_init_array+0x38>)
 80041c6:	4c0d      	ldr	r4, [pc, #52]	; (80041fc <__libc_init_array+0x3c>)
 80041c8:	1b64      	subs	r4, r4, r5
 80041ca:	10a4      	asrs	r4, r4, #2
 80041cc:	42a6      	cmp	r6, r4
 80041ce:	d109      	bne.n	80041e4 <__libc_init_array+0x24>
 80041d0:	2600      	movs	r6, #0
 80041d2:	f000 f821 	bl	8004218 <_init>
 80041d6:	4d0a      	ldr	r5, [pc, #40]	; (8004200 <__libc_init_array+0x40>)
 80041d8:	4c0a      	ldr	r4, [pc, #40]	; (8004204 <__libc_init_array+0x44>)
 80041da:	1b64      	subs	r4, r4, r5
 80041dc:	10a4      	asrs	r4, r4, #2
 80041de:	42a6      	cmp	r6, r4
 80041e0:	d105      	bne.n	80041ee <__libc_init_array+0x2e>
 80041e2:	bd70      	pop	{r4, r5, r6, pc}
 80041e4:	00b3      	lsls	r3, r6, #2
 80041e6:	58eb      	ldr	r3, [r5, r3]
 80041e8:	4798      	blx	r3
 80041ea:	3601      	adds	r6, #1
 80041ec:	e7ee      	b.n	80041cc <__libc_init_array+0xc>
 80041ee:	00b3      	lsls	r3, r6, #2
 80041f0:	58eb      	ldr	r3, [r5, r3]
 80041f2:	4798      	blx	r3
 80041f4:	3601      	adds	r6, #1
 80041f6:	e7f2      	b.n	80041de <__libc_init_array+0x1e>
 80041f8:	080042e0 	.word	0x080042e0
 80041fc:	080042e0 	.word	0x080042e0
 8004200:	080042e0 	.word	0x080042e0
 8004204:	080042e4 	.word	0x080042e4

08004208 <memset>:
 8004208:	0003      	movs	r3, r0
 800420a:	1812      	adds	r2, r2, r0
 800420c:	4293      	cmp	r3, r2
 800420e:	d100      	bne.n	8004212 <memset+0xa>
 8004210:	4770      	bx	lr
 8004212:	7019      	strb	r1, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	e7f9      	b.n	800420c <memset+0x4>

08004218 <_init>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr

08004224 <_fini>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr

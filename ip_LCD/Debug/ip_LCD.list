
ip_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d4c  08004d4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d54  08004d54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  08004dcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08004dcc  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e81  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019b9  00000000  00000000  00029f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c8  00000000  00000000  0002b8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f0  00000000  00000000  0002c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002440c  00000000  00000000  0002c998  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000745e  00000000  00000000  00050da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5e4c  00000000  00000000  00058202  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e04e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c24  00000000  00000000  0012e0cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004768 	.word	0x08004768

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004768 	.word	0x08004768

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Display_Width>:
static uint32_t HOffset;
static uint32_t VOffset;
static uint8_t Touch;

uint32_t Display_Width()
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	return Width;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <Display_Width+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000090 	.word	0x20000090

080005b8 <Display_Height>:

uint32_t Display_Height()
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	return Height;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <Display_Height+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000094 	.word	0x20000094

080005d0 <Display_Touch>:

uint8_t Display_Touch()
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	return Touch;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <Display_Touch+0x14>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000a0 	.word	0x200000a0

080005e8 <FT81x_Init>:



// Call this function once at powerup to reset and initialize the Eve chip
void FT81x_Init(int display, int board, int touch)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09a      	sub	sp, #104	; 0x68
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
	uint32_t Ready = false;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
	int HSIZE;
	int VSIZE;
	int CSPREAD;
	int DITHER;

	switch (display)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	f200 8146 	bhi.w	800088e <FT81x_Init+0x2a6>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <FT81x_Init+0x20>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000625 	.word	0x08000625
 800060c:	0800067f 	.word	0x0800067f
 8000610:	080006d9 	.word	0x080006d9
 8000614:	08000733 	.word	0x08000733
 8000618:	0800078b 	.word	0x0800078b
 800061c:	080007e3 	.word	0x080007e3
 8000620:	08000839 	.word	0x08000839
	{
	case  DISPLAY_70:
		DWIDTH = 800;
 8000624:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000628:	667b      	str	r3, [r7, #100]	; 0x64
		DHEIGHT = 480;
 800062a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800062e:	663b      	str	r3, [r7, #96]	; 0x60
		PIXVOFFSET = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	65fb      	str	r3, [r7, #92]	; 0x5c
		PIXHOFFSET = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	65bb      	str	r3, [r7, #88]	; 0x58
		HCYCLE = 928;
 8000638:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800063c:	657b      	str	r3, [r7, #84]	; 0x54
		HOFFSET = 88;
 800063e:	2358      	movs	r3, #88	; 0x58
 8000640:	653b      	str	r3, [r7, #80]	; 0x50
		HSYNC0 = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
		HSYNC1 = 48;
 8000646:	2330      	movs	r3, #48	; 0x30
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
		VCYCLE = 525;
 800064a:	f240 230d 	movw	r3, #525	; 0x20d
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
		VOFFSET = 32;
 8000650:	2320      	movs	r3, #32
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
		VSYNC0 = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
		VSYNC1 = 3;
 8000658:	2303      	movs	r3, #3
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
		PCLK = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
		SWIZZLE = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
		PCLK_POL = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
		HSIZE = 800;
 8000668:	f44f 7348 	mov.w	r3, #800	; 0x320
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
		VSIZE = 480;
 800066e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
		CSPREAD = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
		DITHER = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
		break;
 800067c:	e107      	b.n	800088e <FT81x_Init+0x2a6>
	case DISPLAY_50:
		DWIDTH = 800;
 800067e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000682:	667b      	str	r3, [r7, #100]	; 0x64
		DHEIGHT = 480;
 8000684:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000688:	663b      	str	r3, [r7, #96]	; 0x60
		PIXVOFFSET = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	65fb      	str	r3, [r7, #92]	; 0x5c
		PIXHOFFSET = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	65bb      	str	r3, [r7, #88]	; 0x58
		HCYCLE = 928;
 8000692:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8000696:	657b      	str	r3, [r7, #84]	; 0x54
		HOFFSET = 88;
 8000698:	2358      	movs	r3, #88	; 0x58
 800069a:	653b      	str	r3, [r7, #80]	; 0x50
		HSYNC0 = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
		HSYNC1 = 48;
 80006a0:	2330      	movs	r3, #48	; 0x30
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
		VCYCLE = 525;
 80006a4:	f240 230d 	movw	r3, #525	; 0x20d
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
		VOFFSET = 32;
 80006aa:	2320      	movs	r3, #32
 80006ac:	643b      	str	r3, [r7, #64]	; 0x40
		VSYNC0 = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		VSYNC1 = 3;
 80006b2:	2303      	movs	r3, #3
 80006b4:	63bb      	str	r3, [r7, #56]	; 0x38
		PCLK = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
		SWIZZLE = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
		PCLK_POL = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		HSIZE = 800;
 80006c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
		VSIZE = 480;
 80006c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
		CSPREAD = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
		DITHER = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61fb      	str	r3, [r7, #28]
		break;
 80006d6:	e0da      	b.n	800088e <FT81x_Init+0x2a6>
	case DISPLAY_43:
		DWIDTH = 480;
 80006d8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80006dc:	667b      	str	r3, [r7, #100]	; 0x64
		DHEIGHT = 272;
 80006de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80006e2:	663b      	str	r3, [r7, #96]	; 0x60
		PIXVOFFSET = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	65fb      	str	r3, [r7, #92]	; 0x5c
		PIXHOFFSET = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	65bb      	str	r3, [r7, #88]	; 0x58
		HCYCLE = 548;
 80006ec:	f44f 7309 	mov.w	r3, #548	; 0x224
 80006f0:	657b      	str	r3, [r7, #84]	; 0x54
		HOFFSET = 43;
 80006f2:	232b      	movs	r3, #43	; 0x2b
 80006f4:	653b      	str	r3, [r7, #80]	; 0x50
		HSYNC0 = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
		HSYNC1 = 41;
 80006fa:	2329      	movs	r3, #41	; 0x29
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
		VCYCLE = 292;
 80006fe:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
		VOFFSET = 12;
 8000704:	230c      	movs	r3, #12
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
		VSYNC0 = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
		VSYNC1 = 10;
 800070c:	230a      	movs	r3, #10
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
		PCLK = 5;
 8000710:	2305      	movs	r3, #5
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
		SWIZZLE = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
		PCLK_POL = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HSIZE = 480;
 800071c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
		VSIZE = 272;
 8000722:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
		CSPREAD = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
		DITHER = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
		break;
 8000730:	e0ad      	b.n	800088e <FT81x_Init+0x2a6>
	case DISPLAY_39:
		DWIDTH = 480;
 8000732:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000736:	667b      	str	r3, [r7, #100]	; 0x64
		DHEIGHT = 128;
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	663b      	str	r3, [r7, #96]	; 0x60
		PIXVOFFSET = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	65fb      	str	r3, [r7, #92]	; 0x5c
		PIXHOFFSET = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	65bb      	str	r3, [r7, #88]	; 0x58
		HCYCLE = 524;
 8000744:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8000748:	657b      	str	r3, [r7, #84]	; 0x54
		HOFFSET = 16;
 800074a:	2310      	movs	r3, #16
 800074c:	653b      	str	r3, [r7, #80]	; 0x50
		HSYNC1 = 44;
 800074e:	232c      	movs	r3, #44	; 0x2c
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
		HSYNC0 = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
		VCYCLE = 288;
 8000756:	f44f 7390 	mov.w	r3, #288	; 0x120
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
		VOFFSET = 12;
 800075c:	230c      	movs	r3, #12
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
		VSYNC1 = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
		VSYNC0 = 11;
 8000764:	230b      	movs	r3, #11
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
		PCLK = 5;
 8000768:	2305      	movs	r3, #5
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
		SWIZZLE = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
		PCLK_POL = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
		HSIZE = 480;
 8000774:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
		VSIZE = 272;
 800077a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
		CSPREAD = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
		DITHER = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
		break;
 8000788:	e081      	b.n	800088e <FT81x_Init+0x2a6>
	case DISPLAY_38:
		DWIDTH = 480;
 800078a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800078e:	667b      	str	r3, [r7, #100]	; 0x64
		DHEIGHT = 116;
 8000790:	2374      	movs	r3, #116	; 0x74
 8000792:	663b      	str	r3, [r7, #96]	; 0x60
		PIXVOFFSET = 10;
 8000794:	230a      	movs	r3, #10
 8000796:	65fb      	str	r3, [r7, #92]	; 0x5c
		PIXHOFFSET = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	65bb      	str	r3, [r7, #88]	; 0x58
		HCYCLE = 524;
 800079c:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80007a0:	657b      	str	r3, [r7, #84]	; 0x54
		HOFFSET = 43;
 80007a2:	232b      	movs	r3, #43	; 0x2b
 80007a4:	653b      	str	r3, [r7, #80]	; 0x50
		HSYNC0 = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
		HSYNC1 = 41;
 80007aa:	2329      	movs	r3, #41	; 0x29
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
		VCYCLE = 292;
 80007ae:	f44f 7392 	mov.w	r3, #292	; 0x124
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
		VOFFSET = 12;
 80007b4:	230c      	movs	r3, #12
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
		VSYNC0 = 152;
 80007b8:	2398      	movs	r3, #152	; 0x98
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
		VSYNC1 = 10;
 80007bc:	230a      	movs	r3, #10
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
		PCLK = 5;
 80007c0:	2305      	movs	r3, #5
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
		SWIZZLE = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
		PCLK_POL = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		HSIZE = 480;
 80007cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
		VSIZE = 272;
 80007d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
		CSPREAD = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
		DITHER = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	61fb      	str	r3, [r7, #28]
		break;
 80007e0:	e055      	b.n	800088e <FT81x_Init+0x2a6>
	case DISPLAY_35:
		DWIDTH = 320;
 80007e2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007e6:	667b      	str	r3, [r7, #100]	; 0x64
		DHEIGHT = 240;
 80007e8:	23f0      	movs	r3, #240	; 0xf0
 80007ea:	663b      	str	r3, [r7, #96]	; 0x60
		PIXVOFFSET = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	65fb      	str	r3, [r7, #92]	; 0x5c
		PIXHOFFSET = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	65bb      	str	r3, [r7, #88]	; 0x58
		HCYCLE = 408;
 80007f4:	f44f 73cc 	mov.w	r3, #408	; 0x198
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
		HOFFSET = 68;
 80007fa:	2344      	movs	r3, #68	; 0x44
 80007fc:	653b      	str	r3, [r7, #80]	; 0x50
		HSYNC0 = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
		HSYNC1 = 10;
 8000802:	230a      	movs	r3, #10
 8000804:	64bb      	str	r3, [r7, #72]	; 0x48
		VCYCLE = 262;
 8000806:	f44f 7383 	mov.w	r3, #262	; 0x106
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
		VOFFSET = 18;
 800080c:	2312      	movs	r3, #18
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
		VSYNC0 = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
		VSYNC1 = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
		PCLK = 8;
 8000818:	2308      	movs	r3, #8
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
		SWIZZLE = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
		PCLK_POL = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
		HSIZE = 320;
 8000824:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
		VSIZE = 240;
 800082a:	23f0      	movs	r3, #240	; 0xf0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
		CSPREAD = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
		DITHER = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
		break;
 8000836:	e02a      	b.n	800088e <FT81x_Init+0x2a6>
	case DISPLAY_29:
		DWIDTH = 320;
 8000838:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800083c:	667b      	str	r3, [r7, #100]	; 0x64
		DHEIGHT = 102;
 800083e:	2366      	movs	r3, #102	; 0x66
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
		PIXVOFFSET = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	65fb      	str	r3, [r7, #92]	; 0x5c
		PIXHOFFSET = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	65bb      	str	r3, [r7, #88]	; 0x58
		HCYCLE = 408;
 800084a:	f44f 73cc 	mov.w	r3, #408	; 0x198
 800084e:	657b      	str	r3, [r7, #84]	; 0x54
		HOFFSET = 70;
 8000850:	2346      	movs	r3, #70	; 0x46
 8000852:	653b      	str	r3, [r7, #80]	; 0x50
		HSYNC0 = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
		HSYNC1 = 10;
 8000858:	230a      	movs	r3, #10
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
		VCYCLE = 262;
 800085c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000860:	647b      	str	r3, [r7, #68]	; 0x44
		VOFFSET = 156;
 8000862:	239c      	movs	r3, #156	; 0x9c
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
		VSYNC0 = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	63fb      	str	r3, [r7, #60]	; 0x3c
		VSYNC1 = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
		PCLK = 8;
 800086e:	2308      	movs	r3, #8
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
		SWIZZLE = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
		PCLK_POL = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
		HSIZE = 320;
 800087a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
		VSIZE = 102;
 8000880:	2366      	movs	r3, #102	; 0x66
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
		CSPREAD = 1;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
		DITHER = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	61fb      	str	r3, [r7, #28]
		break;
 800088c:	bf00      	nop
	}
	Width = DWIDTH;
 800088e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000890:	4a87      	ldr	r2, [pc, #540]	; (8000ab0 <FT81x_Init+0x4c8>)
 8000892:	6013      	str	r3, [r2, #0]
	Height = DHEIGHT;
 8000894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000896:	4a87      	ldr	r2, [pc, #540]	; (8000ab4 <FT81x_Init+0x4cc>)
 8000898:	6013      	str	r3, [r2, #0]
	HOffset = PIXHOFFSET;
 800089a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800089c:	4a86      	ldr	r2, [pc, #536]	; (8000ab8 <FT81x_Init+0x4d0>)
 800089e:	6013      	str	r3, [r2, #0]
	VOffset = PIXVOFFSET;
 80008a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008a2:	4a86      	ldr	r2, [pc, #536]	; (8000abc <FT81x_Init+0x4d4>)
 80008a4:	6013      	str	r3, [r2, #0]
	Touch = touch;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b85      	ldr	r3, [pc, #532]	; (8000ac0 <FT81x_Init+0x4d8>)
 80008ac:	701a      	strb	r2, [r3, #0]
	Eve_Reset(); // Hard reset of the Eve chip
 80008ae:	f000 f951 	bl	8000b54 <Eve_Reset>

	// Wakeup Eve
	if (board == BOARD_EVE3)
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d102      	bne.n	80008be <FT81x_Init+0x2d6>
	{
		HostCommand(HCMD_CLKEXT);
 80008b8:	2044      	movs	r0, #68	; 0x44
 80008ba:	f000 f9a5 	bl	8000c08 <HostCommand>
	}
	HostCommand(HCMD_ACTIVE);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f9a2 	bl	8000c08 <HostCommand>
	HAL_Delay(300);
 80008c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008c8:	f001 f986 	bl	8001bd8 <HAL_Delay>

	do
	{
		Ready = Cmd_READ_REG_ID();
 80008cc:	f000 fafa 	bl	8000ec4 <Cmd_READ_REG_ID>
 80008d0:	4603      	mov	r3, r0
 80008d2:	61bb      	str	r3, [r7, #24]
	} while (!Ready);
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f8      	beq.n	80008cc <FT81x_Init+0x2e4>

	//  Log("Eve now ACTIVE\n");         //

	Ready = rd32(REG_CHIP_ID);
 80008da:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80008de:	f000 fa36 	bl	8000d4e <rd32>
 80008e2:	61b8      	str	r0, [r7, #24]
	uint16_t ValH = Ready >> 16;
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	0c1b      	lsrs	r3, r3, #16
 80008e8:	82fb      	strh	r3, [r7, #22]
	uint16_t ValL = Ready & 0xFFFF;
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	82bb      	strh	r3, [r7, #20]
	Log("Chip ID = 0x%04x%04x\n", ValH, ValL);
 80008ee:	8afb      	ldrh	r3, [r7, #22]
 80008f0:	8aba      	ldrh	r2, [r7, #20]
 80008f2:	4619      	mov	r1, r3
 80008f4:	4873      	ldr	r0, [pc, #460]	; (8000ac4 <FT81x_Init+0x4dc>)
 80008f6:	f002 fef7 	bl	80036e8 <iprintf>

	wr32(REG_FREQUENCY + RAM_REG, 0x3938700); // Configure the system clock to 60MHz
 80008fa:	4973      	ldr	r1, [pc, #460]	; (8000ac8 <FT81x_Init+0x4e0>)
 80008fc:	4873      	ldr	r0, [pc, #460]	; (8000acc <FT81x_Init+0x4e4>)
 80008fe:	f000 f99a 	bl	8000c36 <wr32>

	// Before we go any further with Eve, it is a good idea to check to see if she is wigging out about something 
	// that happened before the last reset.  If Eve has just done a power cycle, this would be unnecessary.
	if (rd16(REG_CMD_READ + RAM_REG) == 0xFFF)
 8000902:	4873      	ldr	r0, [pc, #460]	; (8000ad0 <FT81x_Init+0x4e8>)
 8000904:	f000 fa56 	bl	8000db4 <rd16>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000910:	429a      	cmp	r2, r3
 8000912:	d11b      	bne.n	800094c <FT81x_Init+0x364>
	{
		// Eve is unhappy - needs a paddling.
		uint32_t Patch_Add = rd32(REG_COPRO_PATCH_PTR + RAM_REG);
 8000914:	486f      	ldr	r0, [pc, #444]	; (8000ad4 <FT81x_Init+0x4ec>)
 8000916:	f000 fa1a 	bl	8000d4e <rd32>
 800091a:	6138      	str	r0, [r7, #16]
		wr8(REG_CPU_RESET + RAM_REG, 1);
 800091c:	2101      	movs	r1, #1
 800091e:	486e      	ldr	r0, [pc, #440]	; (8000ad8 <FT81x_Init+0x4f0>)
 8000920:	f000 f9ef 	bl	8000d02 <wr8>
		wr16(REG_CMD_READ + RAM_REG, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	486a      	ldr	r0, [pc, #424]	; (8000ad0 <FT81x_Init+0x4e8>)
 8000928:	f000 f9bd 	bl	8000ca6 <wr16>
		wr16(REG_CMD_WRITE + RAM_REG, 0);
 800092c:	2100      	movs	r1, #0
 800092e:	486b      	ldr	r0, [pc, #428]	; (8000adc <FT81x_Init+0x4f4>)
 8000930:	f000 f9b9 	bl	8000ca6 <wr16>
		wr16(REG_CMD_DL + RAM_REG, 0);
 8000934:	2100      	movs	r1, #0
 8000936:	486a      	ldr	r0, [pc, #424]	; (8000ae0 <FT81x_Init+0x4f8>)
 8000938:	f000 f9b5 	bl	8000ca6 <wr16>
		wr8(REG_CPU_RESET + RAM_REG, 0);
 800093c:	2100      	movs	r1, #0
 800093e:	4866      	ldr	r0, [pc, #408]	; (8000ad8 <FT81x_Init+0x4f0>)
 8000940:	f000 f9df 	bl	8000d02 <wr8>
		wr32(REG_COPRO_PATCH_PTR + RAM_REG, Patch_Add);
 8000944:	6939      	ldr	r1, [r7, #16]
 8000946:	4863      	ldr	r0, [pc, #396]	; (8000ad4 <FT81x_Init+0x4ec>)
 8000948:	f000 f975 	bl	8000c36 <wr32>
	}

	// turn off screen output during startup
	wr8(REG_GPIOX + RAM_REG, 0);             // Set REG_GPIOX to 0 to turn off the LCD DISP signal
 800094c:	2100      	movs	r1, #0
 800094e:	4865      	ldr	r0, [pc, #404]	; (8000ae4 <FT81x_Init+0x4fc>)
 8000950:	f000 f9d7 	bl	8000d02 <wr8>
	wr8(REG_PCLK + RAM_REG, 0);              // Pixel Clock Output disable
 8000954:	2100      	movs	r1, #0
 8000956:	4864      	ldr	r0, [pc, #400]	; (8000ae8 <FT81x_Init+0x500>)
 8000958:	f000 f9d3 	bl	8000d02 <wr8>

	// load parameters of the physical screen to the Eve
	// All of these registers are 32 bits, but most bits are reserved, so only write what is actually used
	wr16(REG_HCYCLE + RAM_REG, HCYCLE);         // Set H_Cycle to 548
 800095c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800095e:	b29b      	uxth	r3, r3
 8000960:	4619      	mov	r1, r3
 8000962:	4862      	ldr	r0, [pc, #392]	; (8000aec <FT81x_Init+0x504>)
 8000964:	f000 f99f 	bl	8000ca6 <wr16>
	wr16(REG_HOFFSET + RAM_REG, HOFFSET);       // Set H_Offset to 43
 8000968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800096a:	b29b      	uxth	r3, r3
 800096c:	4619      	mov	r1, r3
 800096e:	4860      	ldr	r0, [pc, #384]	; (8000af0 <FT81x_Init+0x508>)
 8000970:	f000 f999 	bl	8000ca6 <wr16>
	wr16(REG_HSYNC0 + RAM_REG, HSYNC0);         // Set H_SYNC_0 to 0
 8000974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000976:	b29b      	uxth	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	485e      	ldr	r0, [pc, #376]	; (8000af4 <FT81x_Init+0x50c>)
 800097c:	f000 f993 	bl	8000ca6 <wr16>
	wr16(REG_HSYNC1 + RAM_REG, HSYNC1);         // Set H_SYNC_1 to 41
 8000980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000982:	b29b      	uxth	r3, r3
 8000984:	4619      	mov	r1, r3
 8000986:	485c      	ldr	r0, [pc, #368]	; (8000af8 <FT81x_Init+0x510>)
 8000988:	f000 f98d 	bl	8000ca6 <wr16>
	wr16(REG_VCYCLE + RAM_REG, VCYCLE);         // Set V_Cycle to 292
 800098c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800098e:	b29b      	uxth	r3, r3
 8000990:	4619      	mov	r1, r3
 8000992:	485a      	ldr	r0, [pc, #360]	; (8000afc <FT81x_Init+0x514>)
 8000994:	f000 f987 	bl	8000ca6 <wr16>
	wr16(REG_VOFFSET + RAM_REG, VOFFSET);       // Set V_OFFSET to 12
 8000998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800099a:	b29b      	uxth	r3, r3
 800099c:	4619      	mov	r1, r3
 800099e:	4858      	ldr	r0, [pc, #352]	; (8000b00 <FT81x_Init+0x518>)
 80009a0:	f000 f981 	bl	8000ca6 <wr16>
	wr16(REG_VSYNC0 + RAM_REG, VSYNC0);         // Set V_SYNC_0 to 0
 80009a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	4856      	ldr	r0, [pc, #344]	; (8000b04 <FT81x_Init+0x51c>)
 80009ac:	f000 f97b 	bl	8000ca6 <wr16>
	wr16(REG_VSYNC1 + RAM_REG, VSYNC1);         // Set V_SYNC_1 to 10
 80009b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4619      	mov	r1, r3
 80009b6:	4854      	ldr	r0, [pc, #336]	; (8000b08 <FT81x_Init+0x520>)
 80009b8:	f000 f975 	bl	8000ca6 <wr16>
	wr8(REG_SWIZZLE + RAM_REG, SWIZZLE);        // Set SWIZZLE to 0
 80009bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	4852      	ldr	r0, [pc, #328]	; (8000b0c <FT81x_Init+0x524>)
 80009c4:	f000 f99d 	bl	8000d02 <wr8>
	wr8(REG_PCLK_POL + RAM_REG, PCLK_POL);      // Set PCLK_POL to 1
 80009c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	4850      	ldr	r0, [pc, #320]	; (8000b10 <FT81x_Init+0x528>)
 80009d0:	f000 f997 	bl	8000d02 <wr8>
	wr16(REG_HSIZE + RAM_REG, HSIZE);           // Set H_SIZE to 480
 80009d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	4619      	mov	r1, r3
 80009da:	484e      	ldr	r0, [pc, #312]	; (8000b14 <FT81x_Init+0x52c>)
 80009dc:	f000 f963 	bl	8000ca6 <wr16>
	wr16(REG_VSIZE + RAM_REG, VSIZE);           // Set V_SIZE to 272
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4619      	mov	r1, r3
 80009e6:	484c      	ldr	r0, [pc, #304]	; (8000b18 <FT81x_Init+0x530>)
 80009e8:	f000 f95d 	bl	8000ca6 <wr16>
	wr8(REG_CSPREAD + RAM_REG, CSPREAD);        // Set CSPREAD to 1    (32 bit register - write only 8 bits)
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4619      	mov	r1, r3
 80009f2:	484a      	ldr	r0, [pc, #296]	; (8000b1c <FT81x_Init+0x534>)
 80009f4:	f000 f985 	bl	8000d02 <wr8>
	wr8(REG_DITHER + RAM_REG, DITHER);          // Set DITHER to 1     (32 bit register - write only 8 bits)
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4619      	mov	r1, r3
 80009fe:	4848      	ldr	r0, [pc, #288]	; (8000b20 <FT81x_Init+0x538>)
 8000a00:	f000 f97f 	bl	8000d02 <wr8>

	// configure touch & audio
	if (touch == TOUCH_TPR)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d105      	bne.n	8000a16 <FT81x_Init+0x42e>
	{
		wr16(REG_TOUCH_CONFIG + RAM_REG, 0x8381);
 8000a0a:	f248 3181 	movw	r1, #33665	; 0x8381
 8000a0e:	4845      	ldr	r0, [pc, #276]	; (8000b24 <FT81x_Init+0x53c>)
 8000a10:	f000 f949 	bl	8000ca6 <wr16>
 8000a14:	e00c      	b.n	8000a30 <FT81x_Init+0x448>
	}
	else if (touch == TOUCH_TPC)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d109      	bne.n	8000a30 <FT81x_Init+0x448>
	{
		wr16(REG_TOUCH_CONFIG + RAM_REG, 0x5d0);
 8000a1c:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 8000a20:	4840      	ldr	r0, [pc, #256]	; (8000b24 <FT81x_Init+0x53c>)
 8000a22:	f000 f940 	bl	8000ca6 <wr16>
		if (board == BOARD_EVE2)
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d101      	bne.n	8000a30 <FT81x_Init+0x448>
		{
			Cap_Touch_Upload();
 8000a2c:	f000 f898 	bl	8000b60 <Cap_Touch_Upload>
		}
	}

  wr16(REG_TOUCH_RZTHRESH + RAM_REG, 1200);          // set touch resistance threshold
 8000a30:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8000a34:	483c      	ldr	r0, [pc, #240]	; (8000b28 <FT81x_Init+0x540>)
 8000a36:	f000 f936 	bl	8000ca6 <wr16>
  wr8(REG_TOUCH_MODE + RAM_REG, 0x02);               // set touch on: continuous - this is default
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	483b      	ldr	r0, [pc, #236]	; (8000b2c <FT81x_Init+0x544>)
 8000a3e:	f000 f960 	bl	8000d02 <wr8>
  wr8(REG_TOUCH_ADC_MODE + RAM_REG, 0x01);           // set ADC mode: differential - this is default
 8000a42:	2101      	movs	r1, #1
 8000a44:	483a      	ldr	r0, [pc, #232]	; (8000b30 <FT81x_Init+0x548>)
 8000a46:	f000 f95c 	bl	8000d02 <wr8>
  wr8(REG_TOUCH_OVERSAMPLE + RAM_REG, 15);           // set touch oversampling to max
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	4839      	ldr	r0, [pc, #228]	; (8000b34 <FT81x_Init+0x54c>)
 8000a4e:	f000 f958 	bl	8000d02 <wr8>

  wr16(REG_GPIOX_DIR + RAM_REG, 0x8000);             // Set Disp GPIO Direction 
 8000a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a56:	4838      	ldr	r0, [pc, #224]	; (8000b38 <FT81x_Init+0x550>)
 8000a58:	f000 f925 	bl	8000ca6 <wr16>
  wr16(REG_GPIOX + RAM_REG, 0x8000);                 // Enable Disp (if used)
 8000a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a60:	4820      	ldr	r0, [pc, #128]	; (8000ae4 <FT81x_Init+0x4fc>)
 8000a62:	f000 f920 	bl	8000ca6 <wr16>

  wr16(REG_PWM_HZ + RAM_REG, 0x00FA);                // Backlight PWM frequency
 8000a66:	21fa      	movs	r1, #250	; 0xfa
 8000a68:	4834      	ldr	r0, [pc, #208]	; (8000b3c <FT81x_Init+0x554>)
 8000a6a:	f000 f91c 	bl	8000ca6 <wr16>
  wr8(REG_PWM_DUTY + RAM_REG, 32);                  // Backlight PWM duty (on)
 8000a6e:	2120      	movs	r1, #32
 8000a70:	4833      	ldr	r0, [pc, #204]	; (8000b40 <FT81x_Init+0x558>)
 8000a72:	f000 f946 	bl	8000d02 <wr8>

  // write first display list (which is a clear and blank screen)
  wr32(RAM_DL+0, CLEAR_COLOR_RGB(0,0,0));
 8000a76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000a7a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8000a7e:	f000 f8da 	bl	8000c36 <wr32>
  wr32(RAM_DL+4, CLEAR(1,1,1));
 8000a82:	4930      	ldr	r1, [pc, #192]	; (8000b44 <FT81x_Init+0x55c>)
 8000a84:	4830      	ldr	r0, [pc, #192]	; (8000b48 <FT81x_Init+0x560>)
 8000a86:	f000 f8d6 	bl	8000c36 <wr32>
  wr32(RAM_DL+8, DISPLAY());
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	482f      	ldr	r0, [pc, #188]	; (8000b4c <FT81x_Init+0x564>)
 8000a8e:	f000 f8d2 	bl	8000c36 <wr32>
  wr8(REG_DLSWAP + RAM_REG, DLSWAP_FRAME);          // swap display lists
 8000a92:	2102      	movs	r1, #2
 8000a94:	482e      	ldr	r0, [pc, #184]	; (8000b50 <FT81x_Init+0x568>)
 8000a96:	f000 f934 	bl	8000d02 <wr8>
  wr8(REG_PCLK + RAM_REG, PCLK);                       // after this display is visible on the LCD
 8000a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <FT81x_Init+0x500>)
 8000aa2:	f000 f92e 	bl	8000d02 <wr8>

}
 8000aa6:	bf00      	nop
 8000aa8:	3768      	adds	r7, #104	; 0x68
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000090 	.word	0x20000090
 8000ab4:	20000094 	.word	0x20000094
 8000ab8:	20000098 	.word	0x20000098
 8000abc:	2000009c 	.word	0x2000009c
 8000ac0:	200000a0 	.word	0x200000a0
 8000ac4:	08004780 	.word	0x08004780
 8000ac8:	03938700 	.word	0x03938700
 8000acc:	0030200c 	.word	0x0030200c
 8000ad0:	003020f8 	.word	0x003020f8
 8000ad4:	00309162 	.word	0x00309162
 8000ad8:	00302020 	.word	0x00302020
 8000adc:	003020fc 	.word	0x003020fc
 8000ae0:	00302100 	.word	0x00302100
 8000ae4:	0030209c 	.word	0x0030209c
 8000ae8:	00302070 	.word	0x00302070
 8000aec:	0030202c 	.word	0x0030202c
 8000af0:	00302030 	.word	0x00302030
 8000af4:	00302038 	.word	0x00302038
 8000af8:	0030203c 	.word	0x0030203c
 8000afc:	00302040 	.word	0x00302040
 8000b00:	00302044 	.word	0x00302044
 8000b04:	0030204c 	.word	0x0030204c
 8000b08:	00302050 	.word	0x00302050
 8000b0c:	00302064 	.word	0x00302064
 8000b10:	0030206c 	.word	0x0030206c
 8000b14:	00302034 	.word	0x00302034
 8000b18:	00302048 	.word	0x00302048
 8000b1c:	00302068 	.word	0x00302068
 8000b20:	00302060 	.word	0x00302060
 8000b24:	00302168 	.word	0x00302168
 8000b28:	00302118 	.word	0x00302118
 8000b2c:	00302104 	.word	0x00302104
 8000b30:	00302108 	.word	0x00302108
 8000b34:	00302114 	.word	0x00302114
 8000b38:	00302098 	.word	0x00302098
 8000b3c:	003020d0 	.word	0x003020d0
 8000b40:	003020d4 	.word	0x003020d4
 8000b44:	26000007 	.word	0x26000007
 8000b48:	00300004 	.word	0x00300004
 8000b4c:	00300008 	.word	0x00300008
 8000b50:	00302054 	.word	0x00302054

08000b54 <Eve_Reset>:

// Reset Eve chip via the hardware PDN line
void Eve_Reset(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  HAL_Eve_Reset_HW();
 8000b58:	f000 fc16 	bl	8001388 <HAL_Eve_Reset_HW>
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Cap_Touch_Upload>:

// Upload Goodix Calibration file
void Cap_Touch_Upload(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 8000b66:	af00      	add	r7, sp, #0
#include "touch_cap_811.h"	
	//---Goodix911 Configuration from AN336
	//Load the TOUCH_DATA_U8 or TOUCH_DATA_U32 array from file “touch_cap_811.h” via the FT81x command buffer RAM_CMD
	uint8_t CTOUCH_CONFIG_DATA_G911[] = { TOUCH_DATA_U8 };
 8000b68:	463b      	mov	r3, r7
 8000b6a:	4a23      	ldr	r2, [pc, #140]	; (8000bf8 <Cap_Touch_Upload+0x98>)
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	4611      	mov	r1, r2
 8000b70:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b74:	461a      	mov	r2, r3
 8000b76:	f002 fced 	bl	8003554 <memcpy>
	CoProWrCmdBuf(CTOUCH_CONFIG_DATA_G911, TOUCH_DATA_LEN);
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fb4d 	bl	8001220 <CoProWrCmdBuf>
	//Execute the commands till completion
	UpdateFIFO();
 8000b86:	f000 f98f 	bl	8000ea8 <UpdateFIFO>
	Wait4CoProFIFOEmpty();	
 8000b8a:	f000 faa7 	bl	80010dc <Wait4CoProFIFOEmpty>
	//Hold the touch engine in reset(write REG_CPURESET = 2)
	wr8(REG_CPU_RESET + RAM_REG, 2);
 8000b8e:	2102      	movs	r1, #2
 8000b90:	481a      	ldr	r0, [pc, #104]	; (8000bfc <Cap_Touch_Upload+0x9c>)
 8000b92:	f000 f8b6 	bl	8000d02 <wr8>
	//Set GPIO3 output LOW		
	wr8(REG_GPIOX_DIR + RAM_REG, (rd8(RAM_REG + REG_GPIOX_DIR) | 0x08)); // Set Disp GPIO Direction 
 8000b96:	481a      	ldr	r0, [pc, #104]	; (8000c00 <Cap_Touch_Upload+0xa0>)
 8000b98:	f000 f93f 	bl	8000e1a <rd8>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f043 0308 	orr.w	r3, r3, #8
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4816      	ldr	r0, [pc, #88]	; (8000c00 <Cap_Touch_Upload+0xa0>)
 8000ba8:	f000 f8ab 	bl	8000d02 <wr8>
	wr8(REG_GPIOX + RAM_REG, (rd8(RAM_REG + REG_GPIOX) | 0xF7));         // Clear GPIO
 8000bac:	4815      	ldr	r0, [pc, #84]	; (8000c04 <Cap_Touch_Upload+0xa4>)
 8000bae:	f000 f934 	bl	8000e1a <rd8>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f063 0308 	orn	r3, r3, #8
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <Cap_Touch_Upload+0xa4>)
 8000bbe:	f000 f8a0 	bl	8000d02 <wr8>
	//Wait more than 100us
	HAL_Delay(1);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f001 f808 	bl	8001bd8 <HAL_Delay>
	//Write REG_CPURESET=0
	wr8(REG_CPU_RESET + RAM_REG, 0);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <Cap_Touch_Upload+0x9c>)
 8000bcc:	f000 f899 	bl	8000d02 <wr8>
	//Wait more than 55ms
	HAL_Delay(100);
 8000bd0:	2064      	movs	r0, #100	; 0x64
 8000bd2:	f001 f801 	bl	8001bd8 <HAL_Delay>
	//Set GPIO3 to input (floating)			
	wr8(REG_GPIOX_DIR + RAM_REG, (rd8(RAM_REG + REG_GPIOX_DIR) & 0xF7));             // Set Disp GPIO Direction 
 8000bd6:	480a      	ldr	r0, [pc, #40]	; (8000c00 <Cap_Touch_Upload+0xa0>)
 8000bd8:	f000 f91f 	bl	8000e1a <rd8>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f023 0308 	bic.w	r3, r3, #8
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <Cap_Touch_Upload+0xa0>)
 8000be8:	f000 f88b 	bl	8000d02 <wr8>
																		 //---Goodix911 Configuration from AN336
}
 8000bec:	bf00      	nop
 8000bee:	f507 6798 	add.w	r7, r7, #1216	; 0x4c0
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	08004798 	.word	0x08004798
 8000bfc:	00302020 	.word	0x00302020
 8000c00:	00302098 	.word	0x00302098
 8000c04:	0030209c 	.word	0x0030209c

08000c08 <HostCommand>:

// *** Host Command - FT81X Embedded Video Engine Datasheet - 4.1.5 **********************************************
// Host Command is a function for changing hardware related parameters of the Eve chip.  The name is confusing.
// These are related to power modes and the like.  All defined parameters have HCMD_ prefix
void HostCommand(uint8_t HCMD) 
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
//  Log("Inside HostCommand\n");

  HAL_SPI_Enable();
 8000c12:	f000 fb51 	bl	80012b8 <HAL_SPI_Enable>
  
/*  HAL_SPI_Write(HCMD | 0x40); // In case the manual is making you believe that you just found the bug you were looking for - no. */       
  HAL_SPI_Write(HCMD);        
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fb9f 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write(0x00);          // This second byte is set to 0 but if there is need for fancy, never used setups, then rewrite.  
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 fb9c 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write(0x00);   
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 fb99 	bl	800135c <HAL_SPI_Write>
  
  HAL_SPI_Disable();
 8000c2a:	f000 fb51 	bl	80012d0 <HAL_SPI_Disable>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <wr32>:
// *** Eve API Reference Definitions *****************************************************************************
// FT81X Embedded Video Engine Datasheet 1.3 - Section 4.1.4, page 16
// These are all functions related to writing / reading data of various lengths with a memory address of 32 bits
// ***************************************************************************************************************
void wr32(uint32_t address, uint32_t parameter)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
  HAL_SPI_Enable();
 8000c40:	f000 fb3a 	bl	80012b8 <HAL_SPI_Enable>
  
  HAL_SPI_Write((uint8_t)((address >> 16) | 0x80));   // RAM_REG = 0x302000 and high bit is set - result always 0xB0
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	0c1b      	lsrs	r3, r3, #16
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fb83 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((uint8_t)(address >> 8));             // Next byte of the register address   
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fb7d 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((uint8_t)address);                    // Low byte of register address - usually just the 1 byte offset
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fb78 	bl	800135c <HAL_SPI_Write>
  
  HAL_SPI_Write((uint8_t)(parameter & 0xff));         // Little endian (yes, it is most significant bit first and least significant byte first)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fb73 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((uint8_t)((parameter >> 8) & 0xff));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fb6d 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((uint8_t)((parameter >> 16) & 0xff));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	0c1b      	lsrs	r3, r3, #16
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fb67 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((uint8_t)((parameter >> 24) & 0xff));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	0e1b      	lsrs	r3, r3, #24
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fb61 	bl	800135c <HAL_SPI_Write>
  
  HAL_SPI_Disable();
 8000c9a:	f000 fb19 	bl	80012d0 <HAL_SPI_Disable>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <wr16>:

void wr16(uint32_t address, uint16_t parameter)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Enable();
 8000cb2:	f000 fb01 	bl	80012b8 <HAL_SPI_Enable>
  
  HAL_SPI_Write((uint8_t)((address >> 16) | 0x80)); // RAM_REG = 0x302000 and high bit is set - result always 0xB0
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	0c1b      	lsrs	r3, r3, #16
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fb4a 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((uint8_t)(address >> 8));           // Next byte of the register address   
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fb44 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((uint8_t)address);                  // Low byte of register address - usually just the 1 byte offset
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fb3f 	bl	800135c <HAL_SPI_Write>
  
  HAL_SPI_Write((uint8_t)(parameter & 0xff));       // Little endian (yes, it is most significant bit first and least significant byte first)
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fb3a 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((uint8_t)(parameter >> 8));
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fb33 	bl	800135c <HAL_SPI_Write>
  
  HAL_SPI_Disable();
 8000cf6:	f000 faeb 	bl	80012d0 <HAL_SPI_Disable>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <wr8>:

void wr8(uint32_t address, uint8_t parameter)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Enable();
 8000d0e:	f000 fad3 	bl	80012b8 <HAL_SPI_Enable>
  
  HAL_SPI_Write((uint8_t)((address >> 16) | 0x80)); // RAM_REG = 0x302000 and high bit is set - result always 0xB0
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fb1c 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((uint8_t)(address >> 8));           // Next byte of the register address   
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	0a1b      	lsrs	r3, r3, #8
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fb16 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((uint8_t)(address));                // Low byte of register address - usually just the 1 byte offset
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fb11 	bl	800135c <HAL_SPI_Write>
  
  HAL_SPI_Write(parameter);             
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fb0d 	bl	800135c <HAL_SPI_Write>
  
  HAL_SPI_Disable();
 8000d42:	f000 fac5 	bl	80012d0 <HAL_SPI_Disable>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <rd32>:

uint32_t rd32(uint32_t address)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  uint8_t buf[4];
  uint32_t Data32;
  
  HAL_SPI_Enable();
 8000d56:	f000 faaf 	bl	80012b8 <HAL_SPI_Enable>
  
  HAL_SPI_Write((address >> 16) & 0x3F);    
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	0c1b      	lsrs	r3, r3, #16
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 faf8 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((address >> 8) & 0xff);    
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 faf2 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write(address & 0xff);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 faed 	bl	800135c <HAL_SPI_Write>
  
  HAL_SPI_ReadBuffer(buf, 4);
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	2104      	movs	r1, #4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fac7 	bl	800131c <HAL_SPI_ReadBuffer>
  
  HAL_SPI_Disable();
 8000d8e:	f000 fa9f 	bl	80012d0 <HAL_SPI_Disable>
  
  Data32 = buf[0] + ((uint32_t)buf[1] << 8) + ((uint32_t)buf[2] << 16) + ((uint32_t)buf[3] << 24);
 8000d92:	7a3b      	ldrb	r3, [r7, #8]
 8000d94:	461a      	mov	r2, r3
 8000d96:	7a7b      	ldrb	r3, [r7, #9]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	441a      	add	r2, r3
 8000d9c:	7abb      	ldrb	r3, [r7, #10]
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	441a      	add	r2, r3
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	061b      	lsls	r3, r3, #24
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  return (Data32);  
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <rd16>:

uint16_t rd16(uint32_t address)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = { 0,0 };
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	733b      	strb	r3, [r7, #12]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	737b      	strb	r3, [r7, #13]
    
  HAL_SPI_Enable();
 8000dc4:	f000 fa78 	bl	80012b8 <HAL_SPI_Enable>
  
  HAL_SPI_Write((address >> 16) & 0x3F);    
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0c1b      	lsrs	r3, r3, #16
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fac1 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((address >> 8) & 0xff);    
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fabb 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write(address & 0xff);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fab6 	bl	800135c <HAL_SPI_Write>
  
  HAL_SPI_ReadBuffer(buf, 2);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2102      	movs	r1, #2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fa90 	bl	800131c <HAL_SPI_ReadBuffer>
  
  HAL_SPI_Disable();
 8000dfc:	f000 fa68 	bl	80012d0 <HAL_SPI_Disable>
  
  uint16_t Data16 = buf[0] + ((uint16_t)buf[1] << 8);
 8000e00:	7b3b      	ldrb	r3, [r7, #12]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	7b7b      	ldrb	r3, [r7, #13]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4413      	add	r3, r2
 8000e0e:	81fb      	strh	r3, [r7, #14]
  return (Data16);  
 8000e10:	89fb      	ldrh	r3, [r7, #14]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <rd8>:

uint8_t rd8(uint32_t address)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  uint8_t buf[1];
  
  HAL_SPI_Enable();
 8000e22:	f000 fa49 	bl	80012b8 <HAL_SPI_Enable>
  
  HAL_SPI_Write((address >> 16) & 0x3F);    
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	0c1b      	lsrs	r3, r3, #16
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fa92 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write((address >> 8) & 0xff);    
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0a1b      	lsrs	r3, r3, #8
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fa8c 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write(address & 0xff);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fa87 	bl	800135c <HAL_SPI_Write>
  
  HAL_SPI_ReadBuffer(buf, 1);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	2101      	movs	r1, #1
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fa61 	bl	800131c <HAL_SPI_ReadBuffer>
  
  HAL_SPI_Disable();
 8000e5a:	f000 fa39 	bl	80012d0 <HAL_SPI_Disable>
  
  return (buf[0]);  
 8000e5e:	7b3b      	ldrb	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <Send_CMD>:

// *** Send_Cmd() - this is like cmd() in (some) Eve docs - sends 32 bits but does not update the write pointer ***
// FT81x Series Programmers Guide Section 5.1.1 - Circular Buffer (AKA "the FIFO" and "Command buffer" and "CoProcessor")
// Don't miss section 5.3 - Interaction with RAM_DL
void Send_CMD(uint32_t data)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  wr32(FifoWriteLocation + RAM_CMD, data);                         // write the command at the globally tracked "write pointer" for the FIFO
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <Send_CMD+0x3c>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	f503 1342 	add.w	r3, r3, #3178496	; 0x308000
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fedb 	bl	8000c36 <wr32>

  FifoWriteLocation += FT_CMD_SIZE;                                // Increment the Write Address by the size of a command - which we just sent
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <Send_CMD+0x3c>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	3304      	adds	r3, #4
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <Send_CMD+0x3c>)
 8000e8a:	801a      	strh	r2, [r3, #0]
  FifoWriteLocation %= FT_CMD_FIFO_SIZE;                           // Wrap the address to the FIFO space
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <Send_CMD+0x3c>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <Send_CMD+0x3c>)
 8000e98:	801a      	strh	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000008c 	.word	0x2000008c

08000ea8 <UpdateFIFO>:

// UpdateFIFO - Cause the CoProcessor to realize that it has work to do in the form of a 
// differential between the read pointer and write pointer.  The CoProcessor (FIFO or "Command buffer") does
// nothing until you tell it that the write position in the FIFO RAM has changed
void UpdateFIFO(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  wr16(REG_CMD_WRITE + RAM_REG, FifoWriteLocation);               // We manually update the write position pointer
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <UpdateFIFO+0x14>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <UpdateFIFO+0x18>)
 8000eb4:	f7ff fef7 	bl	8000ca6 <wr16>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000008c 	.word	0x2000008c
 8000ec0:	003020fc 	.word	0x003020fc

08000ec4 <Cmd_READ_REG_ID>:

// Read the specific ID register and return TRUE if it is the expected 0x7C otherwise.
uint8_t Cmd_READ_REG_ID(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  uint8_t readData[2];
  readData[0] = 0x00;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	713b      	strb	r3, [r7, #4]
  readData[1] = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	717b      	strb	r3, [r7, #5]
  HAL_SPI_Enable();
 8000ed2:	f000 f9f1 	bl	80012b8 <HAL_SPI_Enable>
  HAL_SPI_Write(0x30);                   // Base address RAM_REG = 0x302000
 8000ed6:	2030      	movs	r0, #48	; 0x30
 8000ed8:	f000 fa40 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write(0x20);    
 8000edc:	2020      	movs	r0, #32
 8000ede:	f000 fa3d 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_Write(REG_ID);                 // REG_ID offset = 0x00
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fa3a 	bl	800135c <HAL_SPI_Write>
  HAL_SPI_ReadBuffer(readData, 1);       // There was a dummy read of the first byte in there
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2101      	movs	r1, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fa15 	bl	800131c <HAL_SPI_ReadBuffer>
  HAL_SPI_Disable();
 8000ef2:	f000 f9ed 	bl	80012d0 <HAL_SPI_Disable>
  
  if (readData[0] == 0x7C)           // FT81x Datasheet section 5.1, Table 5-2. Return value always 0x7C
 8000ef6:	793b      	ldrb	r3, [r7, #4]
 8000ef8:	2b7c      	cmp	r3, #124	; 0x7c
 8000efa:	d101      	bne.n	8000f00 <Cmd_READ_REG_ID+0x3c>
  {
//    Log("\nGood ID: 0x%02x\n", readData[0]);
    return 1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <Cmd_READ_REG_ID+0x3e>
  }
  else
  {
//    Log("0x%02x ", readData[0]);
    return 0;
 8000f00:	2300      	movs	r3, #0
  }
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <Cmd_Text>:
  free(data);
}

// *** Draw Text - FT81x Series Programmers Guide Section 5.41 ***************************************************
void Cmd_Text(uint16_t x, uint16_t y, uint16_t font, uint16_t options, const char* str)
{
 8000f0a:	b590      	push	{r4, r7, lr}
 8000f0c:	b087      	sub	sp, #28
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4604      	mov	r4, r0
 8000f12:	4608      	mov	r0, r1
 8000f14:	4611      	mov	r1, r2
 8000f16:	461a      	mov	r2, r3
 8000f18:	4623      	mov	r3, r4
 8000f1a:	80fb      	strh	r3, [r7, #6]
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	80bb      	strh	r3, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	803b      	strh	r3, [r7, #0]
  uint16_t DataPtr, LoopCount, StrPtr;
  
  uint16_t length = (uint16_t) strlen(str);
 8000f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f2a:	f7ff f961 	bl	80001f0 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	823b      	strh	r3, [r7, #16]
  if(!length) 
 8000f32:	8a3b      	ldrh	r3, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 8087 	beq.w	8001048 <Cmd_Text+0x13e>
    return; 
  
  uint32_t* data = (uint32_t*) calloc((length / 4) + 1, sizeof(uint32_t)); // Allocate memory for the string expansion
 8000f3a:	8a3b      	ldrh	r3, [r7, #16]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	2104      	movs	r1, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 facb 	bl	80034e0 <calloc>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	60fb      	str	r3, [r7, #12]
  
  StrPtr = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	827b      	strh	r3, [r7, #18]
  for(DataPtr=0; DataPtr<(length/4); ++DataPtr, StrPtr=StrPtr+4)
 8000f52:	2300      	movs	r3, #0
 8000f54:	82fb      	strh	r3, [r7, #22]
 8000f56:	e024      	b.n	8000fa2 <Cmd_Text+0x98>
    data[DataPtr] = (uint32_t)str[StrPtr+3]<<24 | (uint32_t)str[StrPtr+2]<<16 | (uint32_t)str[StrPtr+1]<<8 | (uint32_t)str[StrPtr];
 8000f58:	8a7b      	ldrh	r3, [r7, #18]
 8000f5a:	3303      	adds	r3, #3
 8000f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f5e:	4413      	add	r3, r2
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	061a      	lsls	r2, r3, #24
 8000f64:	8a7b      	ldrh	r3, [r7, #18]
 8000f66:	3302      	adds	r3, #2
 8000f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f6a:	440b      	add	r3, r1
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	041b      	lsls	r3, r3, #16
 8000f70:	431a      	orrs	r2, r3
 8000f72:	8a7b      	ldrh	r3, [r7, #18]
 8000f74:	3301      	adds	r3, #1
 8000f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f78:	440b      	add	r3, r1
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	8a7b      	ldrh	r3, [r7, #18]
 8000f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f84:	440b      	add	r3, r1
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	8afb      	ldrh	r3, [r7, #22]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	68f9      	ldr	r1, [r7, #12]
 8000f90:	440b      	add	r3, r1
 8000f92:	4302      	orrs	r2, r0
 8000f94:	601a      	str	r2, [r3, #0]
  for(DataPtr=0; DataPtr<(length/4); ++DataPtr, StrPtr=StrPtr+4)
 8000f96:	8afb      	ldrh	r3, [r7, #22]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	82fb      	strh	r3, [r7, #22]
 8000f9c:	8a7b      	ldrh	r3, [r7, #18]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	827b      	strh	r3, [r7, #18]
 8000fa2:	8a3b      	ldrh	r3, [r7, #16]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	8afa      	ldrh	r2, [r7, #22]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3d4      	bcc.n	8000f58 <Cmd_Text+0x4e>
  
  for(LoopCount=0; LoopCount<(length%4); ++LoopCount, ++StrPtr)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	82bb      	strh	r3, [r7, #20]
 8000fb2:	e018      	b.n	8000fe6 <Cmd_Text+0xdc>
    data[DataPtr] |= (uint32_t)str[StrPtr] << (LoopCount*8);
 8000fb4:	8afb      	ldrh	r3, [r7, #22]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	6819      	ldr	r1, [r3, #0]
 8000fbe:	8a7b      	ldrh	r3, [r7, #18]
 8000fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	8abb      	ldrh	r3, [r7, #20]
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	8afb      	ldrh	r3, [r7, #22]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	4403      	add	r3, r0
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
  for(LoopCount=0; LoopCount<(length%4); ++LoopCount, ++StrPtr)
 8000fda:	8abb      	ldrh	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	82bb      	strh	r3, [r7, #20]
 8000fe0:	8a7b      	ldrh	r3, [r7, #18]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	827b      	strh	r3, [r7, #18]
 8000fe6:	8a3b      	ldrh	r3, [r7, #16]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	8aba      	ldrh	r2, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d3df      	bcc.n	8000fb4 <Cmd_Text+0xaa>

  // Set up the command
  Send_CMD(CMD_TEXT);
 8000ff4:	f06f 00f3 	mvn.w	r0, #243	; 0xf3
 8000ff8:	f7ff ff36 	bl	8000e68 <Send_CMD>
  Send_CMD( ((uint32_t)y << 16) | x );
 8000ffc:	88bb      	ldrh	r3, [r7, #4]
 8000ffe:	041a      	lsls	r2, r3, #16
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	4313      	orrs	r3, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff2f 	bl	8000e68 <Send_CMD>
  Send_CMD( ((uint32_t)options << 16) | font );
 800100a:	883b      	ldrh	r3, [r7, #0]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	4313      	orrs	r3, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff28 	bl	8000e68 <Send_CMD>

  // Send out the text
  for(LoopCount = 0; LoopCount <= length/4; LoopCount++)
 8001018:	2300      	movs	r3, #0
 800101a:	82bb      	strh	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <Cmd_Text+0x12a>
    Send_CMD(data[LoopCount]);  // These text bytes get sucked up 4 at a time and fired at the FIFO
 800101e:	8abb      	ldrh	r3, [r7, #20]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff1d 	bl	8000e68 <Send_CMD>
  for(LoopCount = 0; LoopCount <= length/4; LoopCount++)
 800102e:	8abb      	ldrh	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	82bb      	strh	r3, [r7, #20]
 8001034:	8a3b      	ldrh	r3, [r7, #16]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	b29b      	uxth	r3, r3
 800103a:	8aba      	ldrh	r2, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	d9ee      	bls.n	800101e <Cmd_Text+0x114>

  free(data);
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f002 fa7f 	bl	8003544 <free>
 8001046:	e000      	b.n	800104a <Cmd_Text+0x140>
    return; 
 8001048:	bf00      	nop
}
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}

08001050 <Cmd_Calibrate>:
}

// *** Calibrate Touch Digitizer - FT81x Series Programmers Guide Section 5.52 ***********************************
// * This business about "result" in the manual really seems to be simply leftover cruft of no purpose - send zero
void Cmd_Calibrate(uint32_t result)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  Send_CMD(CMD_CALIBRATE);
 8001058:	f06f 00ea 	mvn.w	r0, #234	; 0xea
 800105c:	f7ff ff04 	bl	8000e68 <Send_CMD>
  Send_CMD(result);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff01 	bl	8000e68 <Send_CMD>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <CoProFIFO_FreeSpace>:
// *** Utility and helper functions ******************************************************************************
// ***************************************************************************************************************

// Find the space available in the GPU AKA CoProcessor AKA command buffer AKA FIFO
uint16_t CoProFIFO_FreeSpace(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  uint16_t cmdBufferDiff, cmdBufferRd, cmdBufferWr, retval;
  
  cmdBufferRd = rd16(REG_CMD_READ + RAM_REG);
 8001076:	480f      	ldr	r0, [pc, #60]	; (80010b4 <CoProFIFO_FreeSpace+0x44>)
 8001078:	f7ff fe9c 	bl	8000db4 <rd16>
 800107c:	4603      	mov	r3, r0
 800107e:	80fb      	strh	r3, [r7, #6]
  cmdBufferWr = rd16(REG_CMD_WRITE + RAM_REG);
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <CoProFIFO_FreeSpace+0x48>)
 8001082:	f7ff fe97 	bl	8000db4 <rd16>
 8001086:	4603      	mov	r3, r0
 8001088:	80bb      	strh	r3, [r7, #4]
    
  cmdBufferDiff = (cmdBufferWr-cmdBufferRd) % FT_CMD_FIFO_SIZE; // FT81x Programmers Guide 5.1.1
 800108a:	88ba      	ldrh	r2, [r7, #4]
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	425a      	negs	r2, r3
 8001092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001096:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800109a:	bf58      	it	pl
 800109c:	4253      	negpl	r3, r2
 800109e:	807b      	strh	r3, [r7, #2]
  retval = (FT_CMD_FIFO_SIZE - 4) - cmdBufferDiff;
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80010a6:	330c      	adds	r3, #12
 80010a8:	803b      	strh	r3, [r7, #0]
  return (retval);
 80010aa:	883b      	ldrh	r3, [r7, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	003020f8 	.word	0x003020f8
 80010b8:	003020fc 	.word	0x003020fc

080010bc <Wait4CoProFIFO>:

// Sit and wait until there are the specified number of bytes free in the <GPU/CoProcessor> incoming FIFO
void Wait4CoProFIFO(uint32_t room)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
   uint16_t getfreespace;
   
   do {
     getfreespace = CoProFIFO_FreeSpace();
 80010c4:	f7ff ffd4 	bl	8001070 <CoProFIFO_FreeSpace>
 80010c8:	4603      	mov	r3, r0
 80010ca:	81fb      	strh	r3, [r7, #14]
   }while(getfreespace < room);
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <Wait4CoProFIFO+0x8>
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <Wait4CoProFIFOEmpty>:

// Sit and wait until the CoPro FIFO is empty
// Detect operational errors and print the error and stop.
void Wait4CoProFIFOEmpty(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
  uint16_t ReadReg;
  uint8_t ErrChar;
  uint8_t buffy[2];
  do
  {
    ReadReg = rd16(REG_CMD_READ + RAM_REG);
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <Wait4CoProFIFOEmpty+0xbc>)
 80010e4:	f7ff fe66 	bl	8000db4 <rd16>
 80010e8:	4603      	mov	r3, r0
 80010ea:	81bb      	strh	r3, [r7, #12]
    if(ReadReg == 0xFFF)
 80010ec:	89bb      	ldrh	r3, [r7, #12]
 80010ee:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d144      	bne.n	8001180 <Wait4CoProFIFOEmpty+0xa4>
    {
      // this is a error which would require sophistication to fix and continue but we fake it somewhat unsuccessfully
      Log("\n");
 80010f6:	200a      	movs	r0, #10
 80010f8:	f002 fb0e 	bl	8003718 <putchar>
      uint8_t Offset = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
      do
      {
        // Get the error character and display it
        ErrChar = rd8(RAM_ERR_REPORT + Offset);
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	f503 1342 	add.w	r3, r3, #3178496	; 0x308000
 8001106:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe85 	bl	8000e1a <rd8>
 8001110:	4603      	mov	r3, r0
 8001112:	72fb      	strb	r3, [r7, #11]
        Offset++;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3301      	adds	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
        sprintf(buffy, "%c", ErrChar);
 800111a:	7afa      	ldrb	r2, [r7, #11]
 800111c:	463b      	mov	r3, r7
 800111e:	491f      	ldr	r1, [pc, #124]	; (800119c <Wait4CoProFIFOEmpty+0xc0>)
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fb1d 	bl	8003760 <siprintf>
        Log(buffy);
 8001126:	463b      	mov	r3, r7
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fadd 	bl	80036e8 <iprintf>
      }while ( (ErrChar != 0) && (Offset < 128) ); // when the last stuffed character was null, we are done
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <Wait4CoProFIFOEmpty+0x60>
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	2b00      	cmp	r3, #0
 800113a:	dae1      	bge.n	8001100 <Wait4CoProFIFOEmpty+0x24>
      Log("\n");
 800113c:	200a      	movs	r0, #10
 800113e:	f002 faeb 	bl	8003718 <putchar>

      // Eve is unhappy - needs a paddling.
      uint32_t Patch_Add = rd32(REG_COPRO_PATCH_PTR + RAM_REG);
 8001142:	4817      	ldr	r0, [pc, #92]	; (80011a0 <Wait4CoProFIFOEmpty+0xc4>)
 8001144:	f7ff fe03 	bl	8000d4e <rd32>
 8001148:	6078      	str	r0, [r7, #4]
      wr8(REG_CPU_RESET + RAM_REG, 1);
 800114a:	2101      	movs	r1, #1
 800114c:	4815      	ldr	r0, [pc, #84]	; (80011a4 <Wait4CoProFIFOEmpty+0xc8>)
 800114e:	f7ff fdd8 	bl	8000d02 <wr8>
      wr8(REG_CMD_READ + RAM_REG, 0);
 8001152:	2100      	movs	r1, #0
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <Wait4CoProFIFOEmpty+0xbc>)
 8001156:	f7ff fdd4 	bl	8000d02 <wr8>
      wr8(REG_CMD_WRITE + RAM_REG, 0);
 800115a:	2100      	movs	r1, #0
 800115c:	4812      	ldr	r0, [pc, #72]	; (80011a8 <Wait4CoProFIFOEmpty+0xcc>)
 800115e:	f7ff fdd0 	bl	8000d02 <wr8>
      wr8(REG_CMD_DL + RAM_REG, 0);
 8001162:	2100      	movs	r1, #0
 8001164:	4811      	ldr	r0, [pc, #68]	; (80011ac <Wait4CoProFIFOEmpty+0xd0>)
 8001166:	f7ff fdcc 	bl	8000d02 <wr8>
      wr8(REG_CPU_RESET + RAM_REG, 0);
 800116a:	2100      	movs	r1, #0
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <Wait4CoProFIFOEmpty+0xc8>)
 800116e:	f7ff fdc8 	bl	8000d02 <wr8>
      wr32(REG_COPRO_PATCH_PTR + RAM_REG, Patch_Add);
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <Wait4CoProFIFOEmpty+0xc4>)
 8001176:	f7ff fd5e 	bl	8000c36 <wr32>
      HAL_Delay(250);  // we already saw one error message and we don't need to see then 1000 times a second
 800117a:	20fa      	movs	r0, #250	; 0xfa
 800117c:	f000 fd2c 	bl	8001bd8 <HAL_Delay>
    }
  }while( ReadReg != rd16(REG_CMD_WRITE + RAM_REG) );
 8001180:	4809      	ldr	r0, [pc, #36]	; (80011a8 <Wait4CoProFIFOEmpty+0xcc>)
 8001182:	f7ff fe17 	bl	8000db4 <rd16>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	89bb      	ldrh	r3, [r7, #12]
 800118c:	4293      	cmp	r3, r2
 800118e:	d1a8      	bne.n	80010e2 <Wait4CoProFIFOEmpty+0x6>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	003020f8 	.word	0x003020f8
 800119c:	08004c78 	.word	0x08004c78
 80011a0:	00309162 	.word	0x00309162
 80011a4:	00302020 	.word	0x00302020
 80011a8:	003020fc 	.word	0x003020fc
 80011ac:	00302100 	.word	0x00302100

080011b0 <StartCoProTransfer>:

// Every CoPro transaction starts with enabling the SPI and sending an address
void StartCoProTransfer(uint32_t address, uint8_t reading)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Enable();
 80011bc:	f000 f87c 	bl	80012b8 <HAL_SPI_Enable>
  if (reading){
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d014      	beq.n	80011f0 <StartCoProTransfer+0x40>
    HAL_SPI_Write(address >> 16);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	0c1b      	lsrs	r3, r3, #16
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f8c5 	bl	800135c <HAL_SPI_Write>
    HAL_SPI_Write(address >> 8);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f8bf 	bl	800135c <HAL_SPI_Write>
    HAL_SPI_Write(address);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f8ba 	bl	800135c <HAL_SPI_Write>
    HAL_SPI_Write(0);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f000 f8b7 	bl	800135c <HAL_SPI_Write>
  }else{
    HAL_SPI_Write((address >> 16) | 0x80); 
    HAL_SPI_Write(address >> 8);           
    HAL_SPI_Write(address);                
  }
}
 80011ee:	e013      	b.n	8001218 <StartCoProTransfer+0x68>
    HAL_SPI_Write((address >> 16) | 0x80); 
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	0c1b      	lsrs	r3, r3, #16
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f8ad 	bl	800135c <HAL_SPI_Write>
    HAL_SPI_Write(address >> 8);           
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f8a7 	bl	800135c <HAL_SPI_Write>
    HAL_SPI_Write(address);                
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f8a2 	bl	800135c <HAL_SPI_Write>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <CoProWrCmdBuf>:

// *** CoProWrCmdBuf() - Transfer a buffer into the CoPro FIFO as part of an ongoing command operation ***********
void CoProWrCmdBuf(const uint8_t *buff, uint32_t count)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t TransferSize = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  int32_t Remaining = count; // signed
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	60bb      	str	r3, [r7, #8]
    //
    // Since the FIFO is 4K in size, but the RAM_G space is 1M in size, you can not, obviously, send all
    // the possible RAM_G data through the FIFO in one step.  Also, since the Eve is not capable of updating
    // it's own FIFO pointer as data is written, you will need to intermittently tell Eve to go process some
    // FIFO in order to make room in the FIFO for more RAM_G data.    
    Wait4CoProFIFO(WorkBuffSz);                            // It is reasonable to wait for a small space instead of firing data piecemeal
 8001232:	2040      	movs	r0, #64	; 0x40
 8001234:	f7ff ff42 	bl	80010bc <Wait4CoProFIFO>

    if (Remaining > WorkBuffSz)                            // Remaining data exceeds the size of our buffer
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b40      	cmp	r3, #64	; 0x40
 800123c:	dd02      	ble.n	8001244 <CoProWrCmdBuf+0x24>
      TransferSize = WorkBuffSz;                           // So set the transfer size to that of our buffer
 800123e:	2340      	movs	r3, #64	; 0x40
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e007      	b.n	8001254 <CoProWrCmdBuf+0x34>
    else
    {
      TransferSize = Remaining;                            // Set size to this last dribble of data
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60fb      	str	r3, [r7, #12]
      TransferSize = (TransferSize + 3) & 0xFFC;           // 4 byte alignment
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1cda      	adds	r2, r3, #3
 800124c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
    }
    
    StartCoProTransfer(FifoWriteLocation + RAM_CMD, false);// Base address of the Command Buffer plus our offset into it - Start SPI transaction
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <CoProWrCmdBuf+0x90>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	f503 1342 	add.w	r3, r3, #3178496	; 0x308000
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ffa6 	bl	80011b0 <StartCoProTransfer>
    
    HAL_SPI_WriteBuffer((uint8_t*)buff, TransferSize);         // write the little bit for which we found space
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f83e 	bl	80012e8 <HAL_SPI_WriteBuffer>
    buff += TransferSize;                                  // move the working data read pointer to the next fresh data
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	607b      	str	r3, [r7, #4]

    FifoWriteLocation  = (FifoWriteLocation + TransferSize) % FT_CMD_FIFO_SIZE;  
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <CoProWrCmdBuf+0x90>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4413      	add	r3, r2
 800127e:	b29b      	uxth	r3, r3
 8001280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <CoProWrCmdBuf+0x90>)
 8001288:	801a      	strh	r2, [r3, #0]
    HAL_SPI_Disable();                                         // End SPI transaction with the FIFO
 800128a:	f000 f821 	bl	80012d0 <HAL_SPI_Disable>
    
    wr16(REG_CMD_WRITE + RAM_REG, FifoWriteLocation);      // Manually update the write position pointer to initiate processing of the FIFO
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <CoProWrCmdBuf+0x90>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <CoProWrCmdBuf+0x94>)
 8001296:	f7ff fd06 	bl	8000ca6 <wr16>
    Remaining -= TransferSize;                             // reduce what we want by what we sent
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	60bb      	str	r3, [r7, #8]
    
  }while (Remaining > 0);                                  // keep going as long as we still want more
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	dcc4      	bgt.n	8001232 <CoProWrCmdBuf+0x12>
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000008c 	.word	0x2000008c
 80012b4:	003020fc 	.word	0x003020fc

080012b8 <HAL_SPI_Enable>:
#include "main.h"
extern SPI_HandleTypeDef hspi3;

extern void MX_SPI1_Init();
void HAL_SPI_Enable(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EVE_CS_GPIO_Port, EVE_CS_Pin, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <HAL_SPI_Enable+0x14>)
 80012c4:	f000 ff3a 	bl	800213c <HAL_GPIO_WritePin>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40020000 	.word	0x40020000

080012d0 <HAL_SPI_Disable>:

void HAL_SPI_Disable(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EVE_CS_GPIO_Port, EVE_CS_Pin, 1);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <HAL_SPI_Disable+0x14>)
 80012dc:	f000 ff2e 	bl	800213c <HAL_GPIO_WritePin>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40020000 	.word	0x40020000

080012e8 <HAL_SPI_WriteBuffer>:

volatile int LastResult = 0;
void HAL_SPI_WriteBuffer(uint8_t *Buffer, uint32_t Length)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Enable();
 80012f2:	f7ff ffe1 	bl	80012b8 <HAL_SPI_Enable>
	volatile int result = HAL_SPI_Transmit(&hspi3, Buffer, Length, 1000);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <HAL_SPI_WriteBuffer+0x30>)
 8001302:	f001 fbce 	bl	8002aa2 <HAL_SPI_Transmit>
 8001306:	4603      	mov	r3, r0
 8001308:	60fb      	str	r3, [r7, #12]
	HAL_SPI_Disable();
 800130a:	f7ff ffe1 	bl	80012d0 <HAL_SPI_Disable>
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200000b0 	.word	0x200000b0

0800131c <HAL_SPI_ReadBuffer>:

void HAL_SPI_ReadBuffer(uint8_t *Buffer, uint32_t Length)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
	//EVE requires one dummy read/write before actual data can be read 
	Buffer[0] = 0;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
	volatile int result = HAL_SPI_Transmit(&hspi3, Buffer, 1, 1000);
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	2201      	movs	r2, #1
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <HAL_SPI_ReadBuffer+0x3c>)
 8001336:	f001 fbb4 	bl	8002aa2 <HAL_SPI_Transmit>
 800133a:	4603      	mov	r3, r0
 800133c:	60fb      	str	r3, [r7, #12]
	HAL_SPI_Receive(&hspi3, Buffer, Length,1000);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b29a      	uxth	r2, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <HAL_SPI_ReadBuffer+0x3c>)
 800134a:	f001 fce6 	bl	8002d1a <HAL_SPI_Receive>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000b0 	.word	0x200000b0

0800135c <HAL_SPI_Write>:

uint8_t HAL_SPI_Write(uint8_t data)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	volatile int result = HAL_SPI_Transmit(&hspi3, &data, 1, 1000);
 8001366:	1df9      	adds	r1, r7, #7
 8001368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136c:	2201      	movs	r2, #1
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_SPI_Write+0x28>)
 8001370:	f001 fb97 	bl	8002aa2 <HAL_SPI_Transmit>
 8001374:	4603      	mov	r3, r0
 8001376:	60fb      	str	r3, [r7, #12]
	return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200000b0 	.word	0x200000b0

08001388 <HAL_Eve_Reset_HW>:

void HAL_Eve_Reset_HW(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(EVE_PD_GPIO_Port, EVE_PD_Pin, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2140      	movs	r1, #64	; 0x40
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <HAL_Eve_Reset_HW+0x40>)
 8001392:	f000 fed3 	bl	800213c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EVE_CS_GPIO_Port, EVE_CS_Pin, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800139c:	480b      	ldr	r0, [pc, #44]	; (80013cc <HAL_Eve_Reset_HW+0x44>)
 800139e:	f000 fecd 	bl	800213c <HAL_GPIO_WritePin>
	  HAL_Delay(50); 
 80013a2:	2032      	movs	r0, #50	; 0x32
 80013a4:	f000 fc18 	bl	8001bd8 <HAL_Delay>
	  HAL_GPIO_WritePin(EVE_PD_GPIO_Port, EVE_PD_Pin, 1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2140      	movs	r1, #64	; 0x40
 80013ac:	4806      	ldr	r0, [pc, #24]	; (80013c8 <HAL_Eve_Reset_HW+0x40>)
 80013ae:	f000 fec5 	bl	800213c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EVE_CS_GPIO_Port, EVE_CS_Pin, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <HAL_Eve_Reset_HW+0x44>)
 80013ba:	f000 febf 	bl	800213c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80013be:	2064      	movs	r0, #100	; 0x64
 80013c0:	f000 fc0a 	bl	8001bd8 <HAL_Delay>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021800 	.word	0x40021800
 80013cc:	40020000 	.word	0x40020000

080013d0 <MakeScreen_MatrixOrbital>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//MakeScreen_MatrixOrbital draws a blue dot in the center screen, along
//with the text "MATRIX ORBITAL"
void MakeScreen_MatrixOrbital(uint8_t DotSize)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	Send_CMD(CMD_DLSTART);                  // Start a new display list
 80013da:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80013de:	f7ff fd43 	bl	8000e68 <Send_CMD>
	Send_CMD(CLEAR_COLOR_RGB(0, 0, 0));     // Determine the clear screen color
 80013e2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80013e6:	f7ff fd3f 	bl	8000e68 <Send_CMD>
	Send_CMD(CLEAR(1, 1, 1));	            // Clear the screen and the curren display list
 80013ea:	4838      	ldr	r0, [pc, #224]	; (80014cc <MakeScreen_MatrixOrbital+0xfc>)
 80013ec:	f7ff fd3c 	bl	8000e68 <Send_CMD>
	Send_CMD(TAG(1));                       // Tag the blue dot with a touch ID
 80013f0:	4837      	ldr	r0, [pc, #220]	; (80014d0 <MakeScreen_MatrixOrbital+0x100>)
 80013f2:	f7ff fd39 	bl	8000e68 <Send_CMD>
	Send_CMD(COLOR_RGB(0, 0, 0));           // change colour to black
 80013f6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80013fa:	f7ff fd35 	bl	8000e68 <Send_CMD>
	Send_CMD(BEGIN(RECTS));                 // start drawing point
 80013fe:	4835      	ldr	r0, [pc, #212]	; (80014d4 <MakeScreen_MatrixOrbital+0x104>)
 8001400:	f7ff fd32 	bl	8000e68 <Send_CMD>
	Send_CMD(VERTEX2F(0,0));
 8001404:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001408:	f7ff fd2e 	bl	8000e68 <Send_CMD>
	Send_CMD(VERTEX2F(Display_Width()*16,Display_Height()*16));
 800140c:	f7ff f8c8 	bl	80005a0 <Display_Width>
 8001410:	4603      	mov	r3, r0
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	03db      	lsls	r3, r3, #15
 8001416:	4c30      	ldr	r4, [pc, #192]	; (80014d8 <MakeScreen_MatrixOrbital+0x108>)
 8001418:	401c      	ands	r4, r3
 800141a:	f7ff f8cd 	bl	80005b8 <Display_Height>
 800141e:	4603      	mov	r3, r0
 8001420:	011a      	lsls	r2, r3, #4
 8001422:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001426:	4013      	ands	r3, r2
 8001428:	4323      	orrs	r3, r4
 800142a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fd1a 	bl	8000e68 <Send_CMD>
	Send_CMD(BEGIN(POINTS));                 // start drawing point
 8001434:	4829      	ldr	r0, [pc, #164]	; (80014dc <MakeScreen_MatrixOrbital+0x10c>)
 8001436:	f7ff fd17 	bl	8000e68 <Send_CMD>
	Send_CMD(COLOR_RGB(26, 26, 192));        // change colour to blue
 800143a:	4829      	ldr	r0, [pc, #164]	; (80014e0 <MakeScreen_MatrixOrbital+0x110>)
 800143c:	f7ff fd14 	bl	8000e68 <Send_CMD>
	Send_CMD(POINT_SIZE(DotSize * 16));      // set point size to DotSize pixels. Points = (pixels x 16)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	461a      	mov	r2, r3
 8001446:	f641 73f0 	movw	r3, #8176	; 0x1ff0
 800144a:	4013      	ands	r3, r2
 800144c:	f043 6350 	orr.w	r3, r3, #218103808	; 0xd000000
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fd09 	bl	8000e68 <Send_CMD>
	Send_CMD(VERTEX2II(Display_Width() / 2, Display_Height() / 2, 0, 0));     // place blue point
 8001456:	f7ff f8a3 	bl	80005a0 <Display_Width>
 800145a:	4603      	mov	r3, r0
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	055b      	lsls	r3, r3, #21
 8001460:	4c20      	ldr	r4, [pc, #128]	; (80014e4 <MakeScreen_MatrixOrbital+0x114>)
 8001462:	401c      	ands	r4, r3
 8001464:	f7ff f8a8 	bl	80005b8 <Display_Height>
 8001468:	4603      	mov	r3, r0
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	031a      	lsls	r2, r3, #12
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <MakeScreen_MatrixOrbital+0x118>)
 8001470:	4013      	ands	r3, r2
 8001472:	4323      	orrs	r3, r4
 8001474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fcf5 	bl	8000e68 <Send_CMD>
	Send_CMD(END());                         // end drawing point
 800147e:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
 8001482:	f7ff fcf1 	bl	8000e68 <Send_CMD>
	Send_CMD(COLOR_RGB(255, 255, 255));      //Change color to white for text
 8001486:	f06f 407b 	mvn.w	r0, #4211081216	; 0xfb000000
 800148a:	f7ff fced 	bl	8000e68 <Send_CMD>
	Cmd_Text(Display_Width() / 2, Display_Height() / 2, 30, OPT_CENTER, " MATRIX         ORBITAL"); //Write text in the center of the screen
 800148e:	f7ff f887 	bl	80005a0 <Display_Width>
 8001492:	4603      	mov	r3, r0
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	b29c      	uxth	r4, r3
 8001498:	f7ff f88e 	bl	80005b8 <Display_Height>
 800149c:	4603      	mov	r3, r0
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	b299      	uxth	r1, r3
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MakeScreen_MatrixOrbital+0x11c>)
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014aa:	221e      	movs	r2, #30
 80014ac:	4620      	mov	r0, r4
 80014ae:	f7ff fd2c 	bl	8000f0a <Cmd_Text>
	Send_CMD(DISPLAY());                     //End the display list
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff fcd8 	bl	8000e68 <Send_CMD>
	Send_CMD(CMD_SWAP);                      //Swap commands into RAM
 80014b8:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 80014bc:	f7ff fcd4 	bl	8000e68 <Send_CMD>
	UpdateFIFO();                            // Trigger the CoProcessor to start processing the FIFO
 80014c0:	f7ff fcf2 	bl	8000ea8 <UpdateFIFO>
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	26000007 	.word	0x26000007
 80014d0:	03000001 	.word	0x03000001
 80014d4:	1f000009 	.word	0x1f000009
 80014d8:	3ff80000 	.word	0x3ff80000
 80014dc:	1f000002 	.word	0x1f000002
 80014e0:	041a1ac0 	.word	0x041a1ac0
 80014e4:	3fe00000 	.word	0x3fe00000
 80014e8:	001ff000 	.word	0x001ff000
 80014ec:	08004c7c 	.word	0x08004c7c

080014f0 <MakeScreen_Calibrate>:

// A calibration screen for the touch digitizer
void MakeScreen_Calibrate(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af02      	add	r7, sp, #8
  Send_CMD(CMD_DLSTART);
 80014f6:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80014fa:	f7ff fcb5 	bl	8000e68 <Send_CMD>
  Send_CMD(CLEAR_COLOR_RGB(0,0,0));
 80014fe:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001502:	f7ff fcb1 	bl	8000e68 <Send_CMD>
  Send_CMD(CLEAR(1,1,1));
 8001506:	480e      	ldr	r0, [pc, #56]	; (8001540 <MakeScreen_Calibrate+0x50>)
 8001508:	f7ff fcae 	bl	8000e68 <Send_CMD>
  Cmd_Text(100, 10, 27, OPT_CENTER, "Tap on the dots");
 800150c:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <MakeScreen_Calibrate+0x54>)
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001514:	221b      	movs	r2, #27
 8001516:	210a      	movs	r1, #10
 8001518:	2064      	movs	r0, #100	; 0x64
 800151a:	f7ff fcf6 	bl	8000f0a <Cmd_Text>
  Cmd_Calibrate(0);                                           // This widget generates a blocking screen that doesn't unblock until 3 dots have been touched
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff fd96 	bl	8001050 <Cmd_Calibrate>
  Send_CMD(DISPLAY());
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff fc9f 	bl	8000e68 <Send_CMD>
  Send_CMD(CMD_SWAP);
 800152a:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 800152e:	f7ff fc9b 	bl	8000e68 <Send_CMD>
  UpdateFIFO();                                               // Trigger the CoProcessor to start processing commands out of the FIFO
 8001532:	f7ff fcb9 	bl	8000ea8 <UpdateFIFO>

  Wait4CoProFIFOEmpty();                                      // wait here until the coprocessor has read and executed every pending command.
 8001536:	f7ff fdd1 	bl	80010dc <Wait4CoProFIFOEmpty>
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	26000007 	.word	0x26000007
 8001544:	08004c94 	.word	0x08004c94

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154e:	f000 fad1 	bl	8001af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001552:	f000 f82d 	bl	80015b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001556:	f000 f8c1 	bl	80016dc <MX_GPIO_Init>
  MX_SPI3_Init();
 800155a:	f000 f889 	bl	8001670 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  FT81x_Init(DISPLAY_50, BOARD_EVE2, TOUCH_TPC);
 800155e:	2202      	movs	r2, #2
 8001560:	2101      	movs	r1, #1
 8001562:	2002      	movs	r0, #2
 8001564:	f7ff f840 	bl	80005e8 <FT81x_Init>
  MakeScreen_MatrixOrbital(20);
 8001568:	2014      	movs	r0, #20
 800156a:	f7ff ff31 	bl	80013d0 <MakeScreen_MatrixOrbital>
  if (Display_Touch() == TOUCH_TPC)
 800156e:	f7ff f82f 	bl	80005d0 <Display_Touch>
 8001572:	4603      	mov	r3, r0
 8001574:	2b02      	cmp	r3, #2
 8001576:	d101      	bne.n	800157c <main+0x34>
  {
	  MakeScreen_Calibrate();
 8001578:	f7ff ffba 	bl	80014f0 <MakeScreen_Calibrate>
  }
  int LastTag = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //MakeScreen_MatrixOrbital(20 + rand() %50);
	  int Tag = rd8(REG_TOUCH_TAG + RAM_REG);                    // Check for touches
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <main+0x64>)
 8001582:	f7ff fc4a 	bl	8000e1a <rd8>
 8001586:	4603      	mov	r3, r0
 8001588:	603b      	str	r3, [r7, #0]
	  if (Tag != LastTag)
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	d0f6      	beq.n	8001580 <main+0x38>
	  {
		  MakeScreen_MatrixOrbital(20 + (Tag ? 20 : 0));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <main+0x54>
 8001598:	2328      	movs	r3, #40	; 0x28
 800159a:	e000      	b.n	800159e <main+0x56>
 800159c:	2314      	movs	r3, #20
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff16 	bl	80013d0 <MakeScreen_MatrixOrbital>
		  LastTag = Tag;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	607b      	str	r3, [r7, #4]
  {
 80015a8:	e7ea      	b.n	8001580 <main+0x38>
 80015aa:	bf00      	nop
 80015ac:	0030212c 	.word	0x0030212c

080015b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b094      	sub	sp, #80	; 0x50
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2230      	movs	r2, #48	; 0x30
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 ffd3 	bl	800356a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <SystemClock_Config+0xb8>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <SystemClock_Config+0xb8>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <SystemClock_Config+0xb8>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <SystemClock_Config+0xbc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <SystemClock_Config+0xbc>)
 80015fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <SystemClock_Config+0xbc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001610:	2302      	movs	r3, #2
 8001612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001614:	2301      	movs	r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001618:	2310      	movs	r3, #16
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800161c:	2300      	movs	r3, #0
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fda3 	bl	8002170 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001630:	f000 f8be 	bl	80017b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f001 f806 	bl	8002660 <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800165a:	f000 f8a9 	bl	80017b0 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	3750      	adds	r7, #80	; 0x50
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000

08001670 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_SPI3_Init+0x64>)
 8001676:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <MX_SPI3_Init+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_SPI3_Init+0x64>)
 800167c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001680:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_SPI3_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <MX_SPI3_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_SPI3_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_SPI3_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_SPI3_Init+0x64>)
 800169c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016a0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_SPI3_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <MX_SPI3_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_SPI3_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <MX_SPI3_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_SPI3_Init+0x64>)
 80016bc:	220a      	movs	r2, #10
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <MX_SPI3_Init+0x64>)
 80016c2:	f001 f965 	bl	8002990 <HAL_SPI_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80016cc:	f000 f870 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200000b0 	.word	0x200000b0
 80016d8:	40003c00 	.word	0x40003c00

080016dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <MX_GPIO_Init+0xc8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <MX_GPIO_Init+0xc8>)
 80016fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <MX_GPIO_Init+0xc8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <MX_GPIO_Init+0xc8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <MX_GPIO_Init+0xc8>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <MX_GPIO_Init+0xc8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_GPIO_Init+0xc8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <MX_GPIO_Init+0xc8>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_GPIO_Init+0xc8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INT_Pin|EVE_PD_Pin|IO2_Pin|IO3_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800174c:	4816      	ldr	r0, [pc, #88]	; (80017a8 <MX_GPIO_Init+0xcc>)
 800174e:	f000 fcf5 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001758:	4814      	ldr	r0, [pc, #80]	; (80017ac <MX_GPIO_Init+0xd0>)
 800175a:	f000 fcef 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_Pin EVE_PD_Pin IO2_Pin IO3_Pin */
  GPIO_InitStruct.Pin = INT_Pin|EVE_PD_Pin|IO2_Pin|IO3_Pin;
 800175e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	4619      	mov	r1, r3
 8001776:	480c      	ldr	r0, [pc, #48]	; (80017a8 <MX_GPIO_Init+0xcc>)
 8001778:	f000 fb36 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO3_Pin;
 800177c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_GPIO_Init+0xd0>)
 8001796:	f000 fb27 	bl	8001de8 <HAL_GPIO_Init>

}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40021800 	.word	0x40021800
 80017ac:	40020800 	.word	0x40020800

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_MspInit+0x4c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a0f      	ldr	r2, [pc, #60]	; (800180c <HAL_MspInit+0x4c>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_MspInit+0x4c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_MspInit+0x4c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_MspInit+0x4c>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_MspInit+0x4c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a29      	ldr	r2, [pc, #164]	; (80018d4 <HAL_SPI_MspInit+0xc4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d14b      	bne.n	80018ca <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_SPI_MspInit+0xc8>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_SPI_MspInit+0xc8>)
 800183c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_SPI_MspInit+0xc8>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_SPI_MspInit+0xc8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <HAL_SPI_MspInit+0xc8>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HAL_SPI_MspInit+0xc8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_SPI_MspInit+0xc8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_SPI_MspInit+0xc8>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_SPI_MspInit+0xc8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = EVE_CS_Pin;
 8001886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001898:	2306      	movs	r3, #6
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EVE_CS_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	480e      	ldr	r0, [pc, #56]	; (80018dc <HAL_SPI_MspInit+0xcc>)
 80018a4:	f000 faa0 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ba:	2306      	movs	r3, #6
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <HAL_SPI_MspInit+0xd0>)
 80018c6:	f000 fa8f 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40003c00 	.word	0x40003c00
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020800 	.word	0x40020800

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001938:	f000 f92e 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}

08001940 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e00a      	b.n	8001968 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001952:	f3af 8000 	nop.w
 8001956:	4601      	mov	r1, r0
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf0      	blt.n	8001952 <_read+0x12>
	}

return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e009      	b.n	80019a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf1      	blt.n	800198c <_write+0x12>
	}
	return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_close>:

int _close(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
	return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019da:	605a      	str	r2, [r3, #4]
	return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_isatty>:

int _isatty(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
	return 1;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x50>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x16>
		heap_end = &end;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <_sbrk+0x50>)
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <_sbrk+0x54>)
 8001a30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <_sbrk+0x50>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <_sbrk+0x50>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	466a      	mov	r2, sp
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d907      	bls.n	8001a56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a46:	f001 fd53 	bl	80034f0 <__errno>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
 8001a54:	e006      	b.n	8001a64 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <_sbrk+0x50>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <_sbrk+0x50>)
 8001a60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200000a4 	.word	0x200000a4
 8001a70:	20000110 	.word	0x20000110

08001a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <SystemInit+0x28>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <SystemInit+0x28>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SystemInit+0x28>)
 8001a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a8e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa4:	480d      	ldr	r0, [pc, #52]	; (8001adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aa6:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001abc:	4c0b      	ldr	r4, [pc, #44]	; (8001aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aca:	f7ff ffd3 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ace:	f001 fd15 	bl	80034fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7ff fd39 	bl	8001548 <main>
  bx  lr    
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ad8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ae4:	08004d5c 	.word	0x08004d5c
  ldr r2, =_sbss
 8001ae8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001aec:	20000110 	.word	0x20000110

08001af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <HAL_Init+0x40>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_Init+0x40>)
 8001b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <HAL_Init+0x40>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 f92f 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fe4a 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f939 	bl	8001dce <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f000 f90f 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000108 	.word	0x20000108

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000108 	.word	0x20000108

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_Delay+0x40>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000008 	.word	0x20000008

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db0a      	blt.n	8001caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	490c      	ldr	r1, [pc, #48]	; (8001ccc <__NVIC_SetPriority+0x4c>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca8:	e00a      	b.n	8001cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <__NVIC_SetPriority+0x50>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	761a      	strb	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000e100 	.word	0xe000e100
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f1c3 0307 	rsb	r3, r3, #7
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	bf28      	it	cs
 8001cf2:	2304      	movcs	r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d902      	bls.n	8001d04 <NVIC_EncodePriority+0x30>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b03      	subs	r3, #3
 8001d02:	e000      	b.n	8001d06 <NVIC_EncodePriority+0x32>
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	4313      	orrs	r3, r2
         );
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff8e 	bl	8001c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff47 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff5c 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff8e 	bl	8001cd4 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5d 	bl	8001c80 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffb0 	bl	8001d3c <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e177      	b.n	80020f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8166 	bne.w	80020ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d005      	beq.n	8001e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d130      	bne.n	8001e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d017      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d123      	bne.n	8001f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	08da      	lsrs	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3208      	adds	r2, #8
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80c0 	beq.w	80020ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b65      	ldr	r3, [pc, #404]	; (8002108 <HAL_GPIO_Init+0x320>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a64      	ldr	r2, [pc, #400]	; (8002108 <HAL_GPIO_Init+0x320>)
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b62      	ldr	r3, [pc, #392]	; (8002108 <HAL_GPIO_Init+0x320>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8a:	4a60      	ldr	r2, [pc, #384]	; (800210c <HAL_GPIO_Init+0x324>)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a57      	ldr	r2, [pc, #348]	; (8002110 <HAL_GPIO_Init+0x328>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d037      	beq.n	8002026 <HAL_GPIO_Init+0x23e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a56      	ldr	r2, [pc, #344]	; (8002114 <HAL_GPIO_Init+0x32c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d031      	beq.n	8002022 <HAL_GPIO_Init+0x23a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a55      	ldr	r2, [pc, #340]	; (8002118 <HAL_GPIO_Init+0x330>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02b      	beq.n	800201e <HAL_GPIO_Init+0x236>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a54      	ldr	r2, [pc, #336]	; (800211c <HAL_GPIO_Init+0x334>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d025      	beq.n	800201a <HAL_GPIO_Init+0x232>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a53      	ldr	r2, [pc, #332]	; (8002120 <HAL_GPIO_Init+0x338>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01f      	beq.n	8002016 <HAL_GPIO_Init+0x22e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <HAL_GPIO_Init+0x33c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d019      	beq.n	8002012 <HAL_GPIO_Init+0x22a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a51      	ldr	r2, [pc, #324]	; (8002128 <HAL_GPIO_Init+0x340>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0x226>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a50      	ldr	r2, [pc, #320]	; (800212c <HAL_GPIO_Init+0x344>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00d      	beq.n	800200a <HAL_GPIO_Init+0x222>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <HAL_GPIO_Init+0x348>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <HAL_GPIO_Init+0x21e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4e      	ldr	r2, [pc, #312]	; (8002134 <HAL_GPIO_Init+0x34c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_GPIO_Init+0x21a>
 8001ffe:	2309      	movs	r3, #9
 8002000:	e012      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002002:	230a      	movs	r3, #10
 8002004:	e010      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002006:	2308      	movs	r3, #8
 8002008:	e00e      	b.n	8002028 <HAL_GPIO_Init+0x240>
 800200a:	2307      	movs	r3, #7
 800200c:	e00c      	b.n	8002028 <HAL_GPIO_Init+0x240>
 800200e:	2306      	movs	r3, #6
 8002010:	e00a      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002012:	2305      	movs	r3, #5
 8002014:	e008      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002016:	2304      	movs	r3, #4
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x240>
 800201a:	2303      	movs	r3, #3
 800201c:	e004      	b.n	8002028 <HAL_GPIO_Init+0x240>
 800201e:	2302      	movs	r3, #2
 8002020:	e002      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_GPIO_Init+0x240>
 8002026:	2300      	movs	r3, #0
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	4093      	lsls	r3, r2
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002038:	4934      	ldr	r1, [pc, #208]	; (800210c <HAL_GPIO_Init+0x324>)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002046:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <HAL_GPIO_Init+0x350>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800206a:	4a33      	ldr	r2, [pc, #204]	; (8002138 <HAL_GPIO_Init+0x350>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002070:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_GPIO_Init+0x350>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002094:	4a28      	ldr	r2, [pc, #160]	; (8002138 <HAL_GPIO_Init+0x350>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_GPIO_Init+0x350>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020be:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <HAL_GPIO_Init+0x350>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_GPIO_Init+0x350>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e8:	4a13      	ldr	r2, [pc, #76]	; (8002138 <HAL_GPIO_Init+0x350>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	f67f ae84 	bls.w	8001e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	3724      	adds	r7, #36	; 0x24
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40023800 	.word	0x40023800
 800210c:	40013800 	.word	0x40013800
 8002110:	40020000 	.word	0x40020000
 8002114:	40020400 	.word	0x40020400
 8002118:	40020800 	.word	0x40020800
 800211c:	40020c00 	.word	0x40020c00
 8002120:	40021000 	.word	0x40021000
 8002124:	40021400 	.word	0x40021400
 8002128:	40021800 	.word	0x40021800
 800212c:	40021c00 	.word	0x40021c00
 8002130:	40022000 	.word	0x40022000
 8002134:	40022400 	.word	0x40022400
 8002138:	40013c00 	.word	0x40013c00

0800213c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
 8002148:	4613      	mov	r3, r2
 800214a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800214c:	787b      	ldrb	r3, [r7, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	619a      	str	r2, [r3, #24]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e264      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d075      	beq.n	800227a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800218e:	4ba3      	ldr	r3, [pc, #652]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b04      	cmp	r3, #4
 8002198:	d00c      	beq.n	80021b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219a:	4ba0      	ldr	r3, [pc, #640]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d112      	bne.n	80021cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4b9d      	ldr	r3, [pc, #628]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b2:	d10b      	bne.n	80021cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	4b99      	ldr	r3, [pc, #612]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05b      	beq.n	8002278 <HAL_RCC_OscConfig+0x108>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d157      	bne.n	8002278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e23f      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d4:	d106      	bne.n	80021e4 <HAL_RCC_OscConfig+0x74>
 80021d6:	4b91      	ldr	r3, [pc, #580]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a90      	ldr	r2, [pc, #576]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e01d      	b.n	8002220 <HAL_RCC_OscConfig+0xb0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x98>
 80021ee:	4b8b      	ldr	r3, [pc, #556]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a8a      	ldr	r2, [pc, #552]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a87      	ldr	r2, [pc, #540]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0xb0>
 8002208:	4b84      	ldr	r3, [pc, #528]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a83      	ldr	r2, [pc, #524]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800220e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b81      	ldr	r3, [pc, #516]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a80      	ldr	r2, [pc, #512]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff fcca 	bl	8001bc0 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002230:	f7ff fcc6 	bl	8001bc0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e204      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b76      	ldr	r3, [pc, #472]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0xc0>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff fcb6 	bl	8001bc0 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002258:	f7ff fcb2 	bl	8001bc0 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e1f0      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	4b6c      	ldr	r3, [pc, #432]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0xe8>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d063      	beq.n	800234e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002286:	4b65      	ldr	r3, [pc, #404]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002292:	4b62      	ldr	r3, [pc, #392]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229a:	2b08      	cmp	r3, #8
 800229c:	d11c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_RCC_OscConfig+0x152>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e1c4      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c2:	4b56      	ldr	r3, [pc, #344]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4952      	ldr	r1, [pc, #328]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	e03a      	b.n	800234e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e0:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <HAL_RCC_OscConfig+0x2b0>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7ff fc6b 	bl	8001bc0 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ee:	f7ff fc67 	bl	8001bc0 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e1a5      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4940      	ldr	r1, [pc, #256]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
 8002320:	e015      	b.n	800234e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <HAL_RCC_OscConfig+0x2b0>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff fc4a 	bl	8001bc0 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002330:	f7ff fc46 	bl	8001bc0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e184      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d030      	beq.n	80023bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCC_OscConfig+0x2b4>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7ff fc2a 	bl	8001bc0 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002370:	f7ff fc26 	bl	8001bc0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e164      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x200>
 800238e:	e015      	b.n	80023bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_OscConfig+0x2b4>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7ff fc13 	bl	8001bc0 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800239e:	f7ff fc0f 	bl	8001bc0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e14d      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80a0 	beq.w	800250a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a0e      	ldr	r2, [pc, #56]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f6:	2301      	movs	r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d121      	bne.n	800244a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_RCC_OscConfig+0x2b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_RCC_OscConfig+0x2b8>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002412:	f7ff fbd5 	bl	8001bc0 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	e011      	b.n	800243e <HAL_RCC_OscConfig+0x2ce>
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	42470000 	.word	0x42470000
 8002424:	42470e80 	.word	0x42470e80
 8002428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242c:	f7ff fbc8 	bl	8001bc0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e106      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	4b85      	ldr	r3, [pc, #532]	; (8002654 <HAL_RCC_OscConfig+0x4e4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x2f0>
 8002452:	4b81      	ldr	r3, [pc, #516]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a80      	ldr	r2, [pc, #512]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	e01c      	b.n	800249a <HAL_RCC_OscConfig+0x32a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x312>
 8002468:	4b7b      	ldr	r3, [pc, #492]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a7a      	ldr	r2, [pc, #488]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	4b78      	ldr	r3, [pc, #480]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a77      	ldr	r2, [pc, #476]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x32a>
 8002482:	4b75      	ldr	r3, [pc, #468]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a74      	ldr	r2, [pc, #464]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a71      	ldr	r2, [pc, #452]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7ff fb8d 	bl	8001bc0 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7ff fb89 	bl	8001bc0 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0c5      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b65      	ldr	r3, [pc, #404]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x33a>
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fb77 	bl	8001bc0 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7ff fb73 	bl	8001bc0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0af      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b56      	ldr	r3, [pc, #344]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a55      	ldr	r2, [pc, #340]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 809b 	beq.w	800264a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d05c      	beq.n	80025da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d141      	bne.n	80025ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b4c      	ldr	r3, [pc, #304]	; (800265c <HAL_RCC_OscConfig+0x4ec>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7ff fb47 	bl	8001bc0 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002536:	f7ff fb43 	bl	8001bc0 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e081      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002548:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	019b      	lsls	r3, r3, #6
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	085b      	lsrs	r3, r3, #1
 800256c:	3b01      	subs	r3, #1
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	061b      	lsls	r3, r3, #24
 8002578:	4937      	ldr	r1, [pc, #220]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_RCC_OscConfig+0x4ec>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fb1c 	bl	8001bc0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258c:	f7ff fb18 	bl	8001bc0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e056      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x41c>
 80025aa:	e04e      	b.n	800264a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_OscConfig+0x4ec>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7ff fb05 	bl	8001bc0 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ba:	f7ff fb01 	bl	8001bc0 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e03f      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x44a>
 80025d8:	e037      	b.n	800264a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e032      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d028      	beq.n	8002646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d121      	bne.n	8002646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d11a      	bne.n	8002646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002616:	4013      	ands	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800261c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261e:	4293      	cmp	r3, r2
 8002620:	d111      	bne.n	8002646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	3b01      	subs	r3, #1
 8002630:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d107      	bne.n	8002646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40007000 	.word	0x40007000
 8002658:	40023800 	.word	0x40023800
 800265c:	42470060 	.word	0x42470060

08002660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0cc      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b68      	ldr	r3, [pc, #416]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d90c      	bls.n	800269c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b65      	ldr	r3, [pc, #404]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0b8      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b4:	4b59      	ldr	r3, [pc, #356]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a58      	ldr	r2, [pc, #352]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026cc:	4b53      	ldr	r3, [pc, #332]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a52      	ldr	r2, [pc, #328]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	494d      	ldr	r1, [pc, #308]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d044      	beq.n	8002780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d119      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e07f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d003      	beq.n	800271e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271a:	2b03      	cmp	r3, #3
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271e:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e067      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273e:	4b37      	ldr	r3, [pc, #220]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4934      	ldr	r1, [pc, #208]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002750:	f7ff fa36 	bl	8001bc0 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7ff fa32 	bl	8001bc0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e04f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 020c 	and.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d1eb      	bne.n	8002758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d20c      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e032      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4916      	ldr	r1, [pc, #88]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	490e      	ldr	r1, [pc, #56]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e6:	f000 f821 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80027ea:	4601      	mov	r1, r0
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	5cd3      	ldrb	r3, [r2, r3]
 80027fa:	fa21 f303 	lsr.w	r3, r1, r3
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f996 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023c00 	.word	0x40023c00
 800281c:	40023800 	.word	0x40023800
 8002820:	08004ca4 	.word	0x08004ca4
 8002824:	20000000 	.word	0x20000000
 8002828:	20000004 	.word	0x20000004

0800282c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	2300      	movs	r3, #0
 800283c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002842:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_GetSysClockFreq+0x158>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b04      	cmp	r3, #4
 800284c:	d007      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x32>
 800284e:	2b08      	cmp	r3, #8
 8002850:	d008      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x38>
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 808d 	bne.w	8002972 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002858:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_RCC_GetSysClockFreq+0x15c>)
 800285a:	60bb      	str	r3, [r7, #8]
       break;
 800285c:	e08c      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800285e:	4b4b      	ldr	r3, [pc, #300]	; (800298c <HAL_RCC_GetSysClockFreq+0x160>)
 8002860:	60bb      	str	r3, [r7, #8]
      break;
 8002862:	e089      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002864:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_GetSysClockFreq+0x158>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800286c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800286e:	4b45      	ldr	r3, [pc, #276]	; (8002984 <HAL_RCC_GetSysClockFreq+0x158>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d023      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_RCC_GetSysClockFreq+0x158>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	f04f 0400 	mov.w	r4, #0
 8002884:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	ea03 0501 	and.w	r5, r3, r1
 8002890:	ea04 0602 	and.w	r6, r4, r2
 8002894:	4a3d      	ldr	r2, [pc, #244]	; (800298c <HAL_RCC_GetSysClockFreq+0x160>)
 8002896:	fb02 f106 	mul.w	r1, r2, r6
 800289a:	2200      	movs	r2, #0
 800289c:	fb02 f205 	mul.w	r2, r2, r5
 80028a0:	440a      	add	r2, r1
 80028a2:	493a      	ldr	r1, [pc, #232]	; (800298c <HAL_RCC_GetSysClockFreq+0x160>)
 80028a4:	fba5 0101 	umull	r0, r1, r5, r1
 80028a8:	1853      	adds	r3, r2, r1
 80028aa:	4619      	mov	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f04f 0400 	mov.w	r4, #0
 80028b2:	461a      	mov	r2, r3
 80028b4:	4623      	mov	r3, r4
 80028b6:	f7fd fcf3 	bl	80002a0 <__aeabi_uldivmod>
 80028ba:	4603      	mov	r3, r0
 80028bc:	460c      	mov	r4, r1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e049      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c2:	4b30      	ldr	r3, [pc, #192]	; (8002984 <HAL_RCC_GetSysClockFreq+0x158>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	f04f 0400 	mov.w	r4, #0
 80028cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	ea03 0501 	and.w	r5, r3, r1
 80028d8:	ea04 0602 	and.w	r6, r4, r2
 80028dc:	4629      	mov	r1, r5
 80028de:	4632      	mov	r2, r6
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	f04f 0400 	mov.w	r4, #0
 80028e8:	0154      	lsls	r4, r2, #5
 80028ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028ee:	014b      	lsls	r3, r1, #5
 80028f0:	4619      	mov	r1, r3
 80028f2:	4622      	mov	r2, r4
 80028f4:	1b49      	subs	r1, r1, r5
 80028f6:	eb62 0206 	sbc.w	r2, r2, r6
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	f04f 0400 	mov.w	r4, #0
 8002902:	0194      	lsls	r4, r2, #6
 8002904:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002908:	018b      	lsls	r3, r1, #6
 800290a:	1a5b      	subs	r3, r3, r1
 800290c:	eb64 0402 	sbc.w	r4, r4, r2
 8002910:	f04f 0100 	mov.w	r1, #0
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	00e2      	lsls	r2, r4, #3
 800291a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800291e:	00d9      	lsls	r1, r3, #3
 8002920:	460b      	mov	r3, r1
 8002922:	4614      	mov	r4, r2
 8002924:	195b      	adds	r3, r3, r5
 8002926:	eb44 0406 	adc.w	r4, r4, r6
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	02a2      	lsls	r2, r4, #10
 8002934:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002938:	0299      	lsls	r1, r3, #10
 800293a:	460b      	mov	r3, r1
 800293c:	4614      	mov	r4, r2
 800293e:	4618      	mov	r0, r3
 8002940:	4621      	mov	r1, r4
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f04f 0400 	mov.w	r4, #0
 8002948:	461a      	mov	r2, r3
 800294a:	4623      	mov	r3, r4
 800294c:	f7fd fca8 	bl	80002a0 <__aeabi_uldivmod>
 8002950:	4603      	mov	r3, r0
 8002952:	460c      	mov	r4, r1
 8002954:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_GetSysClockFreq+0x158>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	3301      	adds	r3, #1
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	60bb      	str	r3, [r7, #8]
      break;
 8002970:	e002      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002974:	60bb      	str	r3, [r7, #8]
      break;
 8002976:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002978:	68bb      	ldr	r3, [r7, #8]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	00f42400 	.word	0x00f42400
 800298c:	017d7840 	.word	0x017d7840

08002990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e07b      	b.n	8002a9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d108      	bne.n	80029bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b2:	d009      	beq.n	80029c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
 80029ba:	e005      	b.n	80029c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe ff14 	bl	8001810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4c:	ea42 0103 	orr.w	r1, r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	f003 0104 	and.w	r1, r3, #4
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f003 0210 	and.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b088      	sub	sp, #32
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	603b      	str	r3, [r7, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_SPI_Transmit+0x22>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e126      	b.n	8002d12 <HAL_SPI_Transmit+0x270>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002acc:	f7ff f878 	bl	8001bc0 <HAL_GetTick>
 8002ad0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d002      	beq.n	8002ae8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ae6:	e10b      	b.n	8002d00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_SPI_Transmit+0x52>
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002af8:	e102      	b.n	8002d00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2203      	movs	r2, #3
 8002afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	88fa      	ldrh	r2, [r7, #6]
 8002b12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	88fa      	ldrh	r2, [r7, #6]
 8002b18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b40:	d10f      	bne.n	8002b62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d007      	beq.n	8002b80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b88:	d14b      	bne.n	8002c22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_SPI_Transmit+0xf6>
 8002b92:	8afb      	ldrh	r3, [r7, #22]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d13e      	bne.n	8002c16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	881a      	ldrh	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	1c9a      	adds	r2, r3, #2
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bbc:	e02b      	b.n	8002c16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d112      	bne.n	8002bf2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	881a      	ldrh	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	1c9a      	adds	r2, r3, #2
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bf0:	e011      	b.n	8002c16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf2:	f7fe ffe5 	bl	8001bc0 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d803      	bhi.n	8002c0a <HAL_SPI_Transmit+0x168>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d102      	bne.n	8002c10 <HAL_SPI_Transmit+0x16e>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c14:	e074      	b.n	8002d00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ce      	bne.n	8002bbe <HAL_SPI_Transmit+0x11c>
 8002c20:	e04c      	b.n	8002cbc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Transmit+0x18e>
 8002c2a:	8afb      	ldrh	r3, [r7, #22]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d140      	bne.n	8002cb2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	7812      	ldrb	r2, [r2, #0]
 8002c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c56:	e02c      	b.n	8002cb2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d113      	bne.n	8002c8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c8c:	e011      	b.n	8002cb2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c8e:	f7fe ff97 	bl	8001bc0 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d803      	bhi.n	8002ca6 <HAL_SPI_Transmit+0x204>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d102      	bne.n	8002cac <HAL_SPI_Transmit+0x20a>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cb0:	e026      	b.n	8002d00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1cd      	bne.n	8002c58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	6839      	ldr	r1, [r7, #0]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fbcb 	bl	800345c <SPI_EndRxTxTransaction>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e000      	b.n	8002d00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b088      	sub	sp, #32
 8002d1e:	af02      	add	r7, sp, #8
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d36:	d112      	bne.n	8002d5e <HAL_SPI_Receive+0x44>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10e      	bne.n	8002d5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2204      	movs	r2, #4
 8002d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f8f1 	bl	8002f3c <HAL_SPI_TransmitReceive>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	e0ea      	b.n	8002f34 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_SPI_Receive+0x52>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e0e3      	b.n	8002f34 <HAL_SPI_Receive+0x21a>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d74:	f7fe ff24 	bl	8001bc0 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d002      	beq.n	8002d8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
 8002d88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d8a:	e0ca      	b.n	8002f22 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Receive+0x7e>
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d9c:	e0c1      	b.n	8002f22 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2204      	movs	r2, #4
 8002da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	88fa      	ldrh	r2, [r7, #6]
 8002db6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	88fa      	ldrh	r2, [r7, #6]
 8002dbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de4:	d10f      	bne.n	8002e06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d007      	beq.n	8002e24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d162      	bne.n	8002ef2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e2c:	e02e      	b.n	8002e8c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d115      	bne.n	8002e68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f103 020c 	add.w	r2, r3, #12
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	7812      	ldrb	r2, [r2, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e66:	e011      	b.n	8002e8c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e68:	f7fe feaa 	bl	8001bc0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d803      	bhi.n	8002e80 <HAL_SPI_Receive+0x166>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d102      	bne.n	8002e86 <HAL_SPI_Receive+0x16c>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e8a:	e04a      	b.n	8002f22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1cb      	bne.n	8002e2e <HAL_SPI_Receive+0x114>
 8002e96:	e031      	b.n	8002efc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d113      	bne.n	8002ece <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	1c9a      	adds	r2, r3, #2
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ecc:	e011      	b.n	8002ef2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ece:	f7fe fe77 	bl	8001bc0 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d803      	bhi.n	8002ee6 <HAL_SPI_Receive+0x1cc>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d102      	bne.n	8002eec <HAL_SPI_Receive+0x1d2>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ef0:	e017      	b.n	8002f22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1cd      	bne.n	8002e98 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	6839      	ldr	r1, [r7, #0]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fa45 	bl	8003390 <SPI_EndRxTransaction>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
 8002f1e:	e000      	b.n	8002f22 <HAL_SPI_Receive+0x208>
  }

error :
 8002f20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08c      	sub	sp, #48	; 0x30
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x26>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e18a      	b.n	8003278 <HAL_SPI_TransmitReceive+0x33c>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f6a:	f7fe fe29 	bl	8001bc0 <HAL_GetTick>
 8002f6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d00f      	beq.n	8002fac <HAL_SPI_TransmitReceive+0x70>
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f92:	d107      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d103      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x68>
 8002f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d003      	beq.n	8002fac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002faa:	e15b      	b.n	8003264 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_SPI_TransmitReceive+0x82>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_TransmitReceive+0x82>
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fc4:	e14e      	b.n	8003264 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d003      	beq.n	8002fda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2205      	movs	r2, #5
 8002fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	887a      	ldrh	r2, [r7, #2]
 8002fea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	887a      	ldrh	r2, [r7, #2]
 8003002:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d007      	beq.n	800302e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003036:	d178      	bne.n	800312a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_SPI_TransmitReceive+0x10a>
 8003040:	8b7b      	ldrh	r3, [r7, #26]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d166      	bne.n	8003114 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	881a      	ldrh	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	1c9a      	adds	r2, r3, #2
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306a:	e053      	b.n	8003114 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	d11b      	bne.n	80030b2 <HAL_SPI_TransmitReceive+0x176>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d016      	beq.n	80030b2 <HAL_SPI_TransmitReceive+0x176>
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d113      	bne.n	80030b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	881a      	ldrh	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	1c9a      	adds	r2, r3, #2
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d119      	bne.n	80030f4 <HAL_SPI_TransmitReceive+0x1b8>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d014      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	b292      	uxth	r2, r2
 80030d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	1c9a      	adds	r2, r3, #2
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030f0:	2301      	movs	r3, #1
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030f4:	f7fe fd64 	bl	8001bc0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003100:	429a      	cmp	r2, r3
 8003102:	d807      	bhi.n	8003114 <HAL_SPI_TransmitReceive+0x1d8>
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d003      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003112:	e0a7      	b.n	8003264 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1a6      	bne.n	800306c <HAL_SPI_TransmitReceive+0x130>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1a1      	bne.n	800306c <HAL_SPI_TransmitReceive+0x130>
 8003128:	e07c      	b.n	8003224 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_SPI_TransmitReceive+0x1fc>
 8003132:	8b7b      	ldrh	r3, [r7, #26]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d16b      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	330c      	adds	r3, #12
 8003142:	7812      	ldrb	r2, [r2, #0]
 8003144:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800315e:	e057      	b.n	8003210 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d11c      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0x26c>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d017      	beq.n	80031a8 <HAL_SPI_TransmitReceive+0x26c>
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d114      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	330c      	adds	r3, #12
 8003188:	7812      	ldrb	r2, [r2, #0]
 800318a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d119      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x2ae>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d014      	beq.n	80031ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031e6:	2301      	movs	r3, #1
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031ea:	f7fe fce9 	bl	8001bc0 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d803      	bhi.n	8003202 <HAL_SPI_TransmitReceive+0x2c6>
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d102      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x2cc>
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	2b00      	cmp	r3, #0
 8003206:	d103      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800320e:	e029      	b.n	8003264 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1a2      	bne.n	8003160 <HAL_SPI_TransmitReceive+0x224>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d19d      	bne.n	8003160 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f917 	bl	800345c <SPI_EndRxTxTransaction>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003240:	e010      	b.n	8003264 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10b      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	e000      	b.n	8003264 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003262:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003274:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003278:	4618      	mov	r0, r3
 800327a:	3730      	adds	r7, #48	; 0x30
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003290:	f7fe fc96 	bl	8001bc0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4413      	add	r3, r2
 800329e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032a0:	f7fe fc8e 	bl	8001bc0 <HAL_GetTick>
 80032a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	015b      	lsls	r3, r3, #5
 80032ac:	0d1b      	lsrs	r3, r3, #20
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032b6:	e054      	b.n	8003362 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d050      	beq.n	8003362 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032c0:	f7fe fc7e 	bl	8001bc0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d902      	bls.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d13d      	bne.n	8003352 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ee:	d111      	bne.n	8003314 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f8:	d004      	beq.n	8003304 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d107      	bne.n	8003314 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003312:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331c:	d10f      	bne.n	800333e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800333c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e017      	b.n	8003382 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	3b01      	subs	r3, #1
 8003360:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4013      	ands	r3, r2
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	429a      	cmp	r2, r3
 8003370:	bf0c      	ite	eq
 8003372:	2301      	moveq	r3, #1
 8003374:	2300      	movne	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	429a      	cmp	r2, r3
 800337e:	d19b      	bne.n	80032b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000000 	.word	0x20000000

08003390 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033a4:	d111      	bne.n	80033ca <SPI_EndRxTransaction+0x3a>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ae:	d004      	beq.n	80033ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b8:	d107      	bne.n	80033ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d2:	d12a      	bne.n	800342a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033dc:	d012      	beq.n	8003404 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff ff49 	bl	8003280 <SPI_WaitFlagStateUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d02d      	beq.n	8003450 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e026      	b.n	8003452 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2200      	movs	r2, #0
 800340c:	2101      	movs	r1, #1
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff ff36 	bl	8003280 <SPI_WaitFlagStateUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01a      	beq.n	8003450 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e013      	b.n	8003452 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2200      	movs	r2, #0
 8003432:	2101      	movs	r1, #1
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff ff23 	bl	8003280 <SPI_WaitFlagStateUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e000      	b.n	8003452 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <SPI_EndRxTxTransaction+0x7c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <SPI_EndRxTxTransaction+0x80>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	0d5b      	lsrs	r3, r3, #21
 8003474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003486:	d112      	bne.n	80034ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2200      	movs	r2, #0
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7ff fef4 	bl	8003280 <SPI_WaitFlagStateUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	f043 0220 	orr.w	r2, r3, #32
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e00f      	b.n	80034ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d0f2      	beq.n	80034ae <SPI_EndRxTxTransaction+0x52>
 80034c8:	e000      	b.n	80034cc <SPI_EndRxTxTransaction+0x70>
        break;
 80034ca:	bf00      	nop
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000000 	.word	0x20000000
 80034dc:	165e9f81 	.word	0x165e9f81

080034e0 <calloc>:
 80034e0:	4b02      	ldr	r3, [pc, #8]	; (80034ec <calloc+0xc>)
 80034e2:	460a      	mov	r2, r1
 80034e4:	4601      	mov	r1, r0
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	f000 b847 	b.w	800357a <_calloc_r>
 80034ec:	2000000c 	.word	0x2000000c

080034f0 <__errno>:
 80034f0:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <__errno+0x8>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	2000000c 	.word	0x2000000c

080034fc <__libc_init_array>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	4e0d      	ldr	r6, [pc, #52]	; (8003534 <__libc_init_array+0x38>)
 8003500:	4c0d      	ldr	r4, [pc, #52]	; (8003538 <__libc_init_array+0x3c>)
 8003502:	1ba4      	subs	r4, r4, r6
 8003504:	10a4      	asrs	r4, r4, #2
 8003506:	2500      	movs	r5, #0
 8003508:	42a5      	cmp	r5, r4
 800350a:	d109      	bne.n	8003520 <__libc_init_array+0x24>
 800350c:	4e0b      	ldr	r6, [pc, #44]	; (800353c <__libc_init_array+0x40>)
 800350e:	4c0c      	ldr	r4, [pc, #48]	; (8003540 <__libc_init_array+0x44>)
 8003510:	f001 f92a 	bl	8004768 <_init>
 8003514:	1ba4      	subs	r4, r4, r6
 8003516:	10a4      	asrs	r4, r4, #2
 8003518:	2500      	movs	r5, #0
 800351a:	42a5      	cmp	r5, r4
 800351c:	d105      	bne.n	800352a <__libc_init_array+0x2e>
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003524:	4798      	blx	r3
 8003526:	3501      	adds	r5, #1
 8003528:	e7ee      	b.n	8003508 <__libc_init_array+0xc>
 800352a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800352e:	4798      	blx	r3
 8003530:	3501      	adds	r5, #1
 8003532:	e7f2      	b.n	800351a <__libc_init_array+0x1e>
 8003534:	08004d54 	.word	0x08004d54
 8003538:	08004d54 	.word	0x08004d54
 800353c:	08004d54 	.word	0x08004d54
 8003540:	08004d58 	.word	0x08004d58

08003544 <free>:
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <free+0xc>)
 8003546:	4601      	mov	r1, r0
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	f000 b825 	b.w	8003598 <_free_r>
 800354e:	bf00      	nop
 8003550:	2000000c 	.word	0x2000000c

08003554 <memcpy>:
 8003554:	b510      	push	{r4, lr}
 8003556:	1e43      	subs	r3, r0, #1
 8003558:	440a      	add	r2, r1
 800355a:	4291      	cmp	r1, r2
 800355c:	d100      	bne.n	8003560 <memcpy+0xc>
 800355e:	bd10      	pop	{r4, pc}
 8003560:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003568:	e7f7      	b.n	800355a <memcpy+0x6>

0800356a <memset>:
 800356a:	4402      	add	r2, r0
 800356c:	4603      	mov	r3, r0
 800356e:	4293      	cmp	r3, r2
 8003570:	d100      	bne.n	8003574 <memset+0xa>
 8003572:	4770      	bx	lr
 8003574:	f803 1b01 	strb.w	r1, [r3], #1
 8003578:	e7f9      	b.n	800356e <memset+0x4>

0800357a <_calloc_r>:
 800357a:	b538      	push	{r3, r4, r5, lr}
 800357c:	fb02 f401 	mul.w	r4, r2, r1
 8003580:	4621      	mov	r1, r4
 8003582:	f000 f857 	bl	8003634 <_malloc_r>
 8003586:	4605      	mov	r5, r0
 8003588:	b118      	cbz	r0, 8003592 <_calloc_r+0x18>
 800358a:	4622      	mov	r2, r4
 800358c:	2100      	movs	r1, #0
 800358e:	f7ff ffec 	bl	800356a <memset>
 8003592:	4628      	mov	r0, r5
 8003594:	bd38      	pop	{r3, r4, r5, pc}
	...

08003598 <_free_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	4605      	mov	r5, r0
 800359c:	2900      	cmp	r1, #0
 800359e:	d045      	beq.n	800362c <_free_r+0x94>
 80035a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035a4:	1f0c      	subs	r4, r1, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bfb8      	it	lt
 80035aa:	18e4      	addlt	r4, r4, r3
 80035ac:	f000 f9c2 	bl	8003934 <__malloc_lock>
 80035b0:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <_free_r+0x98>)
 80035b2:	6813      	ldr	r3, [r2, #0]
 80035b4:	4610      	mov	r0, r2
 80035b6:	b933      	cbnz	r3, 80035c6 <_free_r+0x2e>
 80035b8:	6063      	str	r3, [r4, #4]
 80035ba:	6014      	str	r4, [r2, #0]
 80035bc:	4628      	mov	r0, r5
 80035be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035c2:	f000 b9b8 	b.w	8003936 <__malloc_unlock>
 80035c6:	42a3      	cmp	r3, r4
 80035c8:	d90c      	bls.n	80035e4 <_free_r+0x4c>
 80035ca:	6821      	ldr	r1, [r4, #0]
 80035cc:	1862      	adds	r2, r4, r1
 80035ce:	4293      	cmp	r3, r2
 80035d0:	bf04      	itt	eq
 80035d2:	681a      	ldreq	r2, [r3, #0]
 80035d4:	685b      	ldreq	r3, [r3, #4]
 80035d6:	6063      	str	r3, [r4, #4]
 80035d8:	bf04      	itt	eq
 80035da:	1852      	addeq	r2, r2, r1
 80035dc:	6022      	streq	r2, [r4, #0]
 80035de:	6004      	str	r4, [r0, #0]
 80035e0:	e7ec      	b.n	80035bc <_free_r+0x24>
 80035e2:	4613      	mov	r3, r2
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	b10a      	cbz	r2, 80035ec <_free_r+0x54>
 80035e8:	42a2      	cmp	r2, r4
 80035ea:	d9fa      	bls.n	80035e2 <_free_r+0x4a>
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	1858      	adds	r0, r3, r1
 80035f0:	42a0      	cmp	r0, r4
 80035f2:	d10b      	bne.n	800360c <_free_r+0x74>
 80035f4:	6820      	ldr	r0, [r4, #0]
 80035f6:	4401      	add	r1, r0
 80035f8:	1858      	adds	r0, r3, r1
 80035fa:	4282      	cmp	r2, r0
 80035fc:	6019      	str	r1, [r3, #0]
 80035fe:	d1dd      	bne.n	80035bc <_free_r+0x24>
 8003600:	6810      	ldr	r0, [r2, #0]
 8003602:	6852      	ldr	r2, [r2, #4]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	4401      	add	r1, r0
 8003608:	6019      	str	r1, [r3, #0]
 800360a:	e7d7      	b.n	80035bc <_free_r+0x24>
 800360c:	d902      	bls.n	8003614 <_free_r+0x7c>
 800360e:	230c      	movs	r3, #12
 8003610:	602b      	str	r3, [r5, #0]
 8003612:	e7d3      	b.n	80035bc <_free_r+0x24>
 8003614:	6820      	ldr	r0, [r4, #0]
 8003616:	1821      	adds	r1, r4, r0
 8003618:	428a      	cmp	r2, r1
 800361a:	bf04      	itt	eq
 800361c:	6811      	ldreq	r1, [r2, #0]
 800361e:	6852      	ldreq	r2, [r2, #4]
 8003620:	6062      	str	r2, [r4, #4]
 8003622:	bf04      	itt	eq
 8003624:	1809      	addeq	r1, r1, r0
 8003626:	6021      	streq	r1, [r4, #0]
 8003628:	605c      	str	r4, [r3, #4]
 800362a:	e7c7      	b.n	80035bc <_free_r+0x24>
 800362c:	bd38      	pop	{r3, r4, r5, pc}
 800362e:	bf00      	nop
 8003630:	200000a8 	.word	0x200000a8

08003634 <_malloc_r>:
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	1ccd      	adds	r5, r1, #3
 8003638:	f025 0503 	bic.w	r5, r5, #3
 800363c:	3508      	adds	r5, #8
 800363e:	2d0c      	cmp	r5, #12
 8003640:	bf38      	it	cc
 8003642:	250c      	movcc	r5, #12
 8003644:	2d00      	cmp	r5, #0
 8003646:	4606      	mov	r6, r0
 8003648:	db01      	blt.n	800364e <_malloc_r+0x1a>
 800364a:	42a9      	cmp	r1, r5
 800364c:	d903      	bls.n	8003656 <_malloc_r+0x22>
 800364e:	230c      	movs	r3, #12
 8003650:	6033      	str	r3, [r6, #0]
 8003652:	2000      	movs	r0, #0
 8003654:	bd70      	pop	{r4, r5, r6, pc}
 8003656:	f000 f96d 	bl	8003934 <__malloc_lock>
 800365a:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <_malloc_r+0xac>)
 800365c:	6814      	ldr	r4, [r2, #0]
 800365e:	4621      	mov	r1, r4
 8003660:	b991      	cbnz	r1, 8003688 <_malloc_r+0x54>
 8003662:	4c20      	ldr	r4, [pc, #128]	; (80036e4 <_malloc_r+0xb0>)
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	b91b      	cbnz	r3, 8003670 <_malloc_r+0x3c>
 8003668:	4630      	mov	r0, r6
 800366a:	f000 f869 	bl	8003740 <_sbrk_r>
 800366e:	6020      	str	r0, [r4, #0]
 8003670:	4629      	mov	r1, r5
 8003672:	4630      	mov	r0, r6
 8003674:	f000 f864 	bl	8003740 <_sbrk_r>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d124      	bne.n	80036c6 <_malloc_r+0x92>
 800367c:	230c      	movs	r3, #12
 800367e:	6033      	str	r3, [r6, #0]
 8003680:	4630      	mov	r0, r6
 8003682:	f000 f958 	bl	8003936 <__malloc_unlock>
 8003686:	e7e4      	b.n	8003652 <_malloc_r+0x1e>
 8003688:	680b      	ldr	r3, [r1, #0]
 800368a:	1b5b      	subs	r3, r3, r5
 800368c:	d418      	bmi.n	80036c0 <_malloc_r+0x8c>
 800368e:	2b0b      	cmp	r3, #11
 8003690:	d90f      	bls.n	80036b2 <_malloc_r+0x7e>
 8003692:	600b      	str	r3, [r1, #0]
 8003694:	50cd      	str	r5, [r1, r3]
 8003696:	18cc      	adds	r4, r1, r3
 8003698:	4630      	mov	r0, r6
 800369a:	f000 f94c 	bl	8003936 <__malloc_unlock>
 800369e:	f104 000b 	add.w	r0, r4, #11
 80036a2:	1d23      	adds	r3, r4, #4
 80036a4:	f020 0007 	bic.w	r0, r0, #7
 80036a8:	1ac3      	subs	r3, r0, r3
 80036aa:	d0d3      	beq.n	8003654 <_malloc_r+0x20>
 80036ac:	425a      	negs	r2, r3
 80036ae:	50e2      	str	r2, [r4, r3]
 80036b0:	e7d0      	b.n	8003654 <_malloc_r+0x20>
 80036b2:	428c      	cmp	r4, r1
 80036b4:	684b      	ldr	r3, [r1, #4]
 80036b6:	bf16      	itet	ne
 80036b8:	6063      	strne	r3, [r4, #4]
 80036ba:	6013      	streq	r3, [r2, #0]
 80036bc:	460c      	movne	r4, r1
 80036be:	e7eb      	b.n	8003698 <_malloc_r+0x64>
 80036c0:	460c      	mov	r4, r1
 80036c2:	6849      	ldr	r1, [r1, #4]
 80036c4:	e7cc      	b.n	8003660 <_malloc_r+0x2c>
 80036c6:	1cc4      	adds	r4, r0, #3
 80036c8:	f024 0403 	bic.w	r4, r4, #3
 80036cc:	42a0      	cmp	r0, r4
 80036ce:	d005      	beq.n	80036dc <_malloc_r+0xa8>
 80036d0:	1a21      	subs	r1, r4, r0
 80036d2:	4630      	mov	r0, r6
 80036d4:	f000 f834 	bl	8003740 <_sbrk_r>
 80036d8:	3001      	adds	r0, #1
 80036da:	d0cf      	beq.n	800367c <_malloc_r+0x48>
 80036dc:	6025      	str	r5, [r4, #0]
 80036de:	e7db      	b.n	8003698 <_malloc_r+0x64>
 80036e0:	200000a8 	.word	0x200000a8
 80036e4:	200000ac 	.word	0x200000ac

080036e8 <iprintf>:
 80036e8:	b40f      	push	{r0, r1, r2, r3}
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <iprintf+0x2c>)
 80036ec:	b513      	push	{r0, r1, r4, lr}
 80036ee:	681c      	ldr	r4, [r3, #0]
 80036f0:	b124      	cbz	r4, 80036fc <iprintf+0x14>
 80036f2:	69a3      	ldr	r3, [r4, #24]
 80036f4:	b913      	cbnz	r3, 80036fc <iprintf+0x14>
 80036f6:	4620      	mov	r0, r4
 80036f8:	f000 f892 	bl	8003820 <__sinit>
 80036fc:	ab05      	add	r3, sp, #20
 80036fe:	9a04      	ldr	r2, [sp, #16]
 8003700:	68a1      	ldr	r1, [r4, #8]
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	4620      	mov	r0, r4
 8003706:	f000 fa93 	bl	8003c30 <_vfiprintf_r>
 800370a:	b002      	add	sp, #8
 800370c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003710:	b004      	add	sp, #16
 8003712:	4770      	bx	lr
 8003714:	2000000c 	.word	0x2000000c

08003718 <putchar>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <putchar+0x24>)
 800371c:	681c      	ldr	r4, [r3, #0]
 800371e:	4605      	mov	r5, r0
 8003720:	b124      	cbz	r4, 800372c <putchar+0x14>
 8003722:	69a3      	ldr	r3, [r4, #24]
 8003724:	b913      	cbnz	r3, 800372c <putchar+0x14>
 8003726:	4620      	mov	r0, r4
 8003728:	f000 f87a 	bl	8003820 <__sinit>
 800372c:	68a2      	ldr	r2, [r4, #8]
 800372e:	4629      	mov	r1, r5
 8003730:	4620      	mov	r0, r4
 8003732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003736:	f000 bd19 	b.w	800416c <_putc_r>
 800373a:	bf00      	nop
 800373c:	2000000c 	.word	0x2000000c

08003740 <_sbrk_r>:
 8003740:	b538      	push	{r3, r4, r5, lr}
 8003742:	4c06      	ldr	r4, [pc, #24]	; (800375c <_sbrk_r+0x1c>)
 8003744:	2300      	movs	r3, #0
 8003746:	4605      	mov	r5, r0
 8003748:	4608      	mov	r0, r1
 800374a:	6023      	str	r3, [r4, #0]
 800374c:	f7fe f966 	bl	8001a1c <_sbrk>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d102      	bne.n	800375a <_sbrk_r+0x1a>
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	b103      	cbz	r3, 800375a <_sbrk_r+0x1a>
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	bd38      	pop	{r3, r4, r5, pc}
 800375c:	2000010c 	.word	0x2000010c

08003760 <siprintf>:
 8003760:	b40e      	push	{r1, r2, r3}
 8003762:	b500      	push	{lr}
 8003764:	b09c      	sub	sp, #112	; 0x70
 8003766:	ab1d      	add	r3, sp, #116	; 0x74
 8003768:	9002      	str	r0, [sp, #8]
 800376a:	9006      	str	r0, [sp, #24]
 800376c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003770:	4809      	ldr	r0, [pc, #36]	; (8003798 <siprintf+0x38>)
 8003772:	9107      	str	r1, [sp, #28]
 8003774:	9104      	str	r1, [sp, #16]
 8003776:	4909      	ldr	r1, [pc, #36]	; (800379c <siprintf+0x3c>)
 8003778:	f853 2b04 	ldr.w	r2, [r3], #4
 800377c:	9105      	str	r1, [sp, #20]
 800377e:	6800      	ldr	r0, [r0, #0]
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	a902      	add	r1, sp, #8
 8003784:	f000 f932 	bl	80039ec <_svfiprintf_r>
 8003788:	9b02      	ldr	r3, [sp, #8]
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	b01c      	add	sp, #112	; 0x70
 8003790:	f85d eb04 	ldr.w	lr, [sp], #4
 8003794:	b003      	add	sp, #12
 8003796:	4770      	bx	lr
 8003798:	2000000c 	.word	0x2000000c
 800379c:	ffff0208 	.word	0xffff0208

080037a0 <std>:
 80037a0:	2300      	movs	r3, #0
 80037a2:	b510      	push	{r4, lr}
 80037a4:	4604      	mov	r4, r0
 80037a6:	e9c0 3300 	strd	r3, r3, [r0]
 80037aa:	6083      	str	r3, [r0, #8]
 80037ac:	8181      	strh	r1, [r0, #12]
 80037ae:	6643      	str	r3, [r0, #100]	; 0x64
 80037b0:	81c2      	strh	r2, [r0, #14]
 80037b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037b6:	6183      	str	r3, [r0, #24]
 80037b8:	4619      	mov	r1, r3
 80037ba:	2208      	movs	r2, #8
 80037bc:	305c      	adds	r0, #92	; 0x5c
 80037be:	f7ff fed4 	bl	800356a <memset>
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <std+0x38>)
 80037c4:	6263      	str	r3, [r4, #36]	; 0x24
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <std+0x3c>)
 80037c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <std+0x40>)
 80037cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <std+0x44>)
 80037d0:	6224      	str	r4, [r4, #32]
 80037d2:	6323      	str	r3, [r4, #48]	; 0x30
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	bf00      	nop
 80037d8:	080041d9 	.word	0x080041d9
 80037dc:	080041fb 	.word	0x080041fb
 80037e0:	08004233 	.word	0x08004233
 80037e4:	08004257 	.word	0x08004257

080037e8 <_cleanup_r>:
 80037e8:	4901      	ldr	r1, [pc, #4]	; (80037f0 <_cleanup_r+0x8>)
 80037ea:	f000 b885 	b.w	80038f8 <_fwalk_reent>
 80037ee:	bf00      	nop
 80037f0:	08004531 	.word	0x08004531

080037f4 <__sfmoreglue>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	1e4a      	subs	r2, r1, #1
 80037f8:	2568      	movs	r5, #104	; 0x68
 80037fa:	4355      	muls	r5, r2
 80037fc:	460e      	mov	r6, r1
 80037fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003802:	f7ff ff17 	bl	8003634 <_malloc_r>
 8003806:	4604      	mov	r4, r0
 8003808:	b140      	cbz	r0, 800381c <__sfmoreglue+0x28>
 800380a:	2100      	movs	r1, #0
 800380c:	e9c0 1600 	strd	r1, r6, [r0]
 8003810:	300c      	adds	r0, #12
 8003812:	60a0      	str	r0, [r4, #8]
 8003814:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003818:	f7ff fea7 	bl	800356a <memset>
 800381c:	4620      	mov	r0, r4
 800381e:	bd70      	pop	{r4, r5, r6, pc}

08003820 <__sinit>:
 8003820:	6983      	ldr	r3, [r0, #24]
 8003822:	b510      	push	{r4, lr}
 8003824:	4604      	mov	r4, r0
 8003826:	bb33      	cbnz	r3, 8003876 <__sinit+0x56>
 8003828:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800382c:	6503      	str	r3, [r0, #80]	; 0x50
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <__sinit+0x58>)
 8003830:	4a12      	ldr	r2, [pc, #72]	; (800387c <__sinit+0x5c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6282      	str	r2, [r0, #40]	; 0x28
 8003836:	4298      	cmp	r0, r3
 8003838:	bf04      	itt	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	6183      	streq	r3, [r0, #24]
 800383e:	f000 f81f 	bl	8003880 <__sfp>
 8003842:	6060      	str	r0, [r4, #4]
 8003844:	4620      	mov	r0, r4
 8003846:	f000 f81b 	bl	8003880 <__sfp>
 800384a:	60a0      	str	r0, [r4, #8]
 800384c:	4620      	mov	r0, r4
 800384e:	f000 f817 	bl	8003880 <__sfp>
 8003852:	2200      	movs	r2, #0
 8003854:	60e0      	str	r0, [r4, #12]
 8003856:	2104      	movs	r1, #4
 8003858:	6860      	ldr	r0, [r4, #4]
 800385a:	f7ff ffa1 	bl	80037a0 <std>
 800385e:	2201      	movs	r2, #1
 8003860:	2109      	movs	r1, #9
 8003862:	68a0      	ldr	r0, [r4, #8]
 8003864:	f7ff ff9c 	bl	80037a0 <std>
 8003868:	2202      	movs	r2, #2
 800386a:	2112      	movs	r1, #18
 800386c:	68e0      	ldr	r0, [r4, #12]
 800386e:	f7ff ff97 	bl	80037a0 <std>
 8003872:	2301      	movs	r3, #1
 8003874:	61a3      	str	r3, [r4, #24]
 8003876:	bd10      	pop	{r4, pc}
 8003878:	08004cb4 	.word	0x08004cb4
 800387c:	080037e9 	.word	0x080037e9

08003880 <__sfp>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <__sfp+0x70>)
 8003884:	681e      	ldr	r6, [r3, #0]
 8003886:	69b3      	ldr	r3, [r6, #24]
 8003888:	4607      	mov	r7, r0
 800388a:	b913      	cbnz	r3, 8003892 <__sfp+0x12>
 800388c:	4630      	mov	r0, r6
 800388e:	f7ff ffc7 	bl	8003820 <__sinit>
 8003892:	3648      	adds	r6, #72	; 0x48
 8003894:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003898:	3b01      	subs	r3, #1
 800389a:	d503      	bpl.n	80038a4 <__sfp+0x24>
 800389c:	6833      	ldr	r3, [r6, #0]
 800389e:	b133      	cbz	r3, 80038ae <__sfp+0x2e>
 80038a0:	6836      	ldr	r6, [r6, #0]
 80038a2:	e7f7      	b.n	8003894 <__sfp+0x14>
 80038a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038a8:	b16d      	cbz	r5, 80038c6 <__sfp+0x46>
 80038aa:	3468      	adds	r4, #104	; 0x68
 80038ac:	e7f4      	b.n	8003898 <__sfp+0x18>
 80038ae:	2104      	movs	r1, #4
 80038b0:	4638      	mov	r0, r7
 80038b2:	f7ff ff9f 	bl	80037f4 <__sfmoreglue>
 80038b6:	6030      	str	r0, [r6, #0]
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d1f1      	bne.n	80038a0 <__sfp+0x20>
 80038bc:	230c      	movs	r3, #12
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4604      	mov	r4, r0
 80038c2:	4620      	mov	r0, r4
 80038c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <__sfp+0x74>)
 80038c8:	6665      	str	r5, [r4, #100]	; 0x64
 80038ca:	e9c4 5500 	strd	r5, r5, [r4]
 80038ce:	60a5      	str	r5, [r4, #8]
 80038d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80038d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80038d8:	2208      	movs	r2, #8
 80038da:	4629      	mov	r1, r5
 80038dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038e0:	f7ff fe43 	bl	800356a <memset>
 80038e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038ec:	e7e9      	b.n	80038c2 <__sfp+0x42>
 80038ee:	bf00      	nop
 80038f0:	08004cb4 	.word	0x08004cb4
 80038f4:	ffff0001 	.word	0xffff0001

080038f8 <_fwalk_reent>:
 80038f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038fc:	4680      	mov	r8, r0
 80038fe:	4689      	mov	r9, r1
 8003900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003904:	2600      	movs	r6, #0
 8003906:	b914      	cbnz	r4, 800390e <_fwalk_reent+0x16>
 8003908:	4630      	mov	r0, r6
 800390a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800390e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003912:	3f01      	subs	r7, #1
 8003914:	d501      	bpl.n	800391a <_fwalk_reent+0x22>
 8003916:	6824      	ldr	r4, [r4, #0]
 8003918:	e7f5      	b.n	8003906 <_fwalk_reent+0xe>
 800391a:	89ab      	ldrh	r3, [r5, #12]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d907      	bls.n	8003930 <_fwalk_reent+0x38>
 8003920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003924:	3301      	adds	r3, #1
 8003926:	d003      	beq.n	8003930 <_fwalk_reent+0x38>
 8003928:	4629      	mov	r1, r5
 800392a:	4640      	mov	r0, r8
 800392c:	47c8      	blx	r9
 800392e:	4306      	orrs	r6, r0
 8003930:	3568      	adds	r5, #104	; 0x68
 8003932:	e7ee      	b.n	8003912 <_fwalk_reent+0x1a>

08003934 <__malloc_lock>:
 8003934:	4770      	bx	lr

08003936 <__malloc_unlock>:
 8003936:	4770      	bx	lr

08003938 <__ssputs_r>:
 8003938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800393c:	688e      	ldr	r6, [r1, #8]
 800393e:	429e      	cmp	r6, r3
 8003940:	4682      	mov	sl, r0
 8003942:	460c      	mov	r4, r1
 8003944:	4690      	mov	r8, r2
 8003946:	4699      	mov	r9, r3
 8003948:	d837      	bhi.n	80039ba <__ssputs_r+0x82>
 800394a:	898a      	ldrh	r2, [r1, #12]
 800394c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003950:	d031      	beq.n	80039b6 <__ssputs_r+0x7e>
 8003952:	6825      	ldr	r5, [r4, #0]
 8003954:	6909      	ldr	r1, [r1, #16]
 8003956:	1a6f      	subs	r7, r5, r1
 8003958:	6965      	ldr	r5, [r4, #20]
 800395a:	2302      	movs	r3, #2
 800395c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003960:	fb95 f5f3 	sdiv	r5, r5, r3
 8003964:	f109 0301 	add.w	r3, r9, #1
 8003968:	443b      	add	r3, r7
 800396a:	429d      	cmp	r5, r3
 800396c:	bf38      	it	cc
 800396e:	461d      	movcc	r5, r3
 8003970:	0553      	lsls	r3, r2, #21
 8003972:	d530      	bpl.n	80039d6 <__ssputs_r+0x9e>
 8003974:	4629      	mov	r1, r5
 8003976:	f7ff fe5d 	bl	8003634 <_malloc_r>
 800397a:	4606      	mov	r6, r0
 800397c:	b950      	cbnz	r0, 8003994 <__ssputs_r+0x5c>
 800397e:	230c      	movs	r3, #12
 8003980:	f8ca 3000 	str.w	r3, [sl]
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003994:	463a      	mov	r2, r7
 8003996:	6921      	ldr	r1, [r4, #16]
 8003998:	f7ff fddc 	bl	8003554 <memcpy>
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a6:	81a3      	strh	r3, [r4, #12]
 80039a8:	6126      	str	r6, [r4, #16]
 80039aa:	6165      	str	r5, [r4, #20]
 80039ac:	443e      	add	r6, r7
 80039ae:	1bed      	subs	r5, r5, r7
 80039b0:	6026      	str	r6, [r4, #0]
 80039b2:	60a5      	str	r5, [r4, #8]
 80039b4:	464e      	mov	r6, r9
 80039b6:	454e      	cmp	r6, r9
 80039b8:	d900      	bls.n	80039bc <__ssputs_r+0x84>
 80039ba:	464e      	mov	r6, r9
 80039bc:	4632      	mov	r2, r6
 80039be:	4641      	mov	r1, r8
 80039c0:	6820      	ldr	r0, [r4, #0]
 80039c2:	f000 fe55 	bl	8004670 <memmove>
 80039c6:	68a3      	ldr	r3, [r4, #8]
 80039c8:	1b9b      	subs	r3, r3, r6
 80039ca:	60a3      	str	r3, [r4, #8]
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	441e      	add	r6, r3
 80039d0:	6026      	str	r6, [r4, #0]
 80039d2:	2000      	movs	r0, #0
 80039d4:	e7dc      	b.n	8003990 <__ssputs_r+0x58>
 80039d6:	462a      	mov	r2, r5
 80039d8:	f000 fe63 	bl	80046a2 <_realloc_r>
 80039dc:	4606      	mov	r6, r0
 80039de:	2800      	cmp	r0, #0
 80039e0:	d1e2      	bne.n	80039a8 <__ssputs_r+0x70>
 80039e2:	6921      	ldr	r1, [r4, #16]
 80039e4:	4650      	mov	r0, sl
 80039e6:	f7ff fdd7 	bl	8003598 <_free_r>
 80039ea:	e7c8      	b.n	800397e <__ssputs_r+0x46>

080039ec <_svfiprintf_r>:
 80039ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f0:	461d      	mov	r5, r3
 80039f2:	898b      	ldrh	r3, [r1, #12]
 80039f4:	061f      	lsls	r7, r3, #24
 80039f6:	b09d      	sub	sp, #116	; 0x74
 80039f8:	4680      	mov	r8, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	4616      	mov	r6, r2
 80039fe:	d50f      	bpl.n	8003a20 <_svfiprintf_r+0x34>
 8003a00:	690b      	ldr	r3, [r1, #16]
 8003a02:	b96b      	cbnz	r3, 8003a20 <_svfiprintf_r+0x34>
 8003a04:	2140      	movs	r1, #64	; 0x40
 8003a06:	f7ff fe15 	bl	8003634 <_malloc_r>
 8003a0a:	6020      	str	r0, [r4, #0]
 8003a0c:	6120      	str	r0, [r4, #16]
 8003a0e:	b928      	cbnz	r0, 8003a1c <_svfiprintf_r+0x30>
 8003a10:	230c      	movs	r3, #12
 8003a12:	f8c8 3000 	str.w	r3, [r8]
 8003a16:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1a:	e0c8      	b.n	8003bae <_svfiprintf_r+0x1c2>
 8003a1c:	2340      	movs	r3, #64	; 0x40
 8003a1e:	6163      	str	r3, [r4, #20]
 8003a20:	2300      	movs	r3, #0
 8003a22:	9309      	str	r3, [sp, #36]	; 0x24
 8003a24:	2320      	movs	r3, #32
 8003a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a2a:	2330      	movs	r3, #48	; 0x30
 8003a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a30:	9503      	str	r5, [sp, #12]
 8003a32:	f04f 0b01 	mov.w	fp, #1
 8003a36:	4637      	mov	r7, r6
 8003a38:	463d      	mov	r5, r7
 8003a3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a3e:	b10b      	cbz	r3, 8003a44 <_svfiprintf_r+0x58>
 8003a40:	2b25      	cmp	r3, #37	; 0x25
 8003a42:	d13e      	bne.n	8003ac2 <_svfiprintf_r+0xd6>
 8003a44:	ebb7 0a06 	subs.w	sl, r7, r6
 8003a48:	d00b      	beq.n	8003a62 <_svfiprintf_r+0x76>
 8003a4a:	4653      	mov	r3, sl
 8003a4c:	4632      	mov	r2, r6
 8003a4e:	4621      	mov	r1, r4
 8003a50:	4640      	mov	r0, r8
 8003a52:	f7ff ff71 	bl	8003938 <__ssputs_r>
 8003a56:	3001      	adds	r0, #1
 8003a58:	f000 80a4 	beq.w	8003ba4 <_svfiprintf_r+0x1b8>
 8003a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a5e:	4453      	add	r3, sl
 8003a60:	9309      	str	r3, [sp, #36]	; 0x24
 8003a62:	783b      	ldrb	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 809d 	beq.w	8003ba4 <_svfiprintf_r+0x1b8>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a74:	9304      	str	r3, [sp, #16]
 8003a76:	9307      	str	r3, [sp, #28]
 8003a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a7e:	462f      	mov	r7, r5
 8003a80:	2205      	movs	r2, #5
 8003a82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003a86:	4850      	ldr	r0, [pc, #320]	; (8003bc8 <_svfiprintf_r+0x1dc>)
 8003a88:	f7fc fbba 	bl	8000200 <memchr>
 8003a8c:	9b04      	ldr	r3, [sp, #16]
 8003a8e:	b9d0      	cbnz	r0, 8003ac6 <_svfiprintf_r+0xda>
 8003a90:	06d9      	lsls	r1, r3, #27
 8003a92:	bf44      	itt	mi
 8003a94:	2220      	movmi	r2, #32
 8003a96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a9a:	071a      	lsls	r2, r3, #28
 8003a9c:	bf44      	itt	mi
 8003a9e:	222b      	movmi	r2, #43	; 0x2b
 8003aa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003aa4:	782a      	ldrb	r2, [r5, #0]
 8003aa6:	2a2a      	cmp	r2, #42	; 0x2a
 8003aa8:	d015      	beq.n	8003ad6 <_svfiprintf_r+0xea>
 8003aaa:	9a07      	ldr	r2, [sp, #28]
 8003aac:	462f      	mov	r7, r5
 8003aae:	2000      	movs	r0, #0
 8003ab0:	250a      	movs	r5, #10
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ab8:	3b30      	subs	r3, #48	; 0x30
 8003aba:	2b09      	cmp	r3, #9
 8003abc:	d94d      	bls.n	8003b5a <_svfiprintf_r+0x16e>
 8003abe:	b1b8      	cbz	r0, 8003af0 <_svfiprintf_r+0x104>
 8003ac0:	e00f      	b.n	8003ae2 <_svfiprintf_r+0xf6>
 8003ac2:	462f      	mov	r7, r5
 8003ac4:	e7b8      	b.n	8003a38 <_svfiprintf_r+0x4c>
 8003ac6:	4a40      	ldr	r2, [pc, #256]	; (8003bc8 <_svfiprintf_r+0x1dc>)
 8003ac8:	1a80      	subs	r0, r0, r2
 8003aca:	fa0b f000 	lsl.w	r0, fp, r0
 8003ace:	4318      	orrs	r0, r3
 8003ad0:	9004      	str	r0, [sp, #16]
 8003ad2:	463d      	mov	r5, r7
 8003ad4:	e7d3      	b.n	8003a7e <_svfiprintf_r+0x92>
 8003ad6:	9a03      	ldr	r2, [sp, #12]
 8003ad8:	1d11      	adds	r1, r2, #4
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	9103      	str	r1, [sp, #12]
 8003ade:	2a00      	cmp	r2, #0
 8003ae0:	db01      	blt.n	8003ae6 <_svfiprintf_r+0xfa>
 8003ae2:	9207      	str	r2, [sp, #28]
 8003ae4:	e004      	b.n	8003af0 <_svfiprintf_r+0x104>
 8003ae6:	4252      	negs	r2, r2
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	9207      	str	r2, [sp, #28]
 8003aee:	9304      	str	r3, [sp, #16]
 8003af0:	783b      	ldrb	r3, [r7, #0]
 8003af2:	2b2e      	cmp	r3, #46	; 0x2e
 8003af4:	d10c      	bne.n	8003b10 <_svfiprintf_r+0x124>
 8003af6:	787b      	ldrb	r3, [r7, #1]
 8003af8:	2b2a      	cmp	r3, #42	; 0x2a
 8003afa:	d133      	bne.n	8003b64 <_svfiprintf_r+0x178>
 8003afc:	9b03      	ldr	r3, [sp, #12]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	9203      	str	r2, [sp, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bfb8      	it	lt
 8003b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b0c:	3702      	adds	r7, #2
 8003b0e:	9305      	str	r3, [sp, #20]
 8003b10:	4d2e      	ldr	r5, [pc, #184]	; (8003bcc <_svfiprintf_r+0x1e0>)
 8003b12:	7839      	ldrb	r1, [r7, #0]
 8003b14:	2203      	movs	r2, #3
 8003b16:	4628      	mov	r0, r5
 8003b18:	f7fc fb72 	bl	8000200 <memchr>
 8003b1c:	b138      	cbz	r0, 8003b2e <_svfiprintf_r+0x142>
 8003b1e:	2340      	movs	r3, #64	; 0x40
 8003b20:	1b40      	subs	r0, r0, r5
 8003b22:	fa03 f000 	lsl.w	r0, r3, r0
 8003b26:	9b04      	ldr	r3, [sp, #16]
 8003b28:	4303      	orrs	r3, r0
 8003b2a:	3701      	adds	r7, #1
 8003b2c:	9304      	str	r3, [sp, #16]
 8003b2e:	7839      	ldrb	r1, [r7, #0]
 8003b30:	4827      	ldr	r0, [pc, #156]	; (8003bd0 <_svfiprintf_r+0x1e4>)
 8003b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b36:	2206      	movs	r2, #6
 8003b38:	1c7e      	adds	r6, r7, #1
 8003b3a:	f7fc fb61 	bl	8000200 <memchr>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d038      	beq.n	8003bb4 <_svfiprintf_r+0x1c8>
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <_svfiprintf_r+0x1e8>)
 8003b44:	bb13      	cbnz	r3, 8003b8c <_svfiprintf_r+0x1a0>
 8003b46:	9b03      	ldr	r3, [sp, #12]
 8003b48:	3307      	adds	r3, #7
 8003b4a:	f023 0307 	bic.w	r3, r3, #7
 8003b4e:	3308      	adds	r3, #8
 8003b50:	9303      	str	r3, [sp, #12]
 8003b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b54:	444b      	add	r3, r9
 8003b56:	9309      	str	r3, [sp, #36]	; 0x24
 8003b58:	e76d      	b.n	8003a36 <_svfiprintf_r+0x4a>
 8003b5a:	fb05 3202 	mla	r2, r5, r2, r3
 8003b5e:	2001      	movs	r0, #1
 8003b60:	460f      	mov	r7, r1
 8003b62:	e7a6      	b.n	8003ab2 <_svfiprintf_r+0xc6>
 8003b64:	2300      	movs	r3, #0
 8003b66:	3701      	adds	r7, #1
 8003b68:	9305      	str	r3, [sp, #20]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	250a      	movs	r5, #10
 8003b6e:	4638      	mov	r0, r7
 8003b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b74:	3a30      	subs	r2, #48	; 0x30
 8003b76:	2a09      	cmp	r2, #9
 8003b78:	d903      	bls.n	8003b82 <_svfiprintf_r+0x196>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0c8      	beq.n	8003b10 <_svfiprintf_r+0x124>
 8003b7e:	9105      	str	r1, [sp, #20]
 8003b80:	e7c6      	b.n	8003b10 <_svfiprintf_r+0x124>
 8003b82:	fb05 2101 	mla	r1, r5, r1, r2
 8003b86:	2301      	movs	r3, #1
 8003b88:	4607      	mov	r7, r0
 8003b8a:	e7f0      	b.n	8003b6e <_svfiprintf_r+0x182>
 8003b8c:	ab03      	add	r3, sp, #12
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	4622      	mov	r2, r4
 8003b92:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <_svfiprintf_r+0x1ec>)
 8003b94:	a904      	add	r1, sp, #16
 8003b96:	4640      	mov	r0, r8
 8003b98:	f3af 8000 	nop.w
 8003b9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ba0:	4681      	mov	r9, r0
 8003ba2:	d1d6      	bne.n	8003b52 <_svfiprintf_r+0x166>
 8003ba4:	89a3      	ldrh	r3, [r4, #12]
 8003ba6:	065b      	lsls	r3, r3, #25
 8003ba8:	f53f af35 	bmi.w	8003a16 <_svfiprintf_r+0x2a>
 8003bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bae:	b01d      	add	sp, #116	; 0x74
 8003bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb4:	ab03      	add	r3, sp, #12
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	4622      	mov	r2, r4
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <_svfiprintf_r+0x1ec>)
 8003bbc:	a904      	add	r1, sp, #16
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	f000 f9c2 	bl	8003f48 <_printf_i>
 8003bc4:	e7ea      	b.n	8003b9c <_svfiprintf_r+0x1b0>
 8003bc6:	bf00      	nop
 8003bc8:	08004d18 	.word	0x08004d18
 8003bcc:	08004d1e 	.word	0x08004d1e
 8003bd0:	08004d22 	.word	0x08004d22
 8003bd4:	00000000 	.word	0x00000000
 8003bd8:	08003939 	.word	0x08003939

08003bdc <__sfputc_r>:
 8003bdc:	6893      	ldr	r3, [r2, #8]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	b410      	push	{r4}
 8003be4:	6093      	str	r3, [r2, #8]
 8003be6:	da08      	bge.n	8003bfa <__sfputc_r+0x1e>
 8003be8:	6994      	ldr	r4, [r2, #24]
 8003bea:	42a3      	cmp	r3, r4
 8003bec:	db01      	blt.n	8003bf2 <__sfputc_r+0x16>
 8003bee:	290a      	cmp	r1, #10
 8003bf0:	d103      	bne.n	8003bfa <__sfputc_r+0x1e>
 8003bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bf6:	f000 bb33 	b.w	8004260 <__swbuf_r>
 8003bfa:	6813      	ldr	r3, [r2, #0]
 8003bfc:	1c58      	adds	r0, r3, #1
 8003bfe:	6010      	str	r0, [r2, #0]
 8003c00:	7019      	strb	r1, [r3, #0]
 8003c02:	4608      	mov	r0, r1
 8003c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <__sfputs_r>:
 8003c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	460f      	mov	r7, r1
 8003c10:	4614      	mov	r4, r2
 8003c12:	18d5      	adds	r5, r2, r3
 8003c14:	42ac      	cmp	r4, r5
 8003c16:	d101      	bne.n	8003c1c <__sfputs_r+0x12>
 8003c18:	2000      	movs	r0, #0
 8003c1a:	e007      	b.n	8003c2c <__sfputs_r+0x22>
 8003c1c:	463a      	mov	r2, r7
 8003c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c22:	4630      	mov	r0, r6
 8003c24:	f7ff ffda 	bl	8003bdc <__sfputc_r>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d1f3      	bne.n	8003c14 <__sfputs_r+0xa>
 8003c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c30 <_vfiprintf_r>:
 8003c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	460c      	mov	r4, r1
 8003c36:	b09d      	sub	sp, #116	; 0x74
 8003c38:	4617      	mov	r7, r2
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	4606      	mov	r6, r0
 8003c3e:	b118      	cbz	r0, 8003c48 <_vfiprintf_r+0x18>
 8003c40:	6983      	ldr	r3, [r0, #24]
 8003c42:	b90b      	cbnz	r3, 8003c48 <_vfiprintf_r+0x18>
 8003c44:	f7ff fdec 	bl	8003820 <__sinit>
 8003c48:	4b7c      	ldr	r3, [pc, #496]	; (8003e3c <_vfiprintf_r+0x20c>)
 8003c4a:	429c      	cmp	r4, r3
 8003c4c:	d158      	bne.n	8003d00 <_vfiprintf_r+0xd0>
 8003c4e:	6874      	ldr	r4, [r6, #4]
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	0718      	lsls	r0, r3, #28
 8003c54:	d55e      	bpl.n	8003d14 <_vfiprintf_r+0xe4>
 8003c56:	6923      	ldr	r3, [r4, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05b      	beq.n	8003d14 <_vfiprintf_r+0xe4>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c60:	2320      	movs	r3, #32
 8003c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c66:	2330      	movs	r3, #48	; 0x30
 8003c68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c6c:	9503      	str	r5, [sp, #12]
 8003c6e:	f04f 0b01 	mov.w	fp, #1
 8003c72:	46b8      	mov	r8, r7
 8003c74:	4645      	mov	r5, r8
 8003c76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c7a:	b10b      	cbz	r3, 8003c80 <_vfiprintf_r+0x50>
 8003c7c:	2b25      	cmp	r3, #37	; 0x25
 8003c7e:	d154      	bne.n	8003d2a <_vfiprintf_r+0xfa>
 8003c80:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c84:	d00b      	beq.n	8003c9e <_vfiprintf_r+0x6e>
 8003c86:	4653      	mov	r3, sl
 8003c88:	463a      	mov	r2, r7
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f7ff ffbc 	bl	8003c0a <__sfputs_r>
 8003c92:	3001      	adds	r0, #1
 8003c94:	f000 80c2 	beq.w	8003e1c <_vfiprintf_r+0x1ec>
 8003c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c9a:	4453      	add	r3, sl
 8003c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c9e:	f898 3000 	ldrb.w	r3, [r8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 80ba 	beq.w	8003e1c <_vfiprintf_r+0x1ec>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cb2:	9304      	str	r3, [sp, #16]
 8003cb4:	9307      	str	r3, [sp, #28]
 8003cb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cba:	931a      	str	r3, [sp, #104]	; 0x68
 8003cbc:	46a8      	mov	r8, r5
 8003cbe:	2205      	movs	r2, #5
 8003cc0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003cc4:	485e      	ldr	r0, [pc, #376]	; (8003e40 <_vfiprintf_r+0x210>)
 8003cc6:	f7fc fa9b 	bl	8000200 <memchr>
 8003cca:	9b04      	ldr	r3, [sp, #16]
 8003ccc:	bb78      	cbnz	r0, 8003d2e <_vfiprintf_r+0xfe>
 8003cce:	06d9      	lsls	r1, r3, #27
 8003cd0:	bf44      	itt	mi
 8003cd2:	2220      	movmi	r2, #32
 8003cd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cd8:	071a      	lsls	r2, r3, #28
 8003cda:	bf44      	itt	mi
 8003cdc:	222b      	movmi	r2, #43	; 0x2b
 8003cde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ce2:	782a      	ldrb	r2, [r5, #0]
 8003ce4:	2a2a      	cmp	r2, #42	; 0x2a
 8003ce6:	d02a      	beq.n	8003d3e <_vfiprintf_r+0x10e>
 8003ce8:	9a07      	ldr	r2, [sp, #28]
 8003cea:	46a8      	mov	r8, r5
 8003cec:	2000      	movs	r0, #0
 8003cee:	250a      	movs	r5, #10
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cf6:	3b30      	subs	r3, #48	; 0x30
 8003cf8:	2b09      	cmp	r3, #9
 8003cfa:	d969      	bls.n	8003dd0 <_vfiprintf_r+0x1a0>
 8003cfc:	b360      	cbz	r0, 8003d58 <_vfiprintf_r+0x128>
 8003cfe:	e024      	b.n	8003d4a <_vfiprintf_r+0x11a>
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <_vfiprintf_r+0x214>)
 8003d02:	429c      	cmp	r4, r3
 8003d04:	d101      	bne.n	8003d0a <_vfiprintf_r+0xda>
 8003d06:	68b4      	ldr	r4, [r6, #8]
 8003d08:	e7a2      	b.n	8003c50 <_vfiprintf_r+0x20>
 8003d0a:	4b4f      	ldr	r3, [pc, #316]	; (8003e48 <_vfiprintf_r+0x218>)
 8003d0c:	429c      	cmp	r4, r3
 8003d0e:	bf08      	it	eq
 8003d10:	68f4      	ldreq	r4, [r6, #12]
 8003d12:	e79d      	b.n	8003c50 <_vfiprintf_r+0x20>
 8003d14:	4621      	mov	r1, r4
 8003d16:	4630      	mov	r0, r6
 8003d18:	f000 fb06 	bl	8004328 <__swsetup_r>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d09d      	beq.n	8003c5c <_vfiprintf_r+0x2c>
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	b01d      	add	sp, #116	; 0x74
 8003d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2a:	46a8      	mov	r8, r5
 8003d2c:	e7a2      	b.n	8003c74 <_vfiprintf_r+0x44>
 8003d2e:	4a44      	ldr	r2, [pc, #272]	; (8003e40 <_vfiprintf_r+0x210>)
 8003d30:	1a80      	subs	r0, r0, r2
 8003d32:	fa0b f000 	lsl.w	r0, fp, r0
 8003d36:	4318      	orrs	r0, r3
 8003d38:	9004      	str	r0, [sp, #16]
 8003d3a:	4645      	mov	r5, r8
 8003d3c:	e7be      	b.n	8003cbc <_vfiprintf_r+0x8c>
 8003d3e:	9a03      	ldr	r2, [sp, #12]
 8003d40:	1d11      	adds	r1, r2, #4
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	9103      	str	r1, [sp, #12]
 8003d46:	2a00      	cmp	r2, #0
 8003d48:	db01      	blt.n	8003d4e <_vfiprintf_r+0x11e>
 8003d4a:	9207      	str	r2, [sp, #28]
 8003d4c:	e004      	b.n	8003d58 <_vfiprintf_r+0x128>
 8003d4e:	4252      	negs	r2, r2
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	9207      	str	r2, [sp, #28]
 8003d56:	9304      	str	r3, [sp, #16]
 8003d58:	f898 3000 	ldrb.w	r3, [r8]
 8003d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8003d5e:	d10e      	bne.n	8003d7e <_vfiprintf_r+0x14e>
 8003d60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d64:	2b2a      	cmp	r3, #42	; 0x2a
 8003d66:	d138      	bne.n	8003dda <_vfiprintf_r+0x1aa>
 8003d68:	9b03      	ldr	r3, [sp, #12]
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	9203      	str	r2, [sp, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bfb8      	it	lt
 8003d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d78:	f108 0802 	add.w	r8, r8, #2
 8003d7c:	9305      	str	r3, [sp, #20]
 8003d7e:	4d33      	ldr	r5, [pc, #204]	; (8003e4c <_vfiprintf_r+0x21c>)
 8003d80:	f898 1000 	ldrb.w	r1, [r8]
 8003d84:	2203      	movs	r2, #3
 8003d86:	4628      	mov	r0, r5
 8003d88:	f7fc fa3a 	bl	8000200 <memchr>
 8003d8c:	b140      	cbz	r0, 8003da0 <_vfiprintf_r+0x170>
 8003d8e:	2340      	movs	r3, #64	; 0x40
 8003d90:	1b40      	subs	r0, r0, r5
 8003d92:	fa03 f000 	lsl.w	r0, r3, r0
 8003d96:	9b04      	ldr	r3, [sp, #16]
 8003d98:	4303      	orrs	r3, r0
 8003d9a:	f108 0801 	add.w	r8, r8, #1
 8003d9e:	9304      	str	r3, [sp, #16]
 8003da0:	f898 1000 	ldrb.w	r1, [r8]
 8003da4:	482a      	ldr	r0, [pc, #168]	; (8003e50 <_vfiprintf_r+0x220>)
 8003da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003daa:	2206      	movs	r2, #6
 8003dac:	f108 0701 	add.w	r7, r8, #1
 8003db0:	f7fc fa26 	bl	8000200 <memchr>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d037      	beq.n	8003e28 <_vfiprintf_r+0x1f8>
 8003db8:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <_vfiprintf_r+0x224>)
 8003dba:	bb1b      	cbnz	r3, 8003e04 <_vfiprintf_r+0x1d4>
 8003dbc:	9b03      	ldr	r3, [sp, #12]
 8003dbe:	3307      	adds	r3, #7
 8003dc0:	f023 0307 	bic.w	r3, r3, #7
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	9303      	str	r3, [sp, #12]
 8003dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dca:	444b      	add	r3, r9
 8003dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dce:	e750      	b.n	8003c72 <_vfiprintf_r+0x42>
 8003dd0:	fb05 3202 	mla	r2, r5, r2, r3
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	4688      	mov	r8, r1
 8003dd8:	e78a      	b.n	8003cf0 <_vfiprintf_r+0xc0>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f108 0801 	add.w	r8, r8, #1
 8003de0:	9305      	str	r3, [sp, #20]
 8003de2:	4619      	mov	r1, r3
 8003de4:	250a      	movs	r5, #10
 8003de6:	4640      	mov	r0, r8
 8003de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dec:	3a30      	subs	r2, #48	; 0x30
 8003dee:	2a09      	cmp	r2, #9
 8003df0:	d903      	bls.n	8003dfa <_vfiprintf_r+0x1ca>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0c3      	beq.n	8003d7e <_vfiprintf_r+0x14e>
 8003df6:	9105      	str	r1, [sp, #20]
 8003df8:	e7c1      	b.n	8003d7e <_vfiprintf_r+0x14e>
 8003dfa:	fb05 2101 	mla	r1, r5, r1, r2
 8003dfe:	2301      	movs	r3, #1
 8003e00:	4680      	mov	r8, r0
 8003e02:	e7f0      	b.n	8003de6 <_vfiprintf_r+0x1b6>
 8003e04:	ab03      	add	r3, sp, #12
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	4622      	mov	r2, r4
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <_vfiprintf_r+0x228>)
 8003e0c:	a904      	add	r1, sp, #16
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f3af 8000 	nop.w
 8003e14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e18:	4681      	mov	r9, r0
 8003e1a:	d1d5      	bne.n	8003dc8 <_vfiprintf_r+0x198>
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	065b      	lsls	r3, r3, #25
 8003e20:	f53f af7e 	bmi.w	8003d20 <_vfiprintf_r+0xf0>
 8003e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e26:	e77d      	b.n	8003d24 <_vfiprintf_r+0xf4>
 8003e28:	ab03      	add	r3, sp, #12
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <_vfiprintf_r+0x228>)
 8003e30:	a904      	add	r1, sp, #16
 8003e32:	4630      	mov	r0, r6
 8003e34:	f000 f888 	bl	8003f48 <_printf_i>
 8003e38:	e7ec      	b.n	8003e14 <_vfiprintf_r+0x1e4>
 8003e3a:	bf00      	nop
 8003e3c:	08004cd8 	.word	0x08004cd8
 8003e40:	08004d18 	.word	0x08004d18
 8003e44:	08004cf8 	.word	0x08004cf8
 8003e48:	08004cb8 	.word	0x08004cb8
 8003e4c:	08004d1e 	.word	0x08004d1e
 8003e50:	08004d22 	.word	0x08004d22
 8003e54:	00000000 	.word	0x00000000
 8003e58:	08003c0b 	.word	0x08003c0b

08003e5c <_printf_common>:
 8003e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	4691      	mov	r9, r2
 8003e62:	461f      	mov	r7, r3
 8003e64:	688a      	ldr	r2, [r1, #8]
 8003e66:	690b      	ldr	r3, [r1, #16]
 8003e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	bfb8      	it	lt
 8003e70:	4613      	movlt	r3, r2
 8003e72:	f8c9 3000 	str.w	r3, [r9]
 8003e76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	b112      	cbz	r2, 8003e86 <_printf_common+0x2a>
 8003e80:	3301      	adds	r3, #1
 8003e82:	f8c9 3000 	str.w	r3, [r9]
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	0699      	lsls	r1, r3, #26
 8003e8a:	bf42      	ittt	mi
 8003e8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e90:	3302      	addmi	r3, #2
 8003e92:	f8c9 3000 	strmi.w	r3, [r9]
 8003e96:	6825      	ldr	r5, [r4, #0]
 8003e98:	f015 0506 	ands.w	r5, r5, #6
 8003e9c:	d107      	bne.n	8003eae <_printf_common+0x52>
 8003e9e:	f104 0a19 	add.w	sl, r4, #25
 8003ea2:	68e3      	ldr	r3, [r4, #12]
 8003ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	42ab      	cmp	r3, r5
 8003eac:	dc28      	bgt.n	8003f00 <_printf_common+0xa4>
 8003eae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003eb2:	6822      	ldr	r2, [r4, #0]
 8003eb4:	3300      	adds	r3, #0
 8003eb6:	bf18      	it	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	0692      	lsls	r2, r2, #26
 8003ebc:	d42d      	bmi.n	8003f1a <_printf_common+0xbe>
 8003ebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	47c0      	blx	r8
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d020      	beq.n	8003f0e <_printf_common+0xb2>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	68e5      	ldr	r5, [r4, #12]
 8003ed0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ed4:	f003 0306 	and.w	r3, r3, #6
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	bf08      	it	eq
 8003edc:	1aad      	subeq	r5, r5, r2
 8003ede:	68a3      	ldr	r3, [r4, #8]
 8003ee0:	6922      	ldr	r2, [r4, #16]
 8003ee2:	bf0c      	ite	eq
 8003ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ee8:	2500      	movne	r5, #0
 8003eea:	4293      	cmp	r3, r2
 8003eec:	bfc4      	itt	gt
 8003eee:	1a9b      	subgt	r3, r3, r2
 8003ef0:	18ed      	addgt	r5, r5, r3
 8003ef2:	f04f 0900 	mov.w	r9, #0
 8003ef6:	341a      	adds	r4, #26
 8003ef8:	454d      	cmp	r5, r9
 8003efa:	d11a      	bne.n	8003f32 <_printf_common+0xd6>
 8003efc:	2000      	movs	r0, #0
 8003efe:	e008      	b.n	8003f12 <_printf_common+0xb6>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4652      	mov	r2, sl
 8003f04:	4639      	mov	r1, r7
 8003f06:	4630      	mov	r0, r6
 8003f08:	47c0      	blx	r8
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d103      	bne.n	8003f16 <_printf_common+0xba>
 8003f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f16:	3501      	adds	r5, #1
 8003f18:	e7c3      	b.n	8003ea2 <_printf_common+0x46>
 8003f1a:	18e1      	adds	r1, r4, r3
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	2030      	movs	r0, #48	; 0x30
 8003f20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f24:	4422      	add	r2, r4
 8003f26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f2e:	3302      	adds	r3, #2
 8003f30:	e7c5      	b.n	8003ebe <_printf_common+0x62>
 8003f32:	2301      	movs	r3, #1
 8003f34:	4622      	mov	r2, r4
 8003f36:	4639      	mov	r1, r7
 8003f38:	4630      	mov	r0, r6
 8003f3a:	47c0      	blx	r8
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d0e6      	beq.n	8003f0e <_printf_common+0xb2>
 8003f40:	f109 0901 	add.w	r9, r9, #1
 8003f44:	e7d8      	b.n	8003ef8 <_printf_common+0x9c>
	...

08003f48 <_printf_i>:
 8003f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f50:	460c      	mov	r4, r1
 8003f52:	7e09      	ldrb	r1, [r1, #24]
 8003f54:	b085      	sub	sp, #20
 8003f56:	296e      	cmp	r1, #110	; 0x6e
 8003f58:	4617      	mov	r7, r2
 8003f5a:	4606      	mov	r6, r0
 8003f5c:	4698      	mov	r8, r3
 8003f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f60:	f000 80b3 	beq.w	80040ca <_printf_i+0x182>
 8003f64:	d822      	bhi.n	8003fac <_printf_i+0x64>
 8003f66:	2963      	cmp	r1, #99	; 0x63
 8003f68:	d036      	beq.n	8003fd8 <_printf_i+0x90>
 8003f6a:	d80a      	bhi.n	8003f82 <_printf_i+0x3a>
 8003f6c:	2900      	cmp	r1, #0
 8003f6e:	f000 80b9 	beq.w	80040e4 <_printf_i+0x19c>
 8003f72:	2958      	cmp	r1, #88	; 0x58
 8003f74:	f000 8083 	beq.w	800407e <_printf_i+0x136>
 8003f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f80:	e032      	b.n	8003fe8 <_printf_i+0xa0>
 8003f82:	2964      	cmp	r1, #100	; 0x64
 8003f84:	d001      	beq.n	8003f8a <_printf_i+0x42>
 8003f86:	2969      	cmp	r1, #105	; 0x69
 8003f88:	d1f6      	bne.n	8003f78 <_printf_i+0x30>
 8003f8a:	6820      	ldr	r0, [r4, #0]
 8003f8c:	6813      	ldr	r3, [r2, #0]
 8003f8e:	0605      	lsls	r5, r0, #24
 8003f90:	f103 0104 	add.w	r1, r3, #4
 8003f94:	d52a      	bpl.n	8003fec <_printf_i+0xa4>
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6011      	str	r1, [r2, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	da03      	bge.n	8003fa6 <_printf_i+0x5e>
 8003f9e:	222d      	movs	r2, #45	; 0x2d
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003fa6:	486f      	ldr	r0, [pc, #444]	; (8004164 <_printf_i+0x21c>)
 8003fa8:	220a      	movs	r2, #10
 8003faa:	e039      	b.n	8004020 <_printf_i+0xd8>
 8003fac:	2973      	cmp	r1, #115	; 0x73
 8003fae:	f000 809d 	beq.w	80040ec <_printf_i+0x1a4>
 8003fb2:	d808      	bhi.n	8003fc6 <_printf_i+0x7e>
 8003fb4:	296f      	cmp	r1, #111	; 0x6f
 8003fb6:	d020      	beq.n	8003ffa <_printf_i+0xb2>
 8003fb8:	2970      	cmp	r1, #112	; 0x70
 8003fba:	d1dd      	bne.n	8003f78 <_printf_i+0x30>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	f043 0320 	orr.w	r3, r3, #32
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	e003      	b.n	8003fce <_printf_i+0x86>
 8003fc6:	2975      	cmp	r1, #117	; 0x75
 8003fc8:	d017      	beq.n	8003ffa <_printf_i+0xb2>
 8003fca:	2978      	cmp	r1, #120	; 0x78
 8003fcc:	d1d4      	bne.n	8003f78 <_printf_i+0x30>
 8003fce:	2378      	movs	r3, #120	; 0x78
 8003fd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fd4:	4864      	ldr	r0, [pc, #400]	; (8004168 <_printf_i+0x220>)
 8003fd6:	e055      	b.n	8004084 <_printf_i+0x13c>
 8003fd8:	6813      	ldr	r3, [r2, #0]
 8003fda:	1d19      	adds	r1, r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6011      	str	r1, [r2, #0]
 8003fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e08c      	b.n	8004106 <_printf_i+0x1be>
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6011      	str	r1, [r2, #0]
 8003ff0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ff4:	bf18      	it	ne
 8003ff6:	b21b      	sxthne	r3, r3
 8003ff8:	e7cf      	b.n	8003f9a <_printf_i+0x52>
 8003ffa:	6813      	ldr	r3, [r2, #0]
 8003ffc:	6825      	ldr	r5, [r4, #0]
 8003ffe:	1d18      	adds	r0, r3, #4
 8004000:	6010      	str	r0, [r2, #0]
 8004002:	0628      	lsls	r0, r5, #24
 8004004:	d501      	bpl.n	800400a <_printf_i+0xc2>
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	e002      	b.n	8004010 <_printf_i+0xc8>
 800400a:	0668      	lsls	r0, r5, #25
 800400c:	d5fb      	bpl.n	8004006 <_printf_i+0xbe>
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	4854      	ldr	r0, [pc, #336]	; (8004164 <_printf_i+0x21c>)
 8004012:	296f      	cmp	r1, #111	; 0x6f
 8004014:	bf14      	ite	ne
 8004016:	220a      	movne	r2, #10
 8004018:	2208      	moveq	r2, #8
 800401a:	2100      	movs	r1, #0
 800401c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004020:	6865      	ldr	r5, [r4, #4]
 8004022:	60a5      	str	r5, [r4, #8]
 8004024:	2d00      	cmp	r5, #0
 8004026:	f2c0 8095 	blt.w	8004154 <_printf_i+0x20c>
 800402a:	6821      	ldr	r1, [r4, #0]
 800402c:	f021 0104 	bic.w	r1, r1, #4
 8004030:	6021      	str	r1, [r4, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d13d      	bne.n	80040b2 <_printf_i+0x16a>
 8004036:	2d00      	cmp	r5, #0
 8004038:	f040 808e 	bne.w	8004158 <_printf_i+0x210>
 800403c:	4665      	mov	r5, ip
 800403e:	2a08      	cmp	r2, #8
 8004040:	d10b      	bne.n	800405a <_printf_i+0x112>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	07db      	lsls	r3, r3, #31
 8004046:	d508      	bpl.n	800405a <_printf_i+0x112>
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	6862      	ldr	r2, [r4, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	bfde      	ittt	le
 8004050:	2330      	movle	r3, #48	; 0x30
 8004052:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004056:	f105 35ff 	addle.w	r5, r5, #4294967295
 800405a:	ebac 0305 	sub.w	r3, ip, r5
 800405e:	6123      	str	r3, [r4, #16]
 8004060:	f8cd 8000 	str.w	r8, [sp]
 8004064:	463b      	mov	r3, r7
 8004066:	aa03      	add	r2, sp, #12
 8004068:	4621      	mov	r1, r4
 800406a:	4630      	mov	r0, r6
 800406c:	f7ff fef6 	bl	8003e5c <_printf_common>
 8004070:	3001      	adds	r0, #1
 8004072:	d14d      	bne.n	8004110 <_printf_i+0x1c8>
 8004074:	f04f 30ff 	mov.w	r0, #4294967295
 8004078:	b005      	add	sp, #20
 800407a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800407e:	4839      	ldr	r0, [pc, #228]	; (8004164 <_printf_i+0x21c>)
 8004080:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004084:	6813      	ldr	r3, [r2, #0]
 8004086:	6821      	ldr	r1, [r4, #0]
 8004088:	1d1d      	adds	r5, r3, #4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6015      	str	r5, [r2, #0]
 800408e:	060a      	lsls	r2, r1, #24
 8004090:	d50b      	bpl.n	80040aa <_printf_i+0x162>
 8004092:	07ca      	lsls	r2, r1, #31
 8004094:	bf44      	itt	mi
 8004096:	f041 0120 	orrmi.w	r1, r1, #32
 800409a:	6021      	strmi	r1, [r4, #0]
 800409c:	b91b      	cbnz	r3, 80040a6 <_printf_i+0x15e>
 800409e:	6822      	ldr	r2, [r4, #0]
 80040a0:	f022 0220 	bic.w	r2, r2, #32
 80040a4:	6022      	str	r2, [r4, #0]
 80040a6:	2210      	movs	r2, #16
 80040a8:	e7b7      	b.n	800401a <_printf_i+0xd2>
 80040aa:	064d      	lsls	r5, r1, #25
 80040ac:	bf48      	it	mi
 80040ae:	b29b      	uxthmi	r3, r3
 80040b0:	e7ef      	b.n	8004092 <_printf_i+0x14a>
 80040b2:	4665      	mov	r5, ip
 80040b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80040b8:	fb02 3311 	mls	r3, r2, r1, r3
 80040bc:	5cc3      	ldrb	r3, [r0, r3]
 80040be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040c2:	460b      	mov	r3, r1
 80040c4:	2900      	cmp	r1, #0
 80040c6:	d1f5      	bne.n	80040b4 <_printf_i+0x16c>
 80040c8:	e7b9      	b.n	800403e <_printf_i+0xf6>
 80040ca:	6813      	ldr	r3, [r2, #0]
 80040cc:	6825      	ldr	r5, [r4, #0]
 80040ce:	6961      	ldr	r1, [r4, #20]
 80040d0:	1d18      	adds	r0, r3, #4
 80040d2:	6010      	str	r0, [r2, #0]
 80040d4:	0628      	lsls	r0, r5, #24
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	d501      	bpl.n	80040de <_printf_i+0x196>
 80040da:	6019      	str	r1, [r3, #0]
 80040dc:	e002      	b.n	80040e4 <_printf_i+0x19c>
 80040de:	066a      	lsls	r2, r5, #25
 80040e0:	d5fb      	bpl.n	80040da <_printf_i+0x192>
 80040e2:	8019      	strh	r1, [r3, #0]
 80040e4:	2300      	movs	r3, #0
 80040e6:	6123      	str	r3, [r4, #16]
 80040e8:	4665      	mov	r5, ip
 80040ea:	e7b9      	b.n	8004060 <_printf_i+0x118>
 80040ec:	6813      	ldr	r3, [r2, #0]
 80040ee:	1d19      	adds	r1, r3, #4
 80040f0:	6011      	str	r1, [r2, #0]
 80040f2:	681d      	ldr	r5, [r3, #0]
 80040f4:	6862      	ldr	r2, [r4, #4]
 80040f6:	2100      	movs	r1, #0
 80040f8:	4628      	mov	r0, r5
 80040fa:	f7fc f881 	bl	8000200 <memchr>
 80040fe:	b108      	cbz	r0, 8004104 <_printf_i+0x1bc>
 8004100:	1b40      	subs	r0, r0, r5
 8004102:	6060      	str	r0, [r4, #4]
 8004104:	6863      	ldr	r3, [r4, #4]
 8004106:	6123      	str	r3, [r4, #16]
 8004108:	2300      	movs	r3, #0
 800410a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410e:	e7a7      	b.n	8004060 <_printf_i+0x118>
 8004110:	6923      	ldr	r3, [r4, #16]
 8004112:	462a      	mov	r2, r5
 8004114:	4639      	mov	r1, r7
 8004116:	4630      	mov	r0, r6
 8004118:	47c0      	blx	r8
 800411a:	3001      	adds	r0, #1
 800411c:	d0aa      	beq.n	8004074 <_printf_i+0x12c>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	079b      	lsls	r3, r3, #30
 8004122:	d413      	bmi.n	800414c <_printf_i+0x204>
 8004124:	68e0      	ldr	r0, [r4, #12]
 8004126:	9b03      	ldr	r3, [sp, #12]
 8004128:	4298      	cmp	r0, r3
 800412a:	bfb8      	it	lt
 800412c:	4618      	movlt	r0, r3
 800412e:	e7a3      	b.n	8004078 <_printf_i+0x130>
 8004130:	2301      	movs	r3, #1
 8004132:	464a      	mov	r2, r9
 8004134:	4639      	mov	r1, r7
 8004136:	4630      	mov	r0, r6
 8004138:	47c0      	blx	r8
 800413a:	3001      	adds	r0, #1
 800413c:	d09a      	beq.n	8004074 <_printf_i+0x12c>
 800413e:	3501      	adds	r5, #1
 8004140:	68e3      	ldr	r3, [r4, #12]
 8004142:	9a03      	ldr	r2, [sp, #12]
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	42ab      	cmp	r3, r5
 8004148:	dcf2      	bgt.n	8004130 <_printf_i+0x1e8>
 800414a:	e7eb      	b.n	8004124 <_printf_i+0x1dc>
 800414c:	2500      	movs	r5, #0
 800414e:	f104 0919 	add.w	r9, r4, #25
 8004152:	e7f5      	b.n	8004140 <_printf_i+0x1f8>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ac      	bne.n	80040b2 <_printf_i+0x16a>
 8004158:	7803      	ldrb	r3, [r0, #0]
 800415a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800415e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004162:	e76c      	b.n	800403e <_printf_i+0xf6>
 8004164:	08004d29 	.word	0x08004d29
 8004168:	08004d3a 	.word	0x08004d3a

0800416c <_putc_r>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	460d      	mov	r5, r1
 8004170:	4614      	mov	r4, r2
 8004172:	4606      	mov	r6, r0
 8004174:	b118      	cbz	r0, 800417e <_putc_r+0x12>
 8004176:	6983      	ldr	r3, [r0, #24]
 8004178:	b90b      	cbnz	r3, 800417e <_putc_r+0x12>
 800417a:	f7ff fb51 	bl	8003820 <__sinit>
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <_putc_r+0x60>)
 8004180:	429c      	cmp	r4, r3
 8004182:	d112      	bne.n	80041aa <_putc_r+0x3e>
 8004184:	6874      	ldr	r4, [r6, #4]
 8004186:	68a3      	ldr	r3, [r4, #8]
 8004188:	3b01      	subs	r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	da16      	bge.n	80041be <_putc_r+0x52>
 8004190:	69a2      	ldr	r2, [r4, #24]
 8004192:	4293      	cmp	r3, r2
 8004194:	db02      	blt.n	800419c <_putc_r+0x30>
 8004196:	b2eb      	uxtb	r3, r5
 8004198:	2b0a      	cmp	r3, #10
 800419a:	d110      	bne.n	80041be <_putc_r+0x52>
 800419c:	4622      	mov	r2, r4
 800419e:	4629      	mov	r1, r5
 80041a0:	4630      	mov	r0, r6
 80041a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80041a6:	f000 b85b 	b.w	8004260 <__swbuf_r>
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <_putc_r+0x64>)
 80041ac:	429c      	cmp	r4, r3
 80041ae:	d101      	bne.n	80041b4 <_putc_r+0x48>
 80041b0:	68b4      	ldr	r4, [r6, #8]
 80041b2:	e7e8      	b.n	8004186 <_putc_r+0x1a>
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <_putc_r+0x68>)
 80041b6:	429c      	cmp	r4, r3
 80041b8:	bf08      	it	eq
 80041ba:	68f4      	ldreq	r4, [r6, #12]
 80041bc:	e7e3      	b.n	8004186 <_putc_r+0x1a>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	6022      	str	r2, [r4, #0]
 80041c4:	701d      	strb	r5, [r3, #0]
 80041c6:	b2e8      	uxtb	r0, r5
 80041c8:	bd70      	pop	{r4, r5, r6, pc}
 80041ca:	bf00      	nop
 80041cc:	08004cd8 	.word	0x08004cd8
 80041d0:	08004cf8 	.word	0x08004cf8
 80041d4:	08004cb8 	.word	0x08004cb8

080041d8 <__sread>:
 80041d8:	b510      	push	{r4, lr}
 80041da:	460c      	mov	r4, r1
 80041dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e0:	f000 fa86 	bl	80046f0 <_read_r>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	bfab      	itete	ge
 80041e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041ea:	89a3      	ldrhlt	r3, [r4, #12]
 80041ec:	181b      	addge	r3, r3, r0
 80041ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041f2:	bfac      	ite	ge
 80041f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80041f6:	81a3      	strhlt	r3, [r4, #12]
 80041f8:	bd10      	pop	{r4, pc}

080041fa <__swrite>:
 80041fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041fe:	461f      	mov	r7, r3
 8004200:	898b      	ldrh	r3, [r1, #12]
 8004202:	05db      	lsls	r3, r3, #23
 8004204:	4605      	mov	r5, r0
 8004206:	460c      	mov	r4, r1
 8004208:	4616      	mov	r6, r2
 800420a:	d505      	bpl.n	8004218 <__swrite+0x1e>
 800420c:	2302      	movs	r3, #2
 800420e:	2200      	movs	r2, #0
 8004210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004214:	f000 f9b6 	bl	8004584 <_lseek_r>
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800421e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004222:	81a3      	strh	r3, [r4, #12]
 8004224:	4632      	mov	r2, r6
 8004226:	463b      	mov	r3, r7
 8004228:	4628      	mov	r0, r5
 800422a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800422e:	f000 b869 	b.w	8004304 <_write_r>

08004232 <__sseek>:
 8004232:	b510      	push	{r4, lr}
 8004234:	460c      	mov	r4, r1
 8004236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800423a:	f000 f9a3 	bl	8004584 <_lseek_r>
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	bf15      	itete	ne
 8004244:	6560      	strne	r0, [r4, #84]	; 0x54
 8004246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800424a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800424e:	81a3      	strheq	r3, [r4, #12]
 8004250:	bf18      	it	ne
 8004252:	81a3      	strhne	r3, [r4, #12]
 8004254:	bd10      	pop	{r4, pc}

08004256 <__sclose>:
 8004256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800425a:	f000 b8d3 	b.w	8004404 <_close_r>
	...

08004260 <__swbuf_r>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	460e      	mov	r6, r1
 8004264:	4614      	mov	r4, r2
 8004266:	4605      	mov	r5, r0
 8004268:	b118      	cbz	r0, 8004272 <__swbuf_r+0x12>
 800426a:	6983      	ldr	r3, [r0, #24]
 800426c:	b90b      	cbnz	r3, 8004272 <__swbuf_r+0x12>
 800426e:	f7ff fad7 	bl	8003820 <__sinit>
 8004272:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <__swbuf_r+0x98>)
 8004274:	429c      	cmp	r4, r3
 8004276:	d12a      	bne.n	80042ce <__swbuf_r+0x6e>
 8004278:	686c      	ldr	r4, [r5, #4]
 800427a:	69a3      	ldr	r3, [r4, #24]
 800427c:	60a3      	str	r3, [r4, #8]
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	071a      	lsls	r2, r3, #28
 8004282:	d52e      	bpl.n	80042e2 <__swbuf_r+0x82>
 8004284:	6923      	ldr	r3, [r4, #16]
 8004286:	b363      	cbz	r3, 80042e2 <__swbuf_r+0x82>
 8004288:	6923      	ldr	r3, [r4, #16]
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	1ac0      	subs	r0, r0, r3
 800428e:	6963      	ldr	r3, [r4, #20]
 8004290:	b2f6      	uxtb	r6, r6
 8004292:	4283      	cmp	r3, r0
 8004294:	4637      	mov	r7, r6
 8004296:	dc04      	bgt.n	80042a2 <__swbuf_r+0x42>
 8004298:	4621      	mov	r1, r4
 800429a:	4628      	mov	r0, r5
 800429c:	f000 f948 	bl	8004530 <_fflush_r>
 80042a0:	bb28      	cbnz	r0, 80042ee <__swbuf_r+0x8e>
 80042a2:	68a3      	ldr	r3, [r4, #8]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60a3      	str	r3, [r4, #8]
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	6022      	str	r2, [r4, #0]
 80042ae:	701e      	strb	r6, [r3, #0]
 80042b0:	6963      	ldr	r3, [r4, #20]
 80042b2:	3001      	adds	r0, #1
 80042b4:	4283      	cmp	r3, r0
 80042b6:	d004      	beq.n	80042c2 <__swbuf_r+0x62>
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	07db      	lsls	r3, r3, #31
 80042bc:	d519      	bpl.n	80042f2 <__swbuf_r+0x92>
 80042be:	2e0a      	cmp	r6, #10
 80042c0:	d117      	bne.n	80042f2 <__swbuf_r+0x92>
 80042c2:	4621      	mov	r1, r4
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 f933 	bl	8004530 <_fflush_r>
 80042ca:	b190      	cbz	r0, 80042f2 <__swbuf_r+0x92>
 80042cc:	e00f      	b.n	80042ee <__swbuf_r+0x8e>
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <__swbuf_r+0x9c>)
 80042d0:	429c      	cmp	r4, r3
 80042d2:	d101      	bne.n	80042d8 <__swbuf_r+0x78>
 80042d4:	68ac      	ldr	r4, [r5, #8]
 80042d6:	e7d0      	b.n	800427a <__swbuf_r+0x1a>
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <__swbuf_r+0xa0>)
 80042da:	429c      	cmp	r4, r3
 80042dc:	bf08      	it	eq
 80042de:	68ec      	ldreq	r4, [r5, #12]
 80042e0:	e7cb      	b.n	800427a <__swbuf_r+0x1a>
 80042e2:	4621      	mov	r1, r4
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 f81f 	bl	8004328 <__swsetup_r>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d0cc      	beq.n	8004288 <__swbuf_r+0x28>
 80042ee:	f04f 37ff 	mov.w	r7, #4294967295
 80042f2:	4638      	mov	r0, r7
 80042f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f6:	bf00      	nop
 80042f8:	08004cd8 	.word	0x08004cd8
 80042fc:	08004cf8 	.word	0x08004cf8
 8004300:	08004cb8 	.word	0x08004cb8

08004304 <_write_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4c07      	ldr	r4, [pc, #28]	; (8004324 <_write_r+0x20>)
 8004308:	4605      	mov	r5, r0
 800430a:	4608      	mov	r0, r1
 800430c:	4611      	mov	r1, r2
 800430e:	2200      	movs	r2, #0
 8004310:	6022      	str	r2, [r4, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f7fd fb31 	bl	800197a <_write>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d102      	bne.n	8004322 <_write_r+0x1e>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	b103      	cbz	r3, 8004322 <_write_r+0x1e>
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	2000010c 	.word	0x2000010c

08004328 <__swsetup_r>:
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <__swsetup_r+0xcc>)
 800432a:	b570      	push	{r4, r5, r6, lr}
 800432c:	681d      	ldr	r5, [r3, #0]
 800432e:	4606      	mov	r6, r0
 8004330:	460c      	mov	r4, r1
 8004332:	b125      	cbz	r5, 800433e <__swsetup_r+0x16>
 8004334:	69ab      	ldr	r3, [r5, #24]
 8004336:	b913      	cbnz	r3, 800433e <__swsetup_r+0x16>
 8004338:	4628      	mov	r0, r5
 800433a:	f7ff fa71 	bl	8003820 <__sinit>
 800433e:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <__swsetup_r+0xd0>)
 8004340:	429c      	cmp	r4, r3
 8004342:	d10f      	bne.n	8004364 <__swsetup_r+0x3c>
 8004344:	686c      	ldr	r4, [r5, #4]
 8004346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800434a:	b29a      	uxth	r2, r3
 800434c:	0715      	lsls	r5, r2, #28
 800434e:	d42c      	bmi.n	80043aa <__swsetup_r+0x82>
 8004350:	06d0      	lsls	r0, r2, #27
 8004352:	d411      	bmi.n	8004378 <__swsetup_r+0x50>
 8004354:	2209      	movs	r2, #9
 8004356:	6032      	str	r2, [r6, #0]
 8004358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800435c:	81a3      	strh	r3, [r4, #12]
 800435e:	f04f 30ff 	mov.w	r0, #4294967295
 8004362:	e03e      	b.n	80043e2 <__swsetup_r+0xba>
 8004364:	4b25      	ldr	r3, [pc, #148]	; (80043fc <__swsetup_r+0xd4>)
 8004366:	429c      	cmp	r4, r3
 8004368:	d101      	bne.n	800436e <__swsetup_r+0x46>
 800436a:	68ac      	ldr	r4, [r5, #8]
 800436c:	e7eb      	b.n	8004346 <__swsetup_r+0x1e>
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <__swsetup_r+0xd8>)
 8004370:	429c      	cmp	r4, r3
 8004372:	bf08      	it	eq
 8004374:	68ec      	ldreq	r4, [r5, #12]
 8004376:	e7e6      	b.n	8004346 <__swsetup_r+0x1e>
 8004378:	0751      	lsls	r1, r2, #29
 800437a:	d512      	bpl.n	80043a2 <__swsetup_r+0x7a>
 800437c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800437e:	b141      	cbz	r1, 8004392 <__swsetup_r+0x6a>
 8004380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004384:	4299      	cmp	r1, r3
 8004386:	d002      	beq.n	800438e <__swsetup_r+0x66>
 8004388:	4630      	mov	r0, r6
 800438a:	f7ff f905 	bl	8003598 <_free_r>
 800438e:	2300      	movs	r3, #0
 8004390:	6363      	str	r3, [r4, #52]	; 0x34
 8004392:	89a3      	ldrh	r3, [r4, #12]
 8004394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004398:	81a3      	strh	r3, [r4, #12]
 800439a:	2300      	movs	r3, #0
 800439c:	6063      	str	r3, [r4, #4]
 800439e:	6923      	ldr	r3, [r4, #16]
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	f043 0308 	orr.w	r3, r3, #8
 80043a8:	81a3      	strh	r3, [r4, #12]
 80043aa:	6923      	ldr	r3, [r4, #16]
 80043ac:	b94b      	cbnz	r3, 80043c2 <__swsetup_r+0x9a>
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b8:	d003      	beq.n	80043c2 <__swsetup_r+0x9a>
 80043ba:	4621      	mov	r1, r4
 80043bc:	4630      	mov	r0, r6
 80043be:	f000 f917 	bl	80045f0 <__smakebuf_r>
 80043c2:	89a2      	ldrh	r2, [r4, #12]
 80043c4:	f012 0301 	ands.w	r3, r2, #1
 80043c8:	d00c      	beq.n	80043e4 <__swsetup_r+0xbc>
 80043ca:	2300      	movs	r3, #0
 80043cc:	60a3      	str	r3, [r4, #8]
 80043ce:	6963      	ldr	r3, [r4, #20]
 80043d0:	425b      	negs	r3, r3
 80043d2:	61a3      	str	r3, [r4, #24]
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	b953      	cbnz	r3, 80043ee <__swsetup_r+0xc6>
 80043d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80043e0:	d1ba      	bne.n	8004358 <__swsetup_r+0x30>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	0792      	lsls	r2, r2, #30
 80043e6:	bf58      	it	pl
 80043e8:	6963      	ldrpl	r3, [r4, #20]
 80043ea:	60a3      	str	r3, [r4, #8]
 80043ec:	e7f2      	b.n	80043d4 <__swsetup_r+0xac>
 80043ee:	2000      	movs	r0, #0
 80043f0:	e7f7      	b.n	80043e2 <__swsetup_r+0xba>
 80043f2:	bf00      	nop
 80043f4:	2000000c 	.word	0x2000000c
 80043f8:	08004cd8 	.word	0x08004cd8
 80043fc:	08004cf8 	.word	0x08004cf8
 8004400:	08004cb8 	.word	0x08004cb8

08004404 <_close_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4c06      	ldr	r4, [pc, #24]	; (8004420 <_close_r+0x1c>)
 8004408:	2300      	movs	r3, #0
 800440a:	4605      	mov	r5, r0
 800440c:	4608      	mov	r0, r1
 800440e:	6023      	str	r3, [r4, #0]
 8004410:	f7fd facf 	bl	80019b2 <_close>
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	d102      	bne.n	800441e <_close_r+0x1a>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	b103      	cbz	r3, 800441e <_close_r+0x1a>
 800441c:	602b      	str	r3, [r5, #0]
 800441e:	bd38      	pop	{r3, r4, r5, pc}
 8004420:	2000010c 	.word	0x2000010c

08004424 <__sflush_r>:
 8004424:	898a      	ldrh	r2, [r1, #12]
 8004426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800442a:	4605      	mov	r5, r0
 800442c:	0710      	lsls	r0, r2, #28
 800442e:	460c      	mov	r4, r1
 8004430:	d458      	bmi.n	80044e4 <__sflush_r+0xc0>
 8004432:	684b      	ldr	r3, [r1, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	dc05      	bgt.n	8004444 <__sflush_r+0x20>
 8004438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	dc02      	bgt.n	8004444 <__sflush_r+0x20>
 800443e:	2000      	movs	r0, #0
 8004440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004446:	2e00      	cmp	r6, #0
 8004448:	d0f9      	beq.n	800443e <__sflush_r+0x1a>
 800444a:	2300      	movs	r3, #0
 800444c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004450:	682f      	ldr	r7, [r5, #0]
 8004452:	6a21      	ldr	r1, [r4, #32]
 8004454:	602b      	str	r3, [r5, #0]
 8004456:	d032      	beq.n	80044be <__sflush_r+0x9a>
 8004458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	075a      	lsls	r2, r3, #29
 800445e:	d505      	bpl.n	800446c <__sflush_r+0x48>
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	1ac0      	subs	r0, r0, r3
 8004464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004466:	b10b      	cbz	r3, 800446c <__sflush_r+0x48>
 8004468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800446a:	1ac0      	subs	r0, r0, r3
 800446c:	2300      	movs	r3, #0
 800446e:	4602      	mov	r2, r0
 8004470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004472:	6a21      	ldr	r1, [r4, #32]
 8004474:	4628      	mov	r0, r5
 8004476:	47b0      	blx	r6
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	89a3      	ldrh	r3, [r4, #12]
 800447c:	d106      	bne.n	800448c <__sflush_r+0x68>
 800447e:	6829      	ldr	r1, [r5, #0]
 8004480:	291d      	cmp	r1, #29
 8004482:	d848      	bhi.n	8004516 <__sflush_r+0xf2>
 8004484:	4a29      	ldr	r2, [pc, #164]	; (800452c <__sflush_r+0x108>)
 8004486:	40ca      	lsrs	r2, r1
 8004488:	07d6      	lsls	r6, r2, #31
 800448a:	d544      	bpl.n	8004516 <__sflush_r+0xf2>
 800448c:	2200      	movs	r2, #0
 800448e:	6062      	str	r2, [r4, #4]
 8004490:	04d9      	lsls	r1, r3, #19
 8004492:	6922      	ldr	r2, [r4, #16]
 8004494:	6022      	str	r2, [r4, #0]
 8004496:	d504      	bpl.n	80044a2 <__sflush_r+0x7e>
 8004498:	1c42      	adds	r2, r0, #1
 800449a:	d101      	bne.n	80044a0 <__sflush_r+0x7c>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b903      	cbnz	r3, 80044a2 <__sflush_r+0x7e>
 80044a0:	6560      	str	r0, [r4, #84]	; 0x54
 80044a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a4:	602f      	str	r7, [r5, #0]
 80044a6:	2900      	cmp	r1, #0
 80044a8:	d0c9      	beq.n	800443e <__sflush_r+0x1a>
 80044aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044ae:	4299      	cmp	r1, r3
 80044b0:	d002      	beq.n	80044b8 <__sflush_r+0x94>
 80044b2:	4628      	mov	r0, r5
 80044b4:	f7ff f870 	bl	8003598 <_free_r>
 80044b8:	2000      	movs	r0, #0
 80044ba:	6360      	str	r0, [r4, #52]	; 0x34
 80044bc:	e7c0      	b.n	8004440 <__sflush_r+0x1c>
 80044be:	2301      	movs	r3, #1
 80044c0:	4628      	mov	r0, r5
 80044c2:	47b0      	blx	r6
 80044c4:	1c41      	adds	r1, r0, #1
 80044c6:	d1c8      	bne.n	800445a <__sflush_r+0x36>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0c5      	beq.n	800445a <__sflush_r+0x36>
 80044ce:	2b1d      	cmp	r3, #29
 80044d0:	d001      	beq.n	80044d6 <__sflush_r+0xb2>
 80044d2:	2b16      	cmp	r3, #22
 80044d4:	d101      	bne.n	80044da <__sflush_r+0xb6>
 80044d6:	602f      	str	r7, [r5, #0]
 80044d8:	e7b1      	b.n	800443e <__sflush_r+0x1a>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e0:	81a3      	strh	r3, [r4, #12]
 80044e2:	e7ad      	b.n	8004440 <__sflush_r+0x1c>
 80044e4:	690f      	ldr	r7, [r1, #16]
 80044e6:	2f00      	cmp	r7, #0
 80044e8:	d0a9      	beq.n	800443e <__sflush_r+0x1a>
 80044ea:	0793      	lsls	r3, r2, #30
 80044ec:	680e      	ldr	r6, [r1, #0]
 80044ee:	bf08      	it	eq
 80044f0:	694b      	ldreq	r3, [r1, #20]
 80044f2:	600f      	str	r7, [r1, #0]
 80044f4:	bf18      	it	ne
 80044f6:	2300      	movne	r3, #0
 80044f8:	eba6 0807 	sub.w	r8, r6, r7
 80044fc:	608b      	str	r3, [r1, #8]
 80044fe:	f1b8 0f00 	cmp.w	r8, #0
 8004502:	dd9c      	ble.n	800443e <__sflush_r+0x1a>
 8004504:	4643      	mov	r3, r8
 8004506:	463a      	mov	r2, r7
 8004508:	6a21      	ldr	r1, [r4, #32]
 800450a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800450c:	4628      	mov	r0, r5
 800450e:	47b0      	blx	r6
 8004510:	2800      	cmp	r0, #0
 8004512:	dc06      	bgt.n	8004522 <__sflush_r+0xfe>
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451a:	81a3      	strh	r3, [r4, #12]
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	e78e      	b.n	8004440 <__sflush_r+0x1c>
 8004522:	4407      	add	r7, r0
 8004524:	eba8 0800 	sub.w	r8, r8, r0
 8004528:	e7e9      	b.n	80044fe <__sflush_r+0xda>
 800452a:	bf00      	nop
 800452c:	20400001 	.word	0x20400001

08004530 <_fflush_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	690b      	ldr	r3, [r1, #16]
 8004534:	4605      	mov	r5, r0
 8004536:	460c      	mov	r4, r1
 8004538:	b1db      	cbz	r3, 8004572 <_fflush_r+0x42>
 800453a:	b118      	cbz	r0, 8004544 <_fflush_r+0x14>
 800453c:	6983      	ldr	r3, [r0, #24]
 800453e:	b90b      	cbnz	r3, 8004544 <_fflush_r+0x14>
 8004540:	f7ff f96e 	bl	8003820 <__sinit>
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <_fflush_r+0x48>)
 8004546:	429c      	cmp	r4, r3
 8004548:	d109      	bne.n	800455e <_fflush_r+0x2e>
 800454a:	686c      	ldr	r4, [r5, #4]
 800454c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004550:	b17b      	cbz	r3, 8004572 <_fflush_r+0x42>
 8004552:	4621      	mov	r1, r4
 8004554:	4628      	mov	r0, r5
 8004556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800455a:	f7ff bf63 	b.w	8004424 <__sflush_r>
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <_fflush_r+0x4c>)
 8004560:	429c      	cmp	r4, r3
 8004562:	d101      	bne.n	8004568 <_fflush_r+0x38>
 8004564:	68ac      	ldr	r4, [r5, #8]
 8004566:	e7f1      	b.n	800454c <_fflush_r+0x1c>
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <_fflush_r+0x50>)
 800456a:	429c      	cmp	r4, r3
 800456c:	bf08      	it	eq
 800456e:	68ec      	ldreq	r4, [r5, #12]
 8004570:	e7ec      	b.n	800454c <_fflush_r+0x1c>
 8004572:	2000      	movs	r0, #0
 8004574:	bd38      	pop	{r3, r4, r5, pc}
 8004576:	bf00      	nop
 8004578:	08004cd8 	.word	0x08004cd8
 800457c:	08004cf8 	.word	0x08004cf8
 8004580:	08004cb8 	.word	0x08004cb8

08004584 <_lseek_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4c07      	ldr	r4, [pc, #28]	; (80045a4 <_lseek_r+0x20>)
 8004588:	4605      	mov	r5, r0
 800458a:	4608      	mov	r0, r1
 800458c:	4611      	mov	r1, r2
 800458e:	2200      	movs	r2, #0
 8004590:	6022      	str	r2, [r4, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	f7fd fa34 	bl	8001a00 <_lseek>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d102      	bne.n	80045a2 <_lseek_r+0x1e>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	b103      	cbz	r3, 80045a2 <_lseek_r+0x1e>
 80045a0:	602b      	str	r3, [r5, #0]
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	2000010c 	.word	0x2000010c

080045a8 <__swhatbuf_r>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	460e      	mov	r6, r1
 80045ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b0:	2900      	cmp	r1, #0
 80045b2:	b096      	sub	sp, #88	; 0x58
 80045b4:	4614      	mov	r4, r2
 80045b6:	461d      	mov	r5, r3
 80045b8:	da07      	bge.n	80045ca <__swhatbuf_r+0x22>
 80045ba:	2300      	movs	r3, #0
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	89b3      	ldrh	r3, [r6, #12]
 80045c0:	061a      	lsls	r2, r3, #24
 80045c2:	d410      	bmi.n	80045e6 <__swhatbuf_r+0x3e>
 80045c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c8:	e00e      	b.n	80045e8 <__swhatbuf_r+0x40>
 80045ca:	466a      	mov	r2, sp
 80045cc:	f000 f8a2 	bl	8004714 <_fstat_r>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	dbf2      	blt.n	80045ba <__swhatbuf_r+0x12>
 80045d4:	9a01      	ldr	r2, [sp, #4]
 80045d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045de:	425a      	negs	r2, r3
 80045e0:	415a      	adcs	r2, r3
 80045e2:	602a      	str	r2, [r5, #0]
 80045e4:	e7ee      	b.n	80045c4 <__swhatbuf_r+0x1c>
 80045e6:	2340      	movs	r3, #64	; 0x40
 80045e8:	2000      	movs	r0, #0
 80045ea:	6023      	str	r3, [r4, #0]
 80045ec:	b016      	add	sp, #88	; 0x58
 80045ee:	bd70      	pop	{r4, r5, r6, pc}

080045f0 <__smakebuf_r>:
 80045f0:	898b      	ldrh	r3, [r1, #12]
 80045f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045f4:	079d      	lsls	r5, r3, #30
 80045f6:	4606      	mov	r6, r0
 80045f8:	460c      	mov	r4, r1
 80045fa:	d507      	bpl.n	800460c <__smakebuf_r+0x1c>
 80045fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	6123      	str	r3, [r4, #16]
 8004604:	2301      	movs	r3, #1
 8004606:	6163      	str	r3, [r4, #20]
 8004608:	b002      	add	sp, #8
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	ab01      	add	r3, sp, #4
 800460e:	466a      	mov	r2, sp
 8004610:	f7ff ffca 	bl	80045a8 <__swhatbuf_r>
 8004614:	9900      	ldr	r1, [sp, #0]
 8004616:	4605      	mov	r5, r0
 8004618:	4630      	mov	r0, r6
 800461a:	f7ff f80b 	bl	8003634 <_malloc_r>
 800461e:	b948      	cbnz	r0, 8004634 <__smakebuf_r+0x44>
 8004620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004624:	059a      	lsls	r2, r3, #22
 8004626:	d4ef      	bmi.n	8004608 <__smakebuf_r+0x18>
 8004628:	f023 0303 	bic.w	r3, r3, #3
 800462c:	f043 0302 	orr.w	r3, r3, #2
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	e7e3      	b.n	80045fc <__smakebuf_r+0xc>
 8004634:	4b0d      	ldr	r3, [pc, #52]	; (800466c <__smakebuf_r+0x7c>)
 8004636:	62b3      	str	r3, [r6, #40]	; 0x28
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	6020      	str	r0, [r4, #0]
 800463c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004640:	81a3      	strh	r3, [r4, #12]
 8004642:	9b00      	ldr	r3, [sp, #0]
 8004644:	6163      	str	r3, [r4, #20]
 8004646:	9b01      	ldr	r3, [sp, #4]
 8004648:	6120      	str	r0, [r4, #16]
 800464a:	b15b      	cbz	r3, 8004664 <__smakebuf_r+0x74>
 800464c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004650:	4630      	mov	r0, r6
 8004652:	f000 f871 	bl	8004738 <_isatty_r>
 8004656:	b128      	cbz	r0, 8004664 <__smakebuf_r+0x74>
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	81a3      	strh	r3, [r4, #12]
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	431d      	orrs	r5, r3
 8004668:	81a5      	strh	r5, [r4, #12]
 800466a:	e7cd      	b.n	8004608 <__smakebuf_r+0x18>
 800466c:	080037e9 	.word	0x080037e9

08004670 <memmove>:
 8004670:	4288      	cmp	r0, r1
 8004672:	b510      	push	{r4, lr}
 8004674:	eb01 0302 	add.w	r3, r1, r2
 8004678:	d807      	bhi.n	800468a <memmove+0x1a>
 800467a:	1e42      	subs	r2, r0, #1
 800467c:	4299      	cmp	r1, r3
 800467e:	d00a      	beq.n	8004696 <memmove+0x26>
 8004680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004684:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004688:	e7f8      	b.n	800467c <memmove+0xc>
 800468a:	4283      	cmp	r3, r0
 800468c:	d9f5      	bls.n	800467a <memmove+0xa>
 800468e:	1881      	adds	r1, r0, r2
 8004690:	1ad2      	subs	r2, r2, r3
 8004692:	42d3      	cmn	r3, r2
 8004694:	d100      	bne.n	8004698 <memmove+0x28>
 8004696:	bd10      	pop	{r4, pc}
 8004698:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800469c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80046a0:	e7f7      	b.n	8004692 <memmove+0x22>

080046a2 <_realloc_r>:
 80046a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a4:	4607      	mov	r7, r0
 80046a6:	4614      	mov	r4, r2
 80046a8:	460e      	mov	r6, r1
 80046aa:	b921      	cbnz	r1, 80046b6 <_realloc_r+0x14>
 80046ac:	4611      	mov	r1, r2
 80046ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046b2:	f7fe bfbf 	b.w	8003634 <_malloc_r>
 80046b6:	b922      	cbnz	r2, 80046c2 <_realloc_r+0x20>
 80046b8:	f7fe ff6e 	bl	8003598 <_free_r>
 80046bc:	4625      	mov	r5, r4
 80046be:	4628      	mov	r0, r5
 80046c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046c2:	f000 f849 	bl	8004758 <_malloc_usable_size_r>
 80046c6:	42a0      	cmp	r0, r4
 80046c8:	d20f      	bcs.n	80046ea <_realloc_r+0x48>
 80046ca:	4621      	mov	r1, r4
 80046cc:	4638      	mov	r0, r7
 80046ce:	f7fe ffb1 	bl	8003634 <_malloc_r>
 80046d2:	4605      	mov	r5, r0
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d0f2      	beq.n	80046be <_realloc_r+0x1c>
 80046d8:	4631      	mov	r1, r6
 80046da:	4622      	mov	r2, r4
 80046dc:	f7fe ff3a 	bl	8003554 <memcpy>
 80046e0:	4631      	mov	r1, r6
 80046e2:	4638      	mov	r0, r7
 80046e4:	f7fe ff58 	bl	8003598 <_free_r>
 80046e8:	e7e9      	b.n	80046be <_realloc_r+0x1c>
 80046ea:	4635      	mov	r5, r6
 80046ec:	e7e7      	b.n	80046be <_realloc_r+0x1c>
	...

080046f0 <_read_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4c07      	ldr	r4, [pc, #28]	; (8004710 <_read_r+0x20>)
 80046f4:	4605      	mov	r5, r0
 80046f6:	4608      	mov	r0, r1
 80046f8:	4611      	mov	r1, r2
 80046fa:	2200      	movs	r2, #0
 80046fc:	6022      	str	r2, [r4, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	f7fd f91e 	bl	8001940 <_read>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d102      	bne.n	800470e <_read_r+0x1e>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	b103      	cbz	r3, 800470e <_read_r+0x1e>
 800470c:	602b      	str	r3, [r5, #0]
 800470e:	bd38      	pop	{r3, r4, r5, pc}
 8004710:	2000010c 	.word	0x2000010c

08004714 <_fstat_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	4c07      	ldr	r4, [pc, #28]	; (8004734 <_fstat_r+0x20>)
 8004718:	2300      	movs	r3, #0
 800471a:	4605      	mov	r5, r0
 800471c:	4608      	mov	r0, r1
 800471e:	4611      	mov	r1, r2
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	f7fd f952 	bl	80019ca <_fstat>
 8004726:	1c43      	adds	r3, r0, #1
 8004728:	d102      	bne.n	8004730 <_fstat_r+0x1c>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	b103      	cbz	r3, 8004730 <_fstat_r+0x1c>
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	bd38      	pop	{r3, r4, r5, pc}
 8004732:	bf00      	nop
 8004734:	2000010c 	.word	0x2000010c

08004738 <_isatty_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4c06      	ldr	r4, [pc, #24]	; (8004754 <_isatty_r+0x1c>)
 800473c:	2300      	movs	r3, #0
 800473e:	4605      	mov	r5, r0
 8004740:	4608      	mov	r0, r1
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	f7fd f951 	bl	80019ea <_isatty>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	d102      	bne.n	8004752 <_isatty_r+0x1a>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	b103      	cbz	r3, 8004752 <_isatty_r+0x1a>
 8004750:	602b      	str	r3, [r5, #0]
 8004752:	bd38      	pop	{r3, r4, r5, pc}
 8004754:	2000010c 	.word	0x2000010c

08004758 <_malloc_usable_size_r>:
 8004758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475c:	1f18      	subs	r0, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	bfbc      	itt	lt
 8004762:	580b      	ldrlt	r3, [r1, r0]
 8004764:	18c0      	addlt	r0, r0, r3
 8004766:	4770      	bx	lr

08004768 <_init>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr

08004774 <_fini>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr

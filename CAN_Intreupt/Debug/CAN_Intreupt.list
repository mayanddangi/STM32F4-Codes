
CAN_Intreupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c0  080030c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030c0  080030c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c0  080030c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000070  08003138  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003138  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006922  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014ce  00000000  00000000  000269ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005a0  00000000  00000000  00027e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004e8  00000000  00000000  00028428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000188a5  00000000  00000000  00028910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005844  00000000  00000000  000411b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087b91  00000000  00000000  000469f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce58a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f4  00000000  00000000  000ce608  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ff8 	.word	0x08002ff8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002ff8 	.word	0x08002ff8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb67 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f81d 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8a1 	bl	8000374 <MX_GPIO_Init>
  MX_CAN_Init();
 8000232:	f000 f867 	bl	8000304 <MX_CAN_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000236:	f000 f857 	bl	80002e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CANStart();
 800023a:	f000 f8e5 	bl	8000408 <CANStart>
	  //CANTransmit((uint32_t)0x01, 0, 0, 5, DATA);

	 //CANReceive();
	 //HAL_Delay(100);
	 //HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_12);
	uint8_t DATA1[] = {5,4,3,2,1,12,5,4};
 800023e:	003b      	movs	r3, r7
 8000240:	4a08      	ldr	r2, [pc, #32]	; (8000264 <main+0x44>)
 8000242:	ca03      	ldmia	r2!, {r0, r1}
 8000244:	c303      	stmia	r3!, {r0, r1}
	 CANTransmit((uint32_t)0x02, 0, 0, 8, DATA1);
 8000246:	003b      	movs	r3, r7
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2308      	movs	r3, #8
 800024c:	2200      	movs	r2, #0
 800024e:	2100      	movs	r1, #0
 8000250:	2002      	movs	r0, #2
 8000252:	f000 f915 	bl	8000480 <CANTransmit>
	 HAL_Delay(500);
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fbb0 	bl	80009c0 <HAL_Delay>
  {
 8000260:	e7ed      	b.n	800023e <main+0x1e>
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	08003010 	.word	0x08003010

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b093      	sub	sp, #76	; 0x4c
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	2414      	movs	r4, #20
 8000270:	193b      	adds	r3, r7, r4
 8000272:	0018      	movs	r0, r3
 8000274:	2334      	movs	r3, #52	; 0x34
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f002 fa0d 	bl	8002698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	0018      	movs	r0, r3
 8000282:	2310      	movs	r3, #16
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f002 fa06 	bl	8002698 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	0021      	movs	r1, r4
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2202      	movs	r2, #2
 8000292:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2201      	movs	r2, #1
 8000298:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2210      	movs	r2, #16
 800029e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2200      	movs	r2, #0
 80002a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 fced 	bl	8001c88 <HAL_RCC_OscConfig>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002b2:	f000 f99f 	bl	80005f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2207      	movs	r2, #7
 80002ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2100      	movs	r1, #0
 80002d2:	0018      	movs	r0, r3
 80002d4:	f002 f85e 	bl	8002394 <HAL_RCC_ClockConfig>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002dc:	f000 f98a 	bl	80005f4 <Error_Handler>
  }
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b013      	add	sp, #76	; 0x4c
 80002e6:	bd90      	pop	{r4, r7, pc}

080002e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* CEC_CAN_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2100      	movs	r1, #0
 80002f0:	201e      	movs	r0, #30
 80002f2:	f001 faf7 	bl	80018e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80002f6:	201e      	movs	r0, #30
 80002f8:	f001 fb09 	bl	800190e <HAL_NVIC_EnableIRQ>
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <MX_CAN_Init+0x68>)
 800030a:	4a19      	ldr	r2, [pc, #100]	; (8000370 <MX_CAN_Init+0x6c>)
 800030c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <MX_CAN_Init+0x68>)
 8000310:	2204      	movs	r2, #4
 8000312:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000314:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_CAN_Init+0x68>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <MX_CAN_Init+0x68>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000320:	4b12      	ldr	r3, [pc, #72]	; (800036c <MX_CAN_Init+0x68>)
 8000322:	22e0      	movs	r2, #224	; 0xe0
 8000324:	0312      	lsls	r2, r2, #12
 8000326:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <MX_CAN_Init+0x68>)
 800032a:	22c0      	movs	r2, #192	; 0xc0
 800032c:	0392      	lsls	r2, r2, #14
 800032e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <MX_CAN_Init+0x68>)
 8000332:	2200      	movs	r2, #0
 8000334:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <MX_CAN_Init+0x68>)
 8000338:	2200      	movs	r2, #0
 800033a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <MX_CAN_Init+0x68>)
 800033e:	2201      	movs	r2, #1
 8000340:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <MX_CAN_Init+0x68>)
 8000344:	2200      	movs	r2, #0
 8000346:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_CAN_Init+0x68>)
 800034a:	2200      	movs	r2, #0
 800034c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800034e:	4b07      	ldr	r3, [pc, #28]	; (800036c <MX_CAN_Init+0x68>)
 8000350:	2200      	movs	r2, #0
 8000352:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <MX_CAN_Init+0x68>)
 8000356:	0018      	movs	r0, r3
 8000358:	f000 fb54 	bl	8000a04 <HAL_CAN_Init>
 800035c:	1e03      	subs	r3, r0, #0
 800035e:	d001      	beq.n	8000364 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000360:	f000 f948 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000364:	46c0      	nop			; (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	200000a4 	.word	0x200000a4
 8000370:	40006400 	.word	0x40006400

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b089      	sub	sp, #36	; 0x24
 8000378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	240c      	movs	r4, #12
 800037c:	193b      	adds	r3, r7, r4
 800037e:	0018      	movs	r0, r3
 8000380:	2314      	movs	r3, #20
 8000382:	001a      	movs	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	f002 f987 	bl	8002698 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <MX_GPIO_Init+0x8c>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <MX_GPIO_Init+0x8c>)
 8000390:	2180      	movs	r1, #128	; 0x80
 8000392:	02c9      	lsls	r1, r1, #11
 8000394:	430a      	orrs	r2, r1
 8000396:	615a      	str	r2, [r3, #20]
 8000398:	4b19      	ldr	r3, [pc, #100]	; (8000400 <MX_GPIO_Init+0x8c>)
 800039a:	695a      	ldr	r2, [r3, #20]
 800039c:	2380      	movs	r3, #128	; 0x80
 800039e:	02db      	lsls	r3, r3, #11
 80003a0:	4013      	ands	r3, r2
 80003a2:	60bb      	str	r3, [r7, #8]
 80003a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b16      	ldr	r3, [pc, #88]	; (8000400 <MX_GPIO_Init+0x8c>)
 80003a8:	695a      	ldr	r2, [r3, #20]
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_GPIO_Init+0x8c>)
 80003ac:	2180      	movs	r1, #128	; 0x80
 80003ae:	0289      	lsls	r1, r1, #10
 80003b0:	430a      	orrs	r2, r1
 80003b2:	615a      	str	r2, [r3, #20]
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_GPIO_Init+0x8c>)
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	029b      	lsls	r3, r3, #10
 80003bc:	4013      	ands	r3, r2
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80003c2:	23e0      	movs	r3, #224	; 0xe0
 80003c4:	01db      	lsls	r3, r3, #7
 80003c6:	480f      	ldr	r0, [pc, #60]	; (8000404 <MX_GPIO_Init+0x90>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	0019      	movs	r1, r3
 80003cc:	f001 fc24 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	22e0      	movs	r2, #224	; 0xe0
 80003d4:	01d2      	lsls	r2, r2, #7
 80003d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2201      	movs	r2, #1
 80003dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	193b      	adds	r3, r7, r4
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ea:	193b      	adds	r3, r7, r4
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <MX_GPIO_Init+0x90>)
 80003ee:	0019      	movs	r1, r3
 80003f0:	0010      	movs	r0, r2
 80003f2:	f001 faa9 	bl	8001948 <HAL_GPIO_Init>

}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b009      	add	sp, #36	; 0x24
 80003fc:	bd90      	pop	{r4, r7, pc}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	40021000 	.word	0x40021000
 8000404:	48000400 	.word	0x48000400

08000408 <CANStart>:

/* USER CODE BEGIN 4 */
void CANStart()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef filter;
  filter.FilterActivation = ENABLE;
 800040e:	003b      	movs	r3, r7
 8000410:	2201      	movs	r2, #1
 8000412:	621a      	str	r2, [r3, #32]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000414:	003b      	movs	r3, r7
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]

  // Allow two IDs per entry
  filter.FilterScale = CAN_FILTERSCALE_16BIT;
 800041a:	003b      	movs	r3, r7
 800041c:	2200      	movs	r2, #0
 800041e:	61da      	str	r2, [r3, #28]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000420:	003b      	movs	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]

  filter.FilterMaskIdHigh = 0x0000;
 8000426:	003b      	movs	r3, r7
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow  = 0x0000;
 800042c:	003b      	movs	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]

  filter.FilterIdLow  = 0x0000;
 8000432:	003b      	movs	r3, r7
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  filter.FilterIdHigh = 0x0000;
 8000438:	003b      	movs	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]

  filter.FilterBank = 0;
 800043e:	003b      	movs	r3, r7
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]

  if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {
 8000444:	003a      	movs	r2, r7
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <CANStart+0x74>)
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f000 fbd8 	bl	8000c00 <HAL_CAN_ConfigFilter>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <CANStart+0x50>
	  Error_Handler();
 8000454:	f000 f8ce 	bl	80005f4 <Error_Handler>
  }

 HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <CANStart+0x74>)
 800045a:	210e      	movs	r1, #14
 800045c:	0018      	movs	r0, r3
 800045e:	f000 ff61 	bl	8001324 <HAL_CAN_ActivateNotification>

  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <CANStart+0x74>)
 8000464:	0018      	movs	r0, r3
 8000466:	f000 fcbd 	bl	8000de4 <HAL_CAN_Start>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <CANStart+0x6a>
	  Error_Handler();
 800046e:	f000 f8c1 	bl	80005f4 <Error_Handler>
  }
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b00a      	add	sp, #40	; 0x28
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	200000a4 	.word	0x200000a4

08000480 <CANTransmit>:

void CANTransmit(uint32_t id,uint32_t IDE,uint32_t RTR,uint32_t DLC,uint8_t *data)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08c      	sub	sp, #48	; 0x30
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
 800048c:	603b      	str	r3, [r7, #0]
  uint32_t mailbox= 0x00U;
 800048e:	2300      	movs	r3, #0
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
  CAN_TxHeaderTypeDef Header;
  Header.StdId= id;
 8000492:	2114      	movs	r1, #20
 8000494:	187b      	adds	r3, r7, r1
 8000496:	68fa      	ldr	r2, [r7, #12]
 8000498:	601a      	str	r2, [r3, #0]
  Header.IDE= IDE;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	609a      	str	r2, [r3, #8]
  Header.RTR= RTR;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	60da      	str	r2, [r3, #12]
  Header.DLC= DLC;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	611a      	str	r2, [r3, #16]

  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan)>0) {
 80004ac:	4b24      	ldr	r3, [pc, #144]	; (8000540 <CANTransmit+0xc0>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 fdbd 	bl	800102e <HAL_CAN_GetTxMailboxesFreeLevel>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d037      	beq.n	8000528 <CANTransmit+0xa8>
	  if(HAL_CAN_AddTxMessage(&hcan, &Header, data , &mailbox)==HAL_OK){
 80004b8:	232c      	movs	r3, #44	; 0x2c
 80004ba:	18fb      	adds	r3, r7, r3
 80004bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80004be:	2114      	movs	r1, #20
 80004c0:	1879      	adds	r1, r7, r1
 80004c2:	481f      	ldr	r0, [pc, #124]	; (8000540 <CANTransmit+0xc0>)
 80004c4:	f000 fcd4 	bl	8000e70 <HAL_CAN_AddTxMessage>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d128      	bne.n	800051e <CANTransmit+0x9e>
		  printf("HALOK\n");
 80004cc:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <CANTransmit+0xc4>)
 80004ce:	0018      	movs	r0, r3
 80004d0:	f002 f94a 	bl	8002768 <puts>

		  while(HAL_CAN_IsTxMessagePending(&hcan,mailbox));
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <CANTransmit+0xc0>)
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fdde 	bl	800109e <HAL_CAN_IsTxMessagePending>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d1f7      	bne.n	80004d6 <CANTransmit+0x56>
		if(hcan.Instance->TSR & CAN_TSR_TXOK0) {
 80004e6:	4b16      	ldr	r3, [pc, #88]	; (8000540 <CANTransmit+0xc0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2202      	movs	r2, #2
 80004ee:	4013      	ands	r3, r2
 80004f0:	d007      	beq.n	8000502 <CANTransmit+0x82>
			HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	019b      	lsls	r3, r3, #6
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <CANTransmit+0xc8>)
 80004f8:	0019      	movs	r1, r3
 80004fa:	0010      	movs	r0, r2
 80004fc:	f001 fba9 	bl	8001c52 <HAL_GPIO_TogglePin>
		  printf("HALERROR\n");
	  }
  }
  else
  	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_12);
}
 8000500:	e019      	b.n	8000536 <CANTransmit+0xb6>
		  else if(hcan.Instance->TSR & CAN_TSR_ALST0) {
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <CANTransmit+0xc0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	2204      	movs	r2, #4
 800050a:	4013      	ands	r3, r2
 800050c:	d013      	beq.n	8000536 <CANTransmit+0xb6>
			  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	01db      	lsls	r3, r3, #7
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <CANTransmit+0xc8>)
 8000514:	0019      	movs	r1, r3
 8000516:	0010      	movs	r0, r2
 8000518:	f001 fb9b 	bl	8001c52 <HAL_GPIO_TogglePin>
}
 800051c:	e00b      	b.n	8000536 <CANTransmit+0xb6>
		  printf("HALERROR\n");
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <CANTransmit+0xcc>)
 8000520:	0018      	movs	r0, r3
 8000522:	f002 f921 	bl	8002768 <puts>
}
 8000526:	e006      	b.n	8000536 <CANTransmit+0xb6>
  	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_12);
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	015b      	lsls	r3, r3, #5
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <CANTransmit+0xc8>)
 800052e:	0019      	movs	r1, r3
 8000530:	0010      	movs	r0, r2
 8000532:	f001 fb8e 	bl	8001c52 <HAL_GPIO_TogglePin>
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b00c      	add	sp, #48	; 0x30
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	200000a4 	.word	0x200000a4
 8000544:	08003018 	.word	0x08003018
 8000548:	48000400 	.word	0x48000400
 800054c:	08003020 	.word	0x08003020

08000550 <HAL_CAN_RxFifo0MsgPendingCallback>:
	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
   }

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef Header;
  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Header, DATA)==HAL_OK) {
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800055a:	220c      	movs	r2, #12
 800055c:	18ba      	adds	r2, r7, r2
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	2100      	movs	r1, #0
 8000562:	f000 fdc3 	bl	80010ec <HAL_CAN_GetRxMessage>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d10c      	bne.n	8000584 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	  id = Header.StdId;
 800056a:	230c      	movs	r3, #12
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000572:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_12);
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	015b      	lsls	r3, r3, #5
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800057a:	0019      	movs	r1, r3
 800057c:	0010      	movs	r0, r2
 800057e:	f001 fb68 	bl	8001c52 <HAL_GPIO_TogglePin>
  }
  else {
	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
  }
}
 8000582:	e006      	b.n	8000592 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	019b      	lsls	r3, r3, #6
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800058a:	0019      	movs	r1, r3
 800058c:	0010      	movs	r0, r2
 800058e:	f001 fb60 	bl	8001c52 <HAL_GPIO_TogglePin>
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b00a      	add	sp, #40	; 0x28
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	20000094 	.word	0x20000094
 80005a4:	48000400 	.word	0x48000400

080005a8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if(hcan->Instance->TSR & CAN_TSR_TXOK0) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	2202      	movs	r2, #2
 80005b8:	4013      	ands	r3, r2
 80005ba:	d007      	beq.n	80005cc <HAL_CAN_TxMailbox0CompleteCallback+0x24>
		  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	01db      	lsls	r3, r3, #7
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 80005c2:	0019      	movs	r1, r3
 80005c4:	0010      	movs	r0, r2
 80005c6:	f001 fb44 	bl	8001c52 <HAL_GPIO_TogglePin>
	  }
	  else if(hcan->Instance->TSR & CAN_TSR_ALST0) {
		  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
	  }
}
 80005ca:	e00c      	b.n	80005e6 <HAL_CAN_TxMailbox0CompleteCallback+0x3e>
	  else if(hcan->Instance->TSR & CAN_TSR_ALST0) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	2204      	movs	r2, #4
 80005d4:	4013      	ands	r3, r2
 80005d6:	d006      	beq.n	80005e6 <HAL_CAN_TxMailbox0CompleteCallback+0x3e>
		  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	019b      	lsls	r3, r3, #6
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 80005de:	0019      	movs	r1, r3
 80005e0:	0010      	movs	r0, r2
 80005e2:	f001 fb36 	bl	8001c52 <HAL_GPIO_TogglePin>
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b002      	add	sp, #8
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	48000400 	.word	0x48000400

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x44>)
 8000608:	699a      	ldr	r2, [r3, #24]
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_MspInit+0x44>)
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	619a      	str	r2, [r3, #24]
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_MspInit+0x44>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	2201      	movs	r2, #1
 8000618:	4013      	ands	r3, r2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_MspInit+0x44>)
 8000620:	69da      	ldr	r2, [r3, #28]
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_MspInit+0x44>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	0549      	lsls	r1, r1, #21
 8000628:	430a      	orrs	r2, r1
 800062a:	61da      	str	r2, [r3, #28]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_MspInit+0x44>)
 800062e:	69da      	ldr	r2, [r3, #28]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	055b      	lsls	r3, r3, #21
 8000634:	4013      	ands	r3, r2
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	2314      	movs	r3, #20
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	0018      	movs	r0, r3
 8000656:	2314      	movs	r3, #20
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f002 f81c 	bl	8002698 <memset>
  if(hcan->Instance==CAN)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <HAL_CAN_MspInit+0x94>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d133      	bne.n	80006d2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <HAL_CAN_MspInit+0x98>)
 800066c:	69da      	ldr	r2, [r3, #28]
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <HAL_CAN_MspInit+0x98>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	0489      	lsls	r1, r1, #18
 8000674:	430a      	orrs	r2, r1
 8000676:	61da      	str	r2, [r3, #28]
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <HAL_CAN_MspInit+0x98>)
 800067a:	69da      	ldr	r2, [r3, #28]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	049b      	lsls	r3, r3, #18
 8000680:	4013      	ands	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <HAL_CAN_MspInit+0x98>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_CAN_MspInit+0x98>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	0289      	lsls	r1, r1, #10
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_CAN_MspInit+0x98>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	029b      	lsls	r3, r3, #10
 800069c:	4013      	ands	r3, r2
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006a2:	2114      	movs	r1, #20
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	22c0      	movs	r2, #192	; 0xc0
 80006a8:	0152      	lsls	r2, r2, #5
 80006aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2202      	movs	r2, #2
 80006b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2203      	movs	r2, #3
 80006bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2204      	movs	r2, #4
 80006c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	187a      	adds	r2, r7, r1
 80006c6:	2390      	movs	r3, #144	; 0x90
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f93b 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b00a      	add	sp, #40	; 0x28
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	40006400 	.word	0x40006400
 80006e0:	40021000 	.word	0x40021000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f93c 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <CEC_CAN_IRQHandler+0x14>)
 800071e:	0018      	movs	r0, r3
 8000720:	f000 fe2a 	bl	8001378 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	200000a4 	.word	0x200000a4

08000730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	e00a      	b.n	8000758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000742:	e000      	b.n	8000746 <_read+0x16>
 8000744:	bf00      	nop
 8000746:	0001      	movs	r1, r0
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	60ba      	str	r2, [r7, #8]
 800074e:	b2ca      	uxtb	r2, r1
 8000750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	dbf0      	blt.n	8000742 <_read+0x12>
	}

return len;
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	0018      	movs	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	b006      	add	sp, #24
 8000768:	bd80      	pop	{r7, pc}

0800076a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	e009      	b.n	8000790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	60ba      	str	r2, [r7, #8]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0018      	movs	r0, r3
 8000786:	e000      	b.n	800078a <_write+0x20>
 8000788:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	dbf1      	blt.n	800077c <_write+0x12>
	}
	return len;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	0018      	movs	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	b006      	add	sp, #24
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_close>:

int _close(int file)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	return -1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	425b      	negs	r3, r3
}
 80007ae:	0018      	movs	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	0192      	lsls	r2, r2, #6
 80007c6:	605a      	str	r2, [r3, #4]
	return 0;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_isatty>:

int _isatty(int file)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	return 1;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	0018      	movs	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b004      	add	sp, #16
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <_sbrk+0x5c>)
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <_sbrk+0x60>)
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x64>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <_sbrk+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d207      	bcs.n	800083c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800082c:	f001 ff0a 	bl	8002644 <__errno>
 8000830:	0003      	movs	r3, r0
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000836:	2301      	movs	r3, #1
 8000838:	425b      	negs	r3, r3
 800083a:	e009      	b.n	8000850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	18d2      	adds	r2, r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <_sbrk+0x64>)
 800084c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	b006      	add	sp, #24
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20001800 	.word	0x20001800
 800085c:	00000400 	.word	0x00000400
 8000860:	20000098 	.word	0x20000098
 8000864:	200000d8 	.word	0x200000d8

08000868 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000874:	4813      	ldr	r0, [pc, #76]	; (80008c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000876:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <LoopForever+0x6>)
    LDR R1, [R0]
 800087a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800087c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800087e:	4a13      	ldr	r2, [pc, #76]	; (80008cc <LoopForever+0xa>)
    CMP R1, R2
 8000880:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000882:	d105      	bne.n	8000890 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000886:	4913      	ldr	r1, [pc, #76]	; (80008d4 <LoopForever+0x12>)
    STR R1, [R0]
 8000888:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800088a:	4813      	ldr	r0, [pc, #76]	; (80008d8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800088c:	4913      	ldr	r1, [pc, #76]	; (80008dc <LoopForever+0x1a>)
    STR R1, [R0]
 800088e:	6001      	str	r1, [r0, #0]

08000890 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	4813      	ldr	r0, [pc, #76]	; (80008e0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000892:	4914      	ldr	r1, [pc, #80]	; (80008e4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <LoopForever+0x26>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a11      	ldr	r2, [pc, #68]	; (80008ec <LoopForever+0x2a>)
  ldr r4, =_ebss
 80008a8:	4c11      	ldr	r4, [pc, #68]	; (80008f0 <LoopForever+0x2e>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008b6:	f7ff ffd7 	bl	8000868 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008ba:	f001 fec9 	bl	8002650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008be:	f7ff fcaf 	bl	8000220 <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   r0, =_estack
 80008c4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80008c8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80008cc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80008d0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80008d4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80008d8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80008dc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008e8:	080030c8 	.word	0x080030c8
  ldr r2, =_sbss
 80008ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008f0:	200000d4 	.word	0x200000d4

080008f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC1_IRQHandler>
	...

080008f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_Init+0x24>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_Init+0x24>)
 8000902:	2110      	movs	r1, #16
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000908:	2000      	movs	r0, #0
 800090a:	f000 f809 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090e:	f7ff fe77 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_InitTick+0x5c>)
 800092a:	681c      	ldr	r4, [r3, #0]
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_InitTick+0x60>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	0019      	movs	r1, r3
 8000932:	23fa      	movs	r3, #250	; 0xfa
 8000934:	0098      	lsls	r0, r3, #2
 8000936:	f7ff fbe7 	bl	8000108 <__udivsi3>
 800093a:	0003      	movs	r3, r0
 800093c:	0019      	movs	r1, r3
 800093e:	0020      	movs	r0, r4
 8000940:	f7ff fbe2 	bl	8000108 <__udivsi3>
 8000944:	0003      	movs	r3, r0
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fff1 	bl	800192e <HAL_SYSTICK_Config>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e00f      	b.n	8000974 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b03      	cmp	r3, #3
 8000958:	d80b      	bhi.n	8000972 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	2301      	movs	r3, #1
 800095e:	425b      	negs	r3, r3
 8000960:	2200      	movs	r2, #0
 8000962:	0018      	movs	r0, r3
 8000964:	f000 ffbe 	bl	80018e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_InitTick+0x64>)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b003      	add	sp, #12
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	20000000 	.word	0x20000000
 8000980:	20000008 	.word	0x20000008
 8000984:	20000004 	.word	0x20000004

08000988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_IncTick+0x1c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	001a      	movs	r2, r3
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_IncTick+0x20>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	18d2      	adds	r2, r2, r3
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_IncTick+0x20>)
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	20000008 	.word	0x20000008
 80009a8:	200000cc 	.word	0x200000cc

080009ac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <HAL_GetTick+0x10>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	0018      	movs	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	200000cc 	.word	0x200000cc

080009c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff fff0 	bl	80009ac <HAL_GetTick>
 80009cc:	0003      	movs	r3, r0
 80009ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	d005      	beq.n	80009e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_Delay+0x40>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	001a      	movs	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	189b      	adds	r3, r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	f7ff ffe0 	bl	80009ac <HAL_GetTick>
 80009ec:	0002      	movs	r2, r0
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8f7      	bhi.n	80009e8 <HAL_Delay+0x28>
  {
  }
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b004      	add	sp, #16
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000008 	.word	0x20000008

08000a04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e0f0      	b.n	8000bf8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2220      	movs	r2, #32
 8000a1a:	5c9b      	ldrb	r3, [r3, r2]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d103      	bne.n	8000a2a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff fe0f 	bl	8000648 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2102      	movs	r1, #2
 8000a36:	438a      	bics	r2, r1
 8000a38:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a3a:	f7ff ffb7 	bl	80009ac <HAL_GetTick>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a42:	e013      	b.n	8000a6c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a44:	f7ff ffb2 	bl	80009ac <HAL_GetTick>
 8000a48:	0002      	movs	r2, r0
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d90c      	bls.n	8000a6c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	0292      	lsls	r2, r2, #10
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2220      	movs	r2, #32
 8000a64:	2105      	movs	r1, #5
 8000a66:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e0c5      	b.n	8000bf8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2202      	movs	r2, #2
 8000a74:	4013      	ands	r3, r2
 8000a76:	d1e5      	bne.n	8000a44 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2101      	movs	r1, #1
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a88:	f7ff ff90 	bl	80009ac <HAL_GetTick>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a90:	e013      	b.n	8000aba <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a92:	f7ff ff8b 	bl	80009ac <HAL_GetTick>
 8000a96:	0002      	movs	r2, r0
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	2b0a      	cmp	r3, #10
 8000a9e:	d90c      	bls.n	8000aba <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	0292      	lsls	r2, r2, #10
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e09e      	b.n	8000bf8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	d0e5      	beq.n	8000a92 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	7e1b      	ldrb	r3, [r3, #24]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d108      	bne.n	8000ae0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	430a      	orrs	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e007      	b.n	8000af0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2180      	movs	r1, #128	; 0x80
 8000aec:	438a      	bics	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7e5b      	ldrb	r3, [r3, #25]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d108      	bne.n	8000b0a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	430a      	orrs	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	438a      	bics	r2, r1
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7e9b      	ldrb	r3, [r3, #26]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d108      	bne.n	8000b34 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	e007      	b.n	8000b44 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2120      	movs	r1, #32
 8000b40:	438a      	bics	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7edb      	ldrb	r3, [r3, #27]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d108      	bne.n	8000b5e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2110      	movs	r1, #16
 8000b58:	438a      	bics	r2, r1
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	e007      	b.n	8000b6e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2110      	movs	r1, #16
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7f1b      	ldrb	r3, [r3, #28]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d108      	bne.n	8000b88 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2108      	movs	r1, #8
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	e007      	b.n	8000b98 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2108      	movs	r1, #8
 8000b94:	438a      	bics	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7f5b      	ldrb	r3, [r3, #29]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d108      	bne.n	8000bb2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2104      	movs	r1, #4
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	e007      	b.n	8000bc2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	438a      	bics	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	0011      	movs	r1, r2
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	1e5a      	subs	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b004      	add	sp, #16
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c10:	2013      	movs	r0, #19
 8000c12:	183b      	adds	r3, r7, r0
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	2120      	movs	r1, #32
 8000c18:	5c52      	ldrb	r2, [r2, r1]
 8000c1a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c1c:	183b      	adds	r3, r7, r0
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d005      	beq.n	8000c30 <HAL_CAN_ConfigFilter+0x30>
 8000c24:	2313      	movs	r3, #19
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d000      	beq.n	8000c30 <HAL_CAN_ConfigFilter+0x30>
 8000c2e:	e0cd      	b.n	8000dcc <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	58d3      	ldr	r3, [r2, r3]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	221f      	movs	r2, #31
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2201      	movs	r2, #1
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	2387      	movs	r3, #135	; 0x87
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	58d3      	ldr	r3, [r2, r3]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	43d2      	mvns	r2, r2
 8000c62:	401a      	ands	r2, r3
 8000c64:	0011      	movs	r1, r2
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	2387      	movs	r3, #135	; 0x87
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d129      	bne.n	8000cca <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	2383      	movs	r3, #131	; 0x83
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	58d3      	ldr	r3, [r2, r3]
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	43d2      	mvns	r2, r2
 8000c82:	401a      	ands	r2, r3
 8000c84:	0011      	movs	r1, r2
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	2383      	movs	r3, #131	; 0x83
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	041b      	lsls	r3, r3, #16
 8000c9a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ca0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3248      	adds	r2, #72	; 0x48
 8000ca6:	00d2      	lsls	r2, r2, #3
 8000ca8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	041b      	lsls	r3, r3, #16
 8000cb6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cbc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cbe:	6979      	ldr	r1, [r7, #20]
 8000cc0:	3348      	adds	r3, #72	; 0x48
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	18cb      	adds	r3, r1, r3
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d128      	bne.n	8000d24 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	2383      	movs	r3, #131	; 0x83
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	58d2      	ldr	r2, [r2, r3]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	0011      	movs	r1, r2
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	2383      	movs	r3, #131	; 0x83
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cfa:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3248      	adds	r2, #72	; 0x48
 8000d00:	00d2      	lsls	r2, r2, #3
 8000d02:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	041b      	lsls	r3, r3, #16
 8000d10:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d16:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d18:	6979      	ldr	r1, [r7, #20]
 8000d1a:	3348      	adds	r3, #72	; 0x48
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	18cb      	adds	r3, r1, r3
 8000d20:	3304      	adds	r3, #4
 8000d22:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10c      	bne.n	8000d46 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	2381      	movs	r3, #129	; 0x81
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	58d3      	ldr	r3, [r2, r3]
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	43d2      	mvns	r2, r2
 8000d38:	401a      	ands	r2, r3
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	2381      	movs	r3, #129	; 0x81
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	50d1      	str	r1, [r2, r3]
 8000d44:	e00a      	b.n	8000d5c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	2381      	movs	r3, #129	; 0x81
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	58d2      	ldr	r2, [r2, r3]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	0011      	movs	r1, r2
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	2381      	movs	r3, #129	; 0x81
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10c      	bne.n	8000d7e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	2385      	movs	r3, #133	; 0x85
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	58d3      	ldr	r3, [r2, r3]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	43d2      	mvns	r2, r2
 8000d70:	401a      	ands	r2, r3
 8000d72:	0011      	movs	r1, r2
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	2385      	movs	r3, #133	; 0x85
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	50d1      	str	r1, [r2, r3]
 8000d7c:	e00a      	b.n	8000d94 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	2385      	movs	r3, #133	; 0x85
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	58d2      	ldr	r2, [r2, r3]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	2385      	movs	r3, #133	; 0x85
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d10a      	bne.n	8000db2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	2387      	movs	r3, #135	; 0x87
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	58d2      	ldr	r2, [r2, r3]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	0011      	movs	r1, r2
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	2387      	movs	r3, #135	; 0x87
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	58d3      	ldr	r3, [r2, r3]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4393      	bics	r3, r2
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e007      	b.n	8000ddc <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	02d2      	lsls	r2, r2, #11
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
  }
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b006      	add	sp, #24
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2220      	movs	r2, #32
 8000df0:	5c9b      	ldrb	r3, [r3, r2]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d12f      	bne.n	8000e58 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e10:	f7ff fdcc 	bl	80009ac <HAL_GetTick>
 8000e14:	0003      	movs	r3, r0
 8000e16:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e18:	e013      	b.n	8000e42 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e1a:	f7ff fdc7 	bl	80009ac <HAL_GetTick>
 8000e1e:	0002      	movs	r2, r0
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b0a      	cmp	r3, #10
 8000e26:	d90c      	bls.n	8000e42 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0292      	lsls	r2, r2, #10
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2220      	movs	r2, #32
 8000e3a:	2105      	movs	r1, #5
 8000e3c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e012      	b.n	8000e68 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d1e5      	bne.n	8000e1a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	e007      	b.n	8000e68 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	0312      	lsls	r2, r2, #12
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
  }
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b004      	add	sp, #16
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e7e:	201f      	movs	r0, #31
 8000e80:	183b      	adds	r3, r7, r0
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	2120      	movs	r1, #32
 8000e86:	5c52      	ldrb	r2, [r2, r1]
 8000e88:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e92:	183b      	adds	r3, r7, r0
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d005      	beq.n	8000ea6 <HAL_CAN_AddTxMessage+0x36>
 8000e9a:	231f      	movs	r3, #31
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d000      	beq.n	8000ea6 <HAL_CAN_AddTxMessage+0x36>
 8000ea4:	e0b7      	b.n	8001016 <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	04db      	lsls	r3, r3, #19
 8000eac:	4013      	ands	r3, r2
 8000eae:	d10a      	bne.n	8000ec6 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	051b      	lsls	r3, r3, #20
 8000eb6:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eb8:	d105      	bne.n	8000ec6 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	055b      	lsls	r3, r3, #21
 8000ec0:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ec2:	d100      	bne.n	8000ec6 <HAL_CAN_AddTxMessage+0x56>
 8000ec4:	e09e      	b.n	8001004 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	0e1b      	lsrs	r3, r3, #24
 8000eca:	2203      	movs	r2, #3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d908      	bls.n	8000ee8 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0412      	lsls	r2, r2, #16
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e09e      	b.n	8001026 <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	409a      	lsls	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10c      	bne.n	8000f14 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4311      	orrs	r1, r2
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	3218      	adds	r2, #24
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	50d1      	str	r1, [r2, r3]
 8000f12:	e00f      	b.n	8000f34 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000f2a:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	3218      	adds	r2, #24
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3318      	adds	r3, #24
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	18cb      	adds	r3, r1, r3
 8000f44:	3304      	adds	r3, #4
 8000f46:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	7d1b      	ldrb	r3, [r3, #20]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d112      	bne.n	8000f76 <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3318      	adds	r3, #24
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	18d3      	adds	r3, r2, r3
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3318      	adds	r3, #24
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	18cb      	adds	r3, r1, r3
 8000f72:	3304      	adds	r3, #4
 8000f74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3307      	adds	r3, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	061a      	lsls	r2, r3, #24
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3306      	adds	r3, #6
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	041b      	lsls	r3, r3, #16
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3305      	adds	r3, #5
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3304      	adds	r3, #4
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	0019      	movs	r1, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	6979      	ldr	r1, [r7, #20]
 8000fa2:	23c6      	movs	r3, #198	; 0xc6
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	0109      	lsls	r1, r1, #4
 8000fa8:	1841      	adds	r1, r0, r1
 8000faa:	18cb      	adds	r3, r1, r3
 8000fac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3303      	adds	r3, #3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	061a      	lsls	r2, r3, #24
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3302      	adds	r3, #2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	041b      	lsls	r3, r3, #16
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	0019      	movs	r1, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	6979      	ldr	r1, [r7, #20]
 8000fd8:	23c4      	movs	r3, #196	; 0xc4
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	0109      	lsls	r1, r1, #4
 8000fde:	1841      	adds	r1, r0, r1
 8000fe0:	18cb      	adds	r3, r1, r3
 8000fe2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	3218      	adds	r2, #24
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	58d2      	ldr	r2, [r2, r3]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4311      	orrs	r1, r2
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	3218      	adds	r2, #24
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	e010      	b.n	8001026 <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	0392      	lsls	r2, r2, #14
 800100c:	431a      	orrs	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e007      	b.n	8001026 <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	02d2      	lsls	r2, r2, #11
 800101e:	431a      	orrs	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
  }
}
 8001026:	0018      	movs	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	b008      	add	sp, #32
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800103a:	200b      	movs	r0, #11
 800103c:	183b      	adds	r3, r7, r0
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	2120      	movs	r1, #32
 8001042:	5c52      	ldrb	r2, [r2, r1]
 8001044:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001046:	183b      	adds	r3, r7, r0
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d004      	beq.n	8001058 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 800104e:	230b      	movs	r3, #11
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d11d      	bne.n	8001094 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	04db      	lsls	r3, r3, #19
 8001062:	4013      	ands	r3, r2
 8001064:	d002      	beq.n	800106c <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3301      	adds	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	051b      	lsls	r3, r3, #20
 8001076:	4013      	ands	r3, r2
 8001078:	d002      	beq.n	8001080 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	055b      	lsls	r3, r3, #21
 800108a:	4013      	ands	r3, r2
 800108c:	d002      	beq.n	8001094 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3301      	adds	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001094:	68fb      	ldr	r3, [r7, #12]
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ac:	200b      	movs	r0, #11
 80010ae:	183b      	adds	r3, r7, r0
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	2120      	movs	r1, #32
 80010b4:	5c52      	ldrb	r2, [r2, r1]
 80010b6:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80010b8:	183b      	adds	r3, r7, r0
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d004      	beq.n	80010ca <HAL_CAN_IsTxMessagePending+0x2c>
 80010c0:	230b      	movs	r3, #11
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d10b      	bne.n	80010e2 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	0692      	lsls	r2, r2, #26
 80010d4:	401a      	ands	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	069b      	lsls	r3, r3, #26
 80010da:	429a      	cmp	r2, r3
 80010dc:	d001      	beq.n	80010e2 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 80010de:	2301      	movs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b004      	add	sp, #16
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010fa:	2017      	movs	r0, #23
 80010fc:	183b      	adds	r3, r7, r0
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	2120      	movs	r1, #32
 8001102:	5c52      	ldrb	r2, [r2, r1]
 8001104:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001106:	183b      	adds	r3, r7, r0
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d005      	beq.n	800111a <HAL_CAN_GetRxMessage+0x2e>
 800110e:	2317      	movs	r3, #23
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d000      	beq.n	800111a <HAL_CAN_GetRxMessage+0x2e>
 8001118:	e0f8      	b.n	800130c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10e      	bne.n	800113e <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2203      	movs	r2, #3
 8001128:	4013      	ands	r3, r2
 800112a:	d117      	bne.n	800115c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	0392      	lsls	r2, r2, #14
 8001134:	431a      	orrs	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0ee      	b.n	800131c <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	2203      	movs	r2, #3
 8001146:	4013      	ands	r3, r2
 8001148:	d108      	bne.n	800115c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	0392      	lsls	r2, r2, #14
 8001152:	431a      	orrs	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0df      	b.n	800131c <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	321b      	adds	r2, #27
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	58d3      	ldr	r3, [r2, r3]
 8001168:	2204      	movs	r2, #4
 800116a:	401a      	ands	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10b      	bne.n	8001190 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	321b      	adds	r2, #27
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	58d3      	ldr	r3, [r2, r3]
 8001184:	0d5b      	lsrs	r3, r3, #21
 8001186:	055b      	lsls	r3, r3, #21
 8001188:	0d5a      	lsrs	r2, r3, #21
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e00a      	b.n	80011a6 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	321b      	adds	r2, #27
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	58d3      	ldr	r3, [r2, r3]
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	321b      	adds	r2, #27
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	58d3      	ldr	r3, [r2, r3]
 80011b2:	2202      	movs	r2, #2
 80011b4:	401a      	ands	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	331b      	adds	r3, #27
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	3304      	adds	r3, #4
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	220f      	movs	r2, #15
 80011cc:	401a      	ands	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	331b      	adds	r3, #27
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	18d3      	adds	r3, r2, r3
 80011de:	3304      	adds	r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	22ff      	movs	r2, #255	; 0xff
 80011e6:	401a      	ands	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	331b      	adds	r3, #27
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	18d3      	adds	r3, r2, r3
 80011f8:	3304      	adds	r3, #4
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0c1b      	lsrs	r3, r3, #16
 80011fe:	041b      	lsls	r3, r3, #16
 8001200:	0c1a      	lsrs	r2, r3, #16
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6819      	ldr	r1, [r3, #0]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	23dc      	movs	r3, #220	; 0xdc
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	188a      	adds	r2, r1, r2
 8001214:	18d3      	adds	r3, r2, r3
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6819      	ldr	r1, [r3, #0]
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	23dc      	movs	r3, #220	; 0xdc
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	188a      	adds	r2, r1, r2
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	0a1a      	lsrs	r2, r3, #8
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6819      	ldr	r1, [r3, #0]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	23dc      	movs	r3, #220	; 0xdc
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	188a      	adds	r2, r1, r2
 8001248:	18d3      	adds	r3, r2, r3
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0c1a      	lsrs	r2, r3, #16
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3302      	adds	r3, #2
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6819      	ldr	r1, [r3, #0]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	23dc      	movs	r3, #220	; 0xdc
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	188a      	adds	r2, r1, r2
 8001264:	18d3      	adds	r3, r2, r3
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	0e1a      	lsrs	r2, r3, #24
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3303      	adds	r3, #3
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	23de      	movs	r3, #222	; 0xde
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	188a      	adds	r2, r1, r2
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3304      	adds	r3, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6819      	ldr	r1, [r3, #0]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	23de      	movs	r3, #222	; 0xde
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	188a      	adds	r2, r1, r2
 800129a:	18d3      	adds	r3, r2, r3
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	0a1a      	lsrs	r2, r3, #8
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	3305      	adds	r3, #5
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6819      	ldr	r1, [r3, #0]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	23de      	movs	r3, #222	; 0xde
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	188a      	adds	r2, r1, r2
 80012b6:	18d3      	adds	r3, r2, r3
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	0c1a      	lsrs	r2, r3, #16
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	3306      	adds	r3, #6
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	23de      	movs	r3, #222	; 0xde
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	188a      	adds	r2, r1, r2
 80012d2:	18d3      	adds	r3, r2, r3
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0e1a      	lsrs	r2, r3, #24
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3307      	adds	r3, #7
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d108      	bne.n	80012f8 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2120      	movs	r1, #32
 80012f2:	430a      	orrs	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	e007      	b.n	8001308 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	691a      	ldr	r2, [r3, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2120      	movs	r1, #32
 8001304:	430a      	orrs	r2, r1
 8001306:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	e007      	b.n	800131c <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	02d2      	lsls	r2, r2, #11
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
  }
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b006      	add	sp, #24
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800132e:	200f      	movs	r0, #15
 8001330:	183b      	adds	r3, r7, r0
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	2120      	movs	r1, #32
 8001336:	5c52      	ldrb	r2, [r2, r1]
 8001338:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800133a:	183b      	adds	r3, r7, r0
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d004      	beq.n	800134c <HAL_CAN_ActivateNotification+0x28>
 8001342:	230f      	movs	r3, #15
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d109      	bne.n	8001360 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6959      	ldr	r1, [r3, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	e007      	b.n	8001370 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	02d2      	lsls	r2, r2, #11
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
  }
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	2201      	movs	r2, #1
 80013b8:	4013      	ands	r3, r2
 80013ba:	d100      	bne.n	80013be <HAL_CAN_IRQHandler+0x46>
 80013bc:	e084      	b.n	80014c8 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2201      	movs	r2, #1
 80013c2:	4013      	ands	r3, r2
 80013c4:	d024      	beq.n	8001410 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2201      	movs	r2, #1
 80013cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d004      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff f8e5 	bl	80005a8 <HAL_CAN_TxMailbox0CompleteCallback>
 80013de:	e017      	b.n	8001410 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d005      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	4313      	orrs	r3, r2
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
 80013f2:	e00d      	b.n	8001410 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2208      	movs	r2, #8
 80013f8:	4013      	ands	r3, r2
 80013fa:	d005      	beq.n	8001408 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	0152      	lsls	r2, r2, #5
 8001402:	4313      	orrs	r3, r2
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	e003      	b.n	8001410 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	0018      	movs	r0, r3
 800140c:	f000 f975 	bl	80016fa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4013      	ands	r3, r2
 8001418:	d028      	beq.n	800146c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	0052      	lsls	r2, r2, #1
 8001422:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4013      	ands	r3, r2
 800142c:	d004      	beq.n	8001438 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	0018      	movs	r0, r3
 8001432:	f000 f952 	bl	80016da <HAL_CAN_TxMailbox1CompleteCallback>
 8001436:	e019      	b.n	800146c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4013      	ands	r3, r2
 8001440:	d005      	beq.n	800144e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	0192      	lsls	r2, r2, #6
 8001448:	4313      	orrs	r3, r2
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
 800144c:	e00e      	b.n	800146c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d005      	beq.n	8001464 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	01d2      	lsls	r2, r2, #7
 800145e:	4313      	orrs	r3, r2
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
 8001462:	e003      	b.n	800146c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	0018      	movs	r0, r3
 8001468:	f000 f94f 	bl	800170a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	4013      	ands	r3, r2
 8001474:	d028      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	0252      	lsls	r2, r2, #9
 800147e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	029b      	lsls	r3, r3, #10
 8001486:	4013      	ands	r3, r2
 8001488:	d004      	beq.n	8001494 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f000 f92c 	bl	80016ea <HAL_CAN_TxMailbox2CompleteCallback>
 8001492:	e019      	b.n	80014c8 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	02db      	lsls	r3, r3, #11
 800149a:	4013      	ands	r3, r2
 800149c:	d005      	beq.n	80014aa <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	0212      	lsls	r2, r2, #8
 80014a4:	4313      	orrs	r3, r2
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	e00e      	b.n	80014c8 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	031b      	lsls	r3, r3, #12
 80014b0:	4013      	ands	r3, r2
 80014b2:	d005      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	0252      	lsls	r2, r2, #9
 80014ba:	4313      	orrs	r3, r2
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
 80014be:	e003      	b.n	80014c8 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 f929 	bl	800171a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	2208      	movs	r2, #8
 80014cc:	4013      	ands	r3, r2
 80014ce:	d00c      	beq.n	80014ea <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2210      	movs	r2, #16
 80014d4:	4013      	ands	r3, r2
 80014d6:	d008      	beq.n	80014ea <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	4313      	orrs	r3, r2
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2210      	movs	r2, #16
 80014e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	2204      	movs	r2, #4
 80014ee:	4013      	ands	r3, r2
 80014f0:	d00b      	beq.n	800150a <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2208      	movs	r2, #8
 80014f6:	4013      	ands	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2208      	movs	r2, #8
 8001500:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	0018      	movs	r0, r3
 8001506:	f000 f910 	bl	800172a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	2202      	movs	r2, #2
 800150e:	4013      	ands	r3, r2
 8001510:	d009      	beq.n	8001526 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2203      	movs	r2, #3
 800151a:	4013      	ands	r3, r2
 800151c:	d003      	beq.n	8001526 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff f815 	bl	8000550 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	2240      	movs	r2, #64	; 0x40
 800152a:	4013      	ands	r3, r2
 800152c:	d00c      	beq.n	8001548 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2210      	movs	r2, #16
 8001532:	4013      	ands	r3, r2
 8001534:	d008      	beq.n	8001548 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	00d2      	lsls	r2, r2, #3
 800153c:	4313      	orrs	r3, r2
 800153e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2210      	movs	r2, #16
 8001546:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	2220      	movs	r2, #32
 800154c:	4013      	ands	r3, r2
 800154e:	d00b      	beq.n	8001568 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2208      	movs	r2, #8
 8001554:	4013      	ands	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2208      	movs	r2, #8
 800155e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0018      	movs	r0, r3
 8001564:	f000 f8f1 	bl	800174a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	2210      	movs	r2, #16
 800156c:	4013      	ands	r3, r2
 800156e:	d009      	beq.n	8001584 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2203      	movs	r2, #3
 8001578:	4013      	ands	r3, r2
 800157a:	d003      	beq.n	8001584 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	0018      	movs	r0, r3
 8001580:	f000 f8db 	bl	800173a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001584:	6a3a      	ldr	r2, [r7, #32]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	029b      	lsls	r3, r3, #10
 800158a:	4013      	ands	r3, r2
 800158c:	d00b      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	2210      	movs	r2, #16
 8001592:	4013      	ands	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2210      	movs	r2, #16
 800159c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 f8da 	bl	800175a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015a6:	6a3a      	ldr	r2, [r7, #32]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	025b      	lsls	r3, r3, #9
 80015ac:	4013      	ands	r3, r2
 80015ae:	d00b      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2208      	movs	r2, #8
 80015b4:	4013      	ands	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2208      	movs	r2, #8
 80015be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	0018      	movs	r0, r3
 80015c4:	f000 f8d1 	bl	800176a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015c8:	6a3a      	ldr	r2, [r7, #32]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	4013      	ands	r3, r2
 80015d0:	d100      	bne.n	80015d4 <HAL_CAN_IRQHandler+0x25c>
 80015d2:	e071      	b.n	80016b8 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	2204      	movs	r2, #4
 80015d8:	4013      	ands	r3, r2
 80015da:	d100      	bne.n	80015de <HAL_CAN_IRQHandler+0x266>
 80015dc:	e068      	b.n	80016b0 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015de:	6a3a      	ldr	r2, [r7, #32]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	d007      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015ee:	d003      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	2201      	movs	r2, #1
 80015f4:	4313      	orrs	r3, r2
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001608:	d003      	beq.n	8001612 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	2202      	movs	r2, #2
 800160e:	4313      	orrs	r3, r2
 8001610:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001612:	6a3a      	ldr	r2, [r7, #32]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4013      	ands	r3, r2
 800161a:	d007      	beq.n	800162c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2204      	movs	r2, #4
 8001620:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001622:	d003      	beq.n	800162c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	2204      	movs	r2, #4
 8001628:	4313      	orrs	r3, r2
 800162a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	4013      	ands	r3, r2
 8001634:	d03c      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2270      	movs	r2, #112	; 0x70
 800163a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800163c:	d038      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2270      	movs	r2, #112	; 0x70
 8001642:	4013      	ands	r3, r2
 8001644:	2b30      	cmp	r3, #48	; 0x30
 8001646:	d016      	beq.n	8001676 <HAL_CAN_IRQHandler+0x2fe>
 8001648:	d804      	bhi.n	8001654 <HAL_CAN_IRQHandler+0x2dc>
 800164a:	2b10      	cmp	r3, #16
 800164c:	d009      	beq.n	8001662 <HAL_CAN_IRQHandler+0x2ea>
 800164e:	2b20      	cmp	r3, #32
 8001650:	d00c      	beq.n	800166c <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001652:	e025      	b.n	80016a0 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8001654:	2b50      	cmp	r3, #80	; 0x50
 8001656:	d018      	beq.n	800168a <HAL_CAN_IRQHandler+0x312>
 8001658:	2b60      	cmp	r3, #96	; 0x60
 800165a:	d01b      	beq.n	8001694 <HAL_CAN_IRQHandler+0x31c>
 800165c:	2b40      	cmp	r3, #64	; 0x40
 800165e:	d00f      	beq.n	8001680 <HAL_CAN_IRQHandler+0x308>
            break;
 8001660:	e01e      	b.n	80016a0 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	2208      	movs	r2, #8
 8001666:	4313      	orrs	r3, r2
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800166a:	e019      	b.n	80016a0 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	2210      	movs	r2, #16
 8001670:	4313      	orrs	r3, r2
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001674:	e014      	b.n	80016a0 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	2220      	movs	r2, #32
 800167a:	4313      	orrs	r3, r2
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800167e:	e00f      	b.n	80016a0 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	2240      	movs	r2, #64	; 0x40
 8001684:	4313      	orrs	r3, r2
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001688:	e00a      	b.n	80016a0 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	4313      	orrs	r3, r2
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001692:	e005      	b.n	80016a0 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	0052      	lsls	r2, r2, #1
 800169a:	4313      	orrs	r3, r2
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800169e:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2170      	movs	r1, #112	; 0x70
 80016ac:	438a      	bics	r2, r1
 80016ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2204      	movs	r2, #4
 80016b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0018      	movs	r0, r3
 80016ce:	f000 f854 	bl	800177a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b00a      	add	sp, #40	; 0x28
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b002      	add	sp, #8
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	0002      	movs	r2, r0
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b7f      	cmp	r3, #127	; 0x7f
 800179e:	d809      	bhi.n	80017b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a0:	1dfb      	adds	r3, r7, #7
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	001a      	movs	r2, r3
 80017a6:	231f      	movs	r3, #31
 80017a8:	401a      	ands	r2, r3
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_EnableIRQ+0x30>)
 80017ac:	2101      	movs	r1, #1
 80017ae:	4091      	lsls	r1, r2
 80017b0:	000a      	movs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
  }
}
 80017b4:	46c0      	nop			; (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b002      	add	sp, #8
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	0002      	movs	r2, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b7f      	cmp	r3, #127	; 0x7f
 80017d4:	d828      	bhi.n	8001828 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d6:	4a2f      	ldr	r2, [pc, #188]	; (8001894 <__NVIC_SetPriority+0xd4>)
 80017d8:	1dfb      	adds	r3, r7, #7
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	33c0      	adds	r3, #192	; 0xc0
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	589b      	ldr	r3, [r3, r2]
 80017e6:	1dfa      	adds	r2, r7, #7
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	0011      	movs	r1, r2
 80017ec:	2203      	movs	r2, #3
 80017ee:	400a      	ands	r2, r1
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	21ff      	movs	r1, #255	; 0xff
 80017f4:	4091      	lsls	r1, r2
 80017f6:	000a      	movs	r2, r1
 80017f8:	43d2      	mvns	r2, r2
 80017fa:	401a      	ands	r2, r3
 80017fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	019b      	lsls	r3, r3, #6
 8001802:	22ff      	movs	r2, #255	; 0xff
 8001804:	401a      	ands	r2, r3
 8001806:	1dfb      	adds	r3, r7, #7
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	0018      	movs	r0, r3
 800180c:	2303      	movs	r3, #3
 800180e:	4003      	ands	r3, r0
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001814:	481f      	ldr	r0, [pc, #124]	; (8001894 <__NVIC_SetPriority+0xd4>)
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b25b      	sxtb	r3, r3
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	430a      	orrs	r2, r1
 8001820:	33c0      	adds	r3, #192	; 0xc0
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001826:	e031      	b.n	800188c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <__NVIC_SetPriority+0xd8>)
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	0019      	movs	r1, r3
 8001830:	230f      	movs	r3, #15
 8001832:	400b      	ands	r3, r1
 8001834:	3b08      	subs	r3, #8
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	3306      	adds	r3, #6
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	18d3      	adds	r3, r2, r3
 800183e:	3304      	adds	r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	1dfa      	adds	r2, r7, #7
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	0011      	movs	r1, r2
 8001848:	2203      	movs	r2, #3
 800184a:	400a      	ands	r2, r1
 800184c:	00d2      	lsls	r2, r2, #3
 800184e:	21ff      	movs	r1, #255	; 0xff
 8001850:	4091      	lsls	r1, r2
 8001852:	000a      	movs	r2, r1
 8001854:	43d2      	mvns	r2, r2
 8001856:	401a      	ands	r2, r3
 8001858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	22ff      	movs	r2, #255	; 0xff
 8001860:	401a      	ands	r2, r3
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	0018      	movs	r0, r3
 8001868:	2303      	movs	r3, #3
 800186a:	4003      	ands	r3, r0
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <__NVIC_SetPriority+0xd8>)
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	001c      	movs	r4, r3
 8001878:	230f      	movs	r3, #15
 800187a:	4023      	ands	r3, r4
 800187c:	3b08      	subs	r3, #8
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	430a      	orrs	r2, r1
 8001882:	3306      	adds	r3, #6
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	18c3      	adds	r3, r0, r3
 8001888:	3304      	adds	r3, #4
 800188a:	601a      	str	r2, [r3, #0]
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b003      	add	sp, #12
 8001892:	bd90      	pop	{r4, r7, pc}
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <SysTick_Config+0x40>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e010      	b.n	80018d4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <SysTick_Config+0x44>)
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	3a01      	subs	r2, #1
 80018b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	2301      	movs	r3, #1
 80018bc:	425b      	negs	r3, r3
 80018be:	2103      	movs	r1, #3
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff ff7d 	bl	80017c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <SysTick_Config+0x44>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SysTick_Config+0x44>)
 80018ce:	2207      	movs	r2, #7
 80018d0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	00ffffff 	.word	0x00ffffff
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	210f      	movs	r1, #15
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	1c02      	adds	r2, r0, #0
 80018f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	0011      	movs	r1, r2
 8001900:	0018      	movs	r0, r3
 8001902:	f7ff ff5d 	bl	80017c0 <__NVIC_SetPriority>
}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	0002      	movs	r2, r0
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191a:	1dfb      	adds	r3, r7, #7
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b25b      	sxtb	r3, r3
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff ff33 	bl	800178c <__NVIC_EnableIRQ>
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b002      	add	sp, #8
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0018      	movs	r0, r3
 800193a:	f7ff ffaf 	bl	800189c <SysTick_Config>
 800193e:	0003      	movs	r3, r0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	e149      	b.n	8001bec <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4091      	lsls	r1, r2
 8001962:	000a      	movs	r2, r1
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d100      	bne.n	8001970 <HAL_GPIO_Init+0x28>
 800196e:	e13a      	b.n	8001be6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d00b      	beq.n	8001990 <HAL_GPIO_Init+0x48>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001984:	2b11      	cmp	r3, #17
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b12      	cmp	r3, #18
 800198e:	d130      	bne.n	80019f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	409a      	lsls	r2, r3
 80019b2:	0013      	movs	r3, r2
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c6:	2201      	movs	r2, #1
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	43da      	mvns	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	2201      	movs	r2, #1
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	43da      	mvns	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	0013      	movs	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0xea>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d123      	bne.n	8001a7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	08da      	lsrs	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3208      	adds	r2, #8
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	58d3      	ldr	r3, [r2, r3]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2207      	movs	r2, #7
 8001a44:	4013      	ands	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	0013      	movs	r3, r2
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2107      	movs	r1, #7
 8001a5e:	400b      	ands	r3, r1
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	409a      	lsls	r2, r3
 8001a64:	0013      	movs	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	6939      	ldr	r1, [r7, #16]
 8001a78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2203      	movs	r2, #3
 8001a98:	401a      	ands	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	055b      	lsls	r3, r3, #21
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d100      	bne.n	8001abc <HAL_GPIO_Init+0x174>
 8001aba:	e094      	b.n	8001be6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abc:	4b51      	ldr	r3, [pc, #324]	; (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	619a      	str	r2, [r3, #24]
 8001ac8:	4b4e      	ldr	r3, [pc, #312]	; (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2201      	movs	r2, #1
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad4:	4a4c      	ldr	r2, [pc, #304]	; (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	589b      	ldr	r3, [r3, r2]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	409a      	lsls	r2, r3
 8001aee:	0013      	movs	r3, r2
 8001af0:	43da      	mvns	r2, r3
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	2390      	movs	r3, #144	; 0x90
 8001afc:	05db      	lsls	r3, r3, #23
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x1d6>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a41      	ldr	r2, [pc, #260]	; (8001c0c <HAL_GPIO_Init+0x2c4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x1d2>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a40      	ldr	r2, [pc, #256]	; (8001c10 <HAL_GPIO_Init+0x2c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x1ce>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e004      	b.n	8001b20 <HAL_GPIO_Init+0x1d8>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_Init+0x1d8>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x1d8>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	2103      	movs	r1, #3
 8001b24:	400a      	ands	r2, r1
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b30:	4935      	ldr	r1, [pc, #212]	; (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	025b      	lsls	r3, r3, #9
 8001b56:	4013      	ands	r3, r2
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b62:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43da      	mvns	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	029b      	lsls	r3, r3, #10
 8001b80:	4013      	ands	r3, r2
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b8c:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	035b      	lsls	r3, r3, #13
 8001baa:	4013      	ands	r3, r2
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	039b      	lsls	r3, r3, #14
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	40da      	lsrs	r2, r3
 8001bf4:	1e13      	subs	r3, r2, #0
 8001bf6:	d000      	beq.n	8001bfa <HAL_GPIO_Init+0x2b2>
 8001bf8:	e6ae      	b.n	8001958 <HAL_GPIO_Init+0x10>
  } 
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b006      	add	sp, #24
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	48000400 	.word	0x48000400
 8001c10:	48000800 	.word	0x48000800
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	0008      	movs	r0, r1
 8001c22:	0011      	movs	r1, r2
 8001c24:	1cbb      	adds	r3, r7, #2
 8001c26:	1c02      	adds	r2, r0, #0
 8001c28:	801a      	strh	r2, [r3, #0]
 8001c2a:	1c7b      	adds	r3, r7, #1
 8001c2c:	1c0a      	adds	r2, r1, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c30:	1c7b      	adds	r3, r7, #1
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c38:	1cbb      	adds	r3, r7, #2
 8001c3a:	881a      	ldrh	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c40:	e003      	b.n	8001c4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c42:	1cbb      	adds	r3, r7, #2
 8001c44:	881a      	ldrh	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b002      	add	sp, #8
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	000a      	movs	r2, r1
 8001c5c:	1cbb      	adds	r3, r7, #2
 8001c5e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c66:	1cbb      	adds	r3, r7, #2
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	041a      	lsls	r2, r3, #16
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	1cb9      	adds	r1, r7, #2
 8001c76:	8809      	ldrh	r1, [r1, #0]
 8001c78:	400b      	ands	r3, r1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b004      	add	sp, #16
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f000 fb76 	bl	8002388 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d100      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x20>
 8001ca6:	e08e      	b.n	8001dc6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ca8:	4bc5      	ldr	r3, [pc, #788]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	220c      	movs	r2, #12
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d00e      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb4:	4bc2      	ldr	r3, [pc, #776]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	220c      	movs	r2, #12
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d117      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x68>
 8001cc0:	4bbf      	ldr	r3, [pc, #764]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	23c0      	movs	r3, #192	; 0xc0
 8001cc6:	025b      	lsls	r3, r3, #9
 8001cc8:	401a      	ands	r2, r3
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	025b      	lsls	r3, r3, #9
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4bbb      	ldr	r3, [pc, #748]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	029b      	lsls	r3, r3, #10
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x58>
 8001cde:	e071      	b.n	8001dc4 <HAL_RCC_OscConfig+0x13c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d000      	beq.n	8001cea <HAL_RCC_OscConfig+0x62>
 8001ce8:	e06c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f000 fb4c 	bl	8002388 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x80>
 8001cf8:	4bb1      	ldr	r3, [pc, #708]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4bb0      	ldr	r3, [pc, #704]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	0249      	lsls	r1, r1, #9
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e02f      	b.n	8001d68 <HAL_RCC_OscConfig+0xe0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0xa2>
 8001d10:	4bab      	ldr	r3, [pc, #684]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4baa      	ldr	r3, [pc, #680]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d16:	49ab      	ldr	r1, [pc, #684]	; (8001fc4 <HAL_RCC_OscConfig+0x33c>)
 8001d18:	400a      	ands	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	4ba8      	ldr	r3, [pc, #672]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4ba7      	ldr	r3, [pc, #668]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d22:	49a9      	ldr	r1, [pc, #676]	; (8001fc8 <HAL_RCC_OscConfig+0x340>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e01e      	b.n	8001d68 <HAL_RCC_OscConfig+0xe0>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b05      	cmp	r3, #5
 8001d30:	d10e      	bne.n	8001d50 <HAL_RCC_OscConfig+0xc8>
 8001d32:	4ba3      	ldr	r3, [pc, #652]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4ba2      	ldr	r3, [pc, #648]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	02c9      	lsls	r1, r1, #11
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	4b9f      	ldr	r3, [pc, #636]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b9e      	ldr	r3, [pc, #632]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	0249      	lsls	r1, r1, #9
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xe0>
 8001d50:	4b9b      	ldr	r3, [pc, #620]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b9a      	ldr	r3, [pc, #616]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d56:	499b      	ldr	r1, [pc, #620]	; (8001fc4 <HAL_RCC_OscConfig+0x33c>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	4b98      	ldr	r3, [pc, #608]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b97      	ldr	r3, [pc, #604]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d62:	4999      	ldr	r1, [pc, #612]	; (8001fc8 <HAL_RCC_OscConfig+0x340>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d014      	beq.n	8001d9a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe fe1c 	bl	80009ac <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7a:	f7fe fe17 	bl	80009ac <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b64      	cmp	r3, #100	; 0x64
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e2fd      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8c:	4b8c      	ldr	r3, [pc, #560]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	029b      	lsls	r3, r3, #10
 8001d94:	4013      	ands	r3, r2
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0xf2>
 8001d98:	e015      	b.n	8001dc6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7fe fe07 	bl	80009ac <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7fe fe02 	bl	80009ac <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e2e8      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	4b82      	ldr	r3, [pc, #520]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x11c>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x14a>
 8001dd0:	e06c      	b.n	8001eac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dd2:	4b7b      	ldr	r3, [pc, #492]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d00e      	beq.n	8001dfa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ddc:	4b78      	ldr	r3, [pc, #480]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	220c      	movs	r2, #12
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d11f      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1a0>
 8001de8:	4b75      	ldr	r3, [pc, #468]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	23c0      	movs	r3, #192	; 0xc0
 8001dee:	025b      	lsls	r3, r3, #9
 8001df0:	401a      	ands	r2, r3
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	4b71      	ldr	r3, [pc, #452]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x188>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e2bb      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	22f8      	movs	r2, #248	; 0xf8
 8001e16:	4393      	bics	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	00da      	lsls	r2, r3, #3
 8001e20:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	e041      	b.n	8001eac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d024      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e30:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b62      	ldr	r3, [pc, #392]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fdb6 	bl	80009ac <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e46:	f7fe fdb1 	bl	80009ac <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e297      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d0f1      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b57      	ldr	r3, [pc, #348]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	22f8      	movs	r2, #248	; 0xf8
 8001e68:	4393      	bics	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	00da      	lsls	r2, r3, #3
 8001e72:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e018      	b.n	8001eac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7a:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	438a      	bics	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7fe fd91 	bl	80009ac <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e90:	f7fe fd8c 	bl	80009ac <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e272      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d1f1      	bne.n	8001e90 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d036      	beq.n	8001f24 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebe:	4b40      	ldr	r3, [pc, #256]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7fe fd6f 	bl	80009ac <HAL_GetTick>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7fe fd6a 	bl	80009ac <HAL_GetTick>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e250      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	d0f1      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
 8001ef0:	e018      	b.n	8001f24 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef6:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	438a      	bics	r2, r1
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7fe fd55 	bl	80009ac <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f08:	f7fe fd50 	bl	80009ac <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e236      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	d1f1      	bne.n	8001f08 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2204      	movs	r2, #4
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d100      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2a8>
 8001f2e:	e0b5      	b.n	800209c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f30:	231f      	movs	r3, #31
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001f3a:	69da      	ldr	r2, [r3, #28]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	055b      	lsls	r3, r3, #21
 8001f40:	4013      	ands	r3, r2
 8001f42:	d111      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	0549      	lsls	r1, r1, #21
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	61da      	str	r2, [r3, #28]
 8001f52:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	055b      	lsls	r3, r3, #21
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f60:	231f      	movs	r3, #31
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_RCC_OscConfig+0x344>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	d11a      	bne.n	8001faa <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_RCC_OscConfig+0x344>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_RCC_OscConfig+0x344>)
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	0049      	lsls	r1, r1, #1
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f82:	f7fe fd13 	bl	80009ac <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8c:	f7fe fd0e 	bl	80009ac <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1f4      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_OscConfig+0x344>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x348>
 8001fb2:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001fb4:	6a1a      	ldr	r2, [r3, #32]
 8001fb6:	4b02      	ldr	r3, [pc, #8]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001fb8:	2101      	movs	r1, #1
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	621a      	str	r2, [r3, #32]
 8001fbe:	e035      	b.n	800202c <HAL_RCC_OscConfig+0x3a4>
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	fffeffff 	.word	0xfffeffff
 8001fc8:	fffbffff 	.word	0xfffbffff
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x36a>
 8001fd8:	4bca      	ldr	r3, [pc, #808]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8001fda:	6a1a      	ldr	r2, [r3, #32]
 8001fdc:	4bc9      	ldr	r3, [pc, #804]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	621a      	str	r2, [r3, #32]
 8001fe4:	4bc7      	ldr	r3, [pc, #796]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	4bc6      	ldr	r3, [pc, #792]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8001fea:	2104      	movs	r1, #4
 8001fec:	438a      	bics	r2, r1
 8001fee:	621a      	str	r2, [r3, #32]
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x3a4>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x38c>
 8001ffa:	4bc2      	ldr	r3, [pc, #776]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8001ffc:	6a1a      	ldr	r2, [r3, #32]
 8001ffe:	4bc1      	ldr	r3, [pc, #772]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002000:	2104      	movs	r1, #4
 8002002:	430a      	orrs	r2, r1
 8002004:	621a      	str	r2, [r3, #32]
 8002006:	4bbf      	ldr	r3, [pc, #764]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002008:	6a1a      	ldr	r2, [r3, #32]
 800200a:	4bbe      	ldr	r3, [pc, #760]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800200c:	2101      	movs	r1, #1
 800200e:	430a      	orrs	r2, r1
 8002010:	621a      	str	r2, [r3, #32]
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0x3a4>
 8002014:	4bbb      	ldr	r3, [pc, #748]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	4bba      	ldr	r3, [pc, #744]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800201a:	2101      	movs	r1, #1
 800201c:	438a      	bics	r2, r1
 800201e:	621a      	str	r2, [r3, #32]
 8002020:	4bb8      	ldr	r3, [pc, #736]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002022:	6a1a      	ldr	r2, [r3, #32]
 8002024:	4bb7      	ldr	r3, [pc, #732]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002026:	2104      	movs	r1, #4
 8002028:	438a      	bics	r2, r1
 800202a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d014      	beq.n	800205e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7fe fcba 	bl	80009ac <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	e009      	b.n	8002052 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe fcb5 	bl	80009ac <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	4aaf      	ldr	r2, [pc, #700]	; (8002308 <HAL_RCC_OscConfig+0x680>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e19a      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	4bac      	ldr	r3, [pc, #688]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	2202      	movs	r2, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x3b6>
 800205c:	e013      	b.n	8002086 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7fe fca5 	bl	80009ac <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	e009      	b.n	800207c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7fe fca0 	bl	80009ac <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	4aa5      	ldr	r2, [pc, #660]	; (8002308 <HAL_RCC_OscConfig+0x680>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e185      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	4ba1      	ldr	r3, [pc, #644]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	2202      	movs	r2, #2
 8002082:	4013      	ands	r3, r2
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002086:	231f      	movs	r3, #31
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b9c      	ldr	r3, [pc, #624]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	4b9b      	ldr	r3, [pc, #620]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002096:	499d      	ldr	r1, [pc, #628]	; (800230c <HAL_RCC_OscConfig+0x684>)
 8002098:	400a      	ands	r2, r1
 800209a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2210      	movs	r2, #16
 80020a2:	4013      	ands	r3, r2
 80020a4:	d063      	beq.n	800216e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d12a      	bne.n	8002104 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020ae:	4b95      	ldr	r3, [pc, #596]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b2:	4b94      	ldr	r3, [pc, #592]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020b4:	2104      	movs	r1, #4
 80020b6:	430a      	orrs	r2, r1
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020ba:	4b92      	ldr	r3, [pc, #584]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020be:	4b91      	ldr	r3, [pc, #580]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	430a      	orrs	r2, r1
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7fe fc71 	bl	80009ac <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020d0:	f7fe fc6c 	bl	80009ac <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e152      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	2202      	movs	r2, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d0f1      	beq.n	80020d0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020ec:	4b85      	ldr	r3, [pc, #532]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f0:	22f8      	movs	r2, #248	; 0xf8
 80020f2:	4393      	bics	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	00da      	lsls	r2, r3, #3
 80020fc:	4b81      	ldr	r3, [pc, #516]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	635a      	str	r2, [r3, #52]	; 0x34
 8002102:	e034      	b.n	800216e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	3305      	adds	r3, #5
 800210a:	d111      	bne.n	8002130 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800210c:	4b7d      	ldr	r3, [pc, #500]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800210e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002110:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002112:	2104      	movs	r1, #4
 8002114:	438a      	bics	r2, r1
 8002116:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002118:	4b7a      	ldr	r3, [pc, #488]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800211a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211c:	22f8      	movs	r2, #248	; 0xf8
 800211e:	4393      	bics	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	00da      	lsls	r2, r3, #3
 8002128:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800212a:	430a      	orrs	r2, r1
 800212c:	635a      	str	r2, [r3, #52]	; 0x34
 800212e:	e01e      	b.n	800216e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002130:	4b74      	ldr	r3, [pc, #464]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002134:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002136:	2104      	movs	r1, #4
 8002138:	430a      	orrs	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800213c:	4b71      	ldr	r3, [pc, #452]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800213e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002140:	4b70      	ldr	r3, [pc, #448]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002142:	2101      	movs	r1, #1
 8002144:	438a      	bics	r2, r1
 8002146:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7fe fc30 	bl	80009ac <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002152:	f7fe fc2b 	bl	80009ac <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e111      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002164:	4b67      	ldr	r3, [pc, #412]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002168:	2202      	movs	r2, #2
 800216a:	4013      	ands	r3, r2
 800216c:	d1f1      	bne.n	8002152 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2220      	movs	r2, #32
 8002174:	4013      	ands	r3, r2
 8002176:	d05c      	beq.n	8002232 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002178:	4b62      	ldr	r3, [pc, #392]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	220c      	movs	r2, #12
 800217e:	4013      	ands	r3, r2
 8002180:	2b0c      	cmp	r3, #12
 8002182:	d00e      	beq.n	80021a2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002184:	4b5f      	ldr	r3, [pc, #380]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	220c      	movs	r2, #12
 800218a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800218c:	2b08      	cmp	r3, #8
 800218e:	d114      	bne.n	80021ba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002190:	4b5c      	ldr	r3, [pc, #368]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	23c0      	movs	r3, #192	; 0xc0
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	401a      	ands	r2, r3
 800219a:	23c0      	movs	r3, #192	; 0xc0
 800219c:	025b      	lsls	r3, r3, #9
 800219e:	429a      	cmp	r2, r3
 80021a0:	d10b      	bne.n	80021ba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021a2:	4b58      	ldr	r3, [pc, #352]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80021a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	025b      	lsls	r3, r3, #9
 80021aa:	4013      	ands	r3, r2
 80021ac:	d040      	beq.n	8002230 <HAL_RCC_OscConfig+0x5a8>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d03c      	beq.n	8002230 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0e6      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01b      	beq.n	80021fa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021c2:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80021c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c6:	4b4f      	ldr	r3, [pc, #316]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0249      	lsls	r1, r1, #9
 80021cc:	430a      	orrs	r2, r1
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe fbec 	bl	80009ac <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021da:	f7fe fbe7 	bl	80009ac <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0cd      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021ec:	4b45      	ldr	r3, [pc, #276]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	025b      	lsls	r3, r3, #9
 80021f4:	4013      	ands	r3, r2
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x552>
 80021f8:	e01b      	b.n	8002232 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021fa:	4b42      	ldr	r3, [pc, #264]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80021fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002200:	4943      	ldr	r1, [pc, #268]	; (8002310 <HAL_RCC_OscConfig+0x688>)
 8002202:	400a      	ands	r2, r1
 8002204:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe fbd1 	bl	80009ac <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002210:	f7fe fbcc 	bl	80009ac <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0b2      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	025b      	lsls	r3, r3, #9
 800222a:	4013      	ands	r3, r2
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x588>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002230:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d100      	bne.n	800223c <HAL_RCC_OscConfig+0x5b4>
 800223a:	e0a4      	b.n	8002386 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	220c      	movs	r2, #12
 8002242:	4013      	ands	r3, r2
 8002244:	2b08      	cmp	r3, #8
 8002246:	d100      	bne.n	800224a <HAL_RCC_OscConfig+0x5c2>
 8002248:	e078      	b.n	800233c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	2b02      	cmp	r3, #2
 8002250:	d14c      	bne.n	80022ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002258:	492e      	ldr	r1, [pc, #184]	; (8002314 <HAL_RCC_OscConfig+0x68c>)
 800225a:	400a      	ands	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe fba5 	bl	80009ac <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe fba0 	bl	80009ac <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e086      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	049b      	lsls	r3, r3, #18
 8002282:	4013      	ands	r3, r2
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002286:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	220f      	movs	r2, #15
 800228c:	4393      	bics	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <HAL_RCC_OscConfig+0x690>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	431a      	orrs	r2, r3
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	0449      	lsls	r1, r1, #17
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fb73 	bl	80009ac <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe fb6e 	bl	80009ac <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e054      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	049b      	lsls	r3, r3, #18
 80022e6:	4013      	ands	r3, r2
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x644>
 80022ea:	e04c      	b.n	8002386 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022f2:	4908      	ldr	r1, [pc, #32]	; (8002314 <HAL_RCC_OscConfig+0x68c>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe fb58 	bl	80009ac <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x6a6>
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	40021000 	.word	0x40021000
 8002308:	00001388 	.word	0x00001388
 800230c:	efffffff 	.word	0xefffffff
 8002310:	fffeffff 	.word	0xfffeffff
 8002314:	feffffff 	.word	0xfeffffff
 8002318:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fb46 	bl	80009ac <HAL_GetTick>
 8002320:	0002      	movs	r2, r0
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e02c      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_RCC_OscConfig+0x708>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	049b      	lsls	r3, r3, #18
 8002336:	4013      	ands	r3, r2
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x694>
 800233a:	e024      	b.n	8002386 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e01f      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCC_OscConfig+0x708>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_RCC_OscConfig+0x708>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	23c0      	movs	r3, #192	; 0xc0
 8002358:	025b      	lsls	r3, r3, #9
 800235a:	401a      	ands	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	429a      	cmp	r2, r3
 8002362:	d10e      	bne.n	8002382 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	220f      	movs	r2, #15
 8002368:	401a      	ands	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d107      	bne.n	8002382 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	23f0      	movs	r3, #240	; 0xf0
 8002376:	039b      	lsls	r3, r3, #14
 8002378:	401a      	ands	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b008      	add	sp, #32
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000

08002394 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0bf      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b61      	ldr	r3, [pc, #388]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d911      	bls.n	80023da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b5e      	ldr	r3, [pc, #376]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0a6      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d015      	beq.n	8002410 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2204      	movs	r2, #4
 80023ea:	4013      	ands	r3, r2
 80023ec:	d006      	beq.n	80023fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023ee:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 80023f4:	21e0      	movs	r1, #224	; 0xe0
 80023f6:	00c9      	lsls	r1, r1, #3
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	22f0      	movs	r2, #240	; 0xf0
 8002402:	4393      	bics	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	4013      	ands	r3, r2
 8002418:	d04c      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	029b      	lsls	r3, r3, #10
 800242a:	4013      	ands	r3, r2
 800242c:	d120      	bne.n	8002470 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07a      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	049b      	lsls	r3, r3, #18
 8002442:	4013      	ands	r3, r2
 8002444:	d114      	bne.n	8002470 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e06e      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	025b      	lsls	r3, r3, #9
 800245a:	4013      	ands	r3, r2
 800245c:	d108      	bne.n	8002470 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e062      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	4b34      	ldr	r3, [pc, #208]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e05b      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2203      	movs	r2, #3
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002484:	f7fe fa92 	bl	80009ac <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248c:	e009      	b.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248e:	f7fe fa8d 	bl	80009ac <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	4a27      	ldr	r2, [pc, #156]	; (8002538 <HAL_RCC_ClockConfig+0x1a4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e042      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	220c      	movs	r2, #12
 80024a8:	401a      	ands	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1ec      	bne.n	800248e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d211      	bcs.n	80024e6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4393      	bics	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e020      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2204      	movs	r2, #4
 80024ec:	4013      	ands	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <HAL_RCC_ClockConfig+0x1a8>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002504:	f000 f820 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002508:	0001      	movs	r1, r0
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	220f      	movs	r2, #15
 8002512:	4013      	ands	r3, r2
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_RCC_ClockConfig+0x1ac>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	000a      	movs	r2, r1
 800251a:	40da      	lsrs	r2, r3
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1b0>)
 800251e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002520:	2000      	movs	r0, #0
 8002522:	f7fe f9fd 	bl	8000920 <HAL_InitTick>
  
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b004      	add	sp, #16
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40022000 	.word	0x40022000
 8002534:	40021000 	.word	0x40021000
 8002538:	00001388 	.word	0x00001388
 800253c:	fffff8ff 	.word	0xfffff8ff
 8002540:	0800304c 	.word	0x0800304c
 8002544:	20000000 	.word	0x20000000

08002548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b08f      	sub	sp, #60	; 0x3c
 800254c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800254e:	2314      	movs	r3, #20
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	4a37      	ldr	r2, [pc, #220]	; (8002630 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002554:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002556:	c313      	stmia	r3!, {r0, r1, r4}
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	4a35      	ldr	r2, [pc, #212]	; (8002634 <HAL_RCC_GetSysClockFreq+0xec>)
 8002560:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002562:	c313      	stmia	r3!, {r0, r1, r4}
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002570:	2300      	movs	r3, #0
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <HAL_RCC_GetSysClockFreq+0xf0>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	220c      	movs	r2, #12
 8002586:	4013      	ands	r3, r2
 8002588:	2b08      	cmp	r3, #8
 800258a:	d006      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0x52>
 800258c:	2b0c      	cmp	r3, #12
 800258e:	d043      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0xd0>
 8002590:	2b04      	cmp	r3, #4
 8002592:	d144      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002598:	e044      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	0c9b      	lsrs	r3, r3, #18
 800259e:	220f      	movs	r2, #15
 80025a0:	4013      	ands	r3, r2
 80025a2:	2214      	movs	r2, #20
 80025a4:	18ba      	adds	r2, r7, r2
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_RCC_GetSysClockFreq+0xf0>)
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	220f      	movs	r2, #15
 80025b0:	4013      	ands	r3, r2
 80025b2:	1d3a      	adds	r2, r7, #4
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ba:	23c0      	movs	r3, #192	; 0xc0
 80025bc:	025b      	lsls	r3, r3, #9
 80025be:	401a      	ands	r2, r3
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	025b      	lsls	r3, r3, #9
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d109      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ca:	481c      	ldr	r0, [pc, #112]	; (800263c <HAL_RCC_GetSysClockFreq+0xf4>)
 80025cc:	f7fd fd9c 	bl	8000108 <__udivsi3>
 80025d0:	0003      	movs	r3, r0
 80025d2:	001a      	movs	r2, r3
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	4353      	muls	r3, r2
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
 80025da:	e01a      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80025dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025de:	23c0      	movs	r3, #192	; 0xc0
 80025e0:	025b      	lsls	r3, r3, #9
 80025e2:	401a      	ands	r2, r3
 80025e4:	23c0      	movs	r3, #192	; 0xc0
 80025e6:	025b      	lsls	r3, r3, #9
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d109      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ee:	4814      	ldr	r0, [pc, #80]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025f0:	f7fd fd8a 	bl	8000108 <__udivsi3>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	4353      	muls	r3, r2
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
 80025fe:	e008      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002602:	480e      	ldr	r0, [pc, #56]	; (800263c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002604:	f7fd fd80 	bl	8000108 <__udivsi3>
 8002608:	0003      	movs	r3, r0
 800260a:	001a      	movs	r2, r3
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	4353      	muls	r3, r2
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002616:	e005      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800261c:	e002      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002622:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b00f      	add	sp, #60	; 0x3c
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	0800302c 	.word	0x0800302c
 8002634:	0800303c 	.word	0x0800303c
 8002638:	40021000 	.word	0x40021000
 800263c:	007a1200 	.word	0x007a1200
 8002640:	02dc6c00 	.word	0x02dc6c00

08002644 <__errno>:
 8002644:	4b01      	ldr	r3, [pc, #4]	; (800264c <__errno+0x8>)
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	4770      	bx	lr
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	2000000c 	.word	0x2000000c

08002650 <__libc_init_array>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	2600      	movs	r6, #0
 8002654:	4d0c      	ldr	r5, [pc, #48]	; (8002688 <__libc_init_array+0x38>)
 8002656:	4c0d      	ldr	r4, [pc, #52]	; (800268c <__libc_init_array+0x3c>)
 8002658:	1b64      	subs	r4, r4, r5
 800265a:	10a4      	asrs	r4, r4, #2
 800265c:	42a6      	cmp	r6, r4
 800265e:	d109      	bne.n	8002674 <__libc_init_array+0x24>
 8002660:	2600      	movs	r6, #0
 8002662:	f000 fcc9 	bl	8002ff8 <_init>
 8002666:	4d0a      	ldr	r5, [pc, #40]	; (8002690 <__libc_init_array+0x40>)
 8002668:	4c0a      	ldr	r4, [pc, #40]	; (8002694 <__libc_init_array+0x44>)
 800266a:	1b64      	subs	r4, r4, r5
 800266c:	10a4      	asrs	r4, r4, #2
 800266e:	42a6      	cmp	r6, r4
 8002670:	d105      	bne.n	800267e <__libc_init_array+0x2e>
 8002672:	bd70      	pop	{r4, r5, r6, pc}
 8002674:	00b3      	lsls	r3, r6, #2
 8002676:	58eb      	ldr	r3, [r5, r3]
 8002678:	4798      	blx	r3
 800267a:	3601      	adds	r6, #1
 800267c:	e7ee      	b.n	800265c <__libc_init_array+0xc>
 800267e:	00b3      	lsls	r3, r6, #2
 8002680:	58eb      	ldr	r3, [r5, r3]
 8002682:	4798      	blx	r3
 8002684:	3601      	adds	r6, #1
 8002686:	e7f2      	b.n	800266e <__libc_init_array+0x1e>
 8002688:	080030c0 	.word	0x080030c0
 800268c:	080030c0 	.word	0x080030c0
 8002690:	080030c0 	.word	0x080030c0
 8002694:	080030c4 	.word	0x080030c4

08002698 <memset>:
 8002698:	0003      	movs	r3, r0
 800269a:	1812      	adds	r2, r2, r0
 800269c:	4293      	cmp	r3, r2
 800269e:	d100      	bne.n	80026a2 <memset+0xa>
 80026a0:	4770      	bx	lr
 80026a2:	7019      	strb	r1, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	e7f9      	b.n	800269c <memset+0x4>

080026a8 <_puts_r>:
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	0005      	movs	r5, r0
 80026ac:	000e      	movs	r6, r1
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d004      	beq.n	80026bc <_puts_r+0x14>
 80026b2:	6983      	ldr	r3, [r0, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <_puts_r+0x14>
 80026b8:	f000 fa24 	bl	8002b04 <__sinit>
 80026bc:	69ab      	ldr	r3, [r5, #24]
 80026be:	68ac      	ldr	r4, [r5, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <_puts_r+0x22>
 80026c4:	0028      	movs	r0, r5
 80026c6:	f000 fa1d 	bl	8002b04 <__sinit>
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <_puts_r+0xb4>)
 80026cc:	429c      	cmp	r4, r3
 80026ce:	d10f      	bne.n	80026f0 <_puts_r+0x48>
 80026d0:	686c      	ldr	r4, [r5, #4]
 80026d2:	89a3      	ldrh	r3, [r4, #12]
 80026d4:	071b      	lsls	r3, r3, #28
 80026d6:	d502      	bpl.n	80026de <_puts_r+0x36>
 80026d8:	6923      	ldr	r3, [r4, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d11f      	bne.n	800271e <_puts_r+0x76>
 80026de:	0021      	movs	r1, r4
 80026e0:	0028      	movs	r0, r5
 80026e2:	f000 f8a1 	bl	8002828 <__swsetup_r>
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d019      	beq.n	800271e <_puts_r+0x76>
 80026ea:	2001      	movs	r0, #1
 80026ec:	4240      	negs	r0, r0
 80026ee:	bd70      	pop	{r4, r5, r6, pc}
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <_puts_r+0xb8>)
 80026f2:	429c      	cmp	r4, r3
 80026f4:	d101      	bne.n	80026fa <_puts_r+0x52>
 80026f6:	68ac      	ldr	r4, [r5, #8]
 80026f8:	e7eb      	b.n	80026d2 <_puts_r+0x2a>
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <_puts_r+0xbc>)
 80026fc:	429c      	cmp	r4, r3
 80026fe:	d1e8      	bne.n	80026d2 <_puts_r+0x2a>
 8002700:	68ec      	ldr	r4, [r5, #12]
 8002702:	e7e6      	b.n	80026d2 <_puts_r+0x2a>
 8002704:	3601      	adds	r6, #1
 8002706:	60a3      	str	r3, [r4, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	da04      	bge.n	8002716 <_puts_r+0x6e>
 800270c:	69a2      	ldr	r2, [r4, #24]
 800270e:	429a      	cmp	r2, r3
 8002710:	dc16      	bgt.n	8002740 <_puts_r+0x98>
 8002712:	290a      	cmp	r1, #10
 8002714:	d014      	beq.n	8002740 <_puts_r+0x98>
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	6022      	str	r2, [r4, #0]
 800271c:	7019      	strb	r1, [r3, #0]
 800271e:	68a3      	ldr	r3, [r4, #8]
 8002720:	7831      	ldrb	r1, [r6, #0]
 8002722:	3b01      	subs	r3, #1
 8002724:	2900      	cmp	r1, #0
 8002726:	d1ed      	bne.n	8002704 <_puts_r+0x5c>
 8002728:	60a3      	str	r3, [r4, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	da0f      	bge.n	800274e <_puts_r+0xa6>
 800272e:	0022      	movs	r2, r4
 8002730:	310a      	adds	r1, #10
 8002732:	0028      	movs	r0, r5
 8002734:	f000 f822 	bl	800277c <__swbuf_r>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d0d6      	beq.n	80026ea <_puts_r+0x42>
 800273c:	200a      	movs	r0, #10
 800273e:	e7d6      	b.n	80026ee <_puts_r+0x46>
 8002740:	0022      	movs	r2, r4
 8002742:	0028      	movs	r0, r5
 8002744:	f000 f81a 	bl	800277c <__swbuf_r>
 8002748:	1c43      	adds	r3, r0, #1
 800274a:	d1e8      	bne.n	800271e <_puts_r+0x76>
 800274c:	e7cd      	b.n	80026ea <_puts_r+0x42>
 800274e:	200a      	movs	r0, #10
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	6022      	str	r2, [r4, #0]
 8002756:	7018      	strb	r0, [r3, #0]
 8002758:	e7c9      	b.n	80026ee <_puts_r+0x46>
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	08003080 	.word	0x08003080
 8002760:	080030a0 	.word	0x080030a0
 8002764:	08003060 	.word	0x08003060

08002768 <puts>:
 8002768:	b510      	push	{r4, lr}
 800276a:	4b03      	ldr	r3, [pc, #12]	; (8002778 <puts+0x10>)
 800276c:	0001      	movs	r1, r0
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	f7ff ff9a 	bl	80026a8 <_puts_r>
 8002774:	bd10      	pop	{r4, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	2000000c 	.word	0x2000000c

0800277c <__swbuf_r>:
 800277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277e:	0005      	movs	r5, r0
 8002780:	000e      	movs	r6, r1
 8002782:	0014      	movs	r4, r2
 8002784:	2800      	cmp	r0, #0
 8002786:	d004      	beq.n	8002792 <__swbuf_r+0x16>
 8002788:	6983      	ldr	r3, [r0, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <__swbuf_r+0x16>
 800278e:	f000 f9b9 	bl	8002b04 <__sinit>
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <__swbuf_r+0xa0>)
 8002794:	429c      	cmp	r4, r3
 8002796:	d12d      	bne.n	80027f4 <__swbuf_r+0x78>
 8002798:	686c      	ldr	r4, [r5, #4]
 800279a:	69a3      	ldr	r3, [r4, #24]
 800279c:	60a3      	str	r3, [r4, #8]
 800279e:	89a3      	ldrh	r3, [r4, #12]
 80027a0:	071b      	lsls	r3, r3, #28
 80027a2:	d531      	bpl.n	8002808 <__swbuf_r+0x8c>
 80027a4:	6923      	ldr	r3, [r4, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d02e      	beq.n	8002808 <__swbuf_r+0x8c>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	6922      	ldr	r2, [r4, #16]
 80027ae:	b2f7      	uxtb	r7, r6
 80027b0:	1a98      	subs	r0, r3, r2
 80027b2:	6963      	ldr	r3, [r4, #20]
 80027b4:	b2f6      	uxtb	r6, r6
 80027b6:	4283      	cmp	r3, r0
 80027b8:	dc05      	bgt.n	80027c6 <__swbuf_r+0x4a>
 80027ba:	0021      	movs	r1, r4
 80027bc:	0028      	movs	r0, r5
 80027be:	f000 f933 	bl	8002a28 <_fflush_r>
 80027c2:	2800      	cmp	r0, #0
 80027c4:	d126      	bne.n	8002814 <__swbuf_r+0x98>
 80027c6:	68a3      	ldr	r3, [r4, #8]
 80027c8:	3001      	adds	r0, #1
 80027ca:	3b01      	subs	r3, #1
 80027cc:	60a3      	str	r3, [r4, #8]
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	6022      	str	r2, [r4, #0]
 80027d4:	701f      	strb	r7, [r3, #0]
 80027d6:	6963      	ldr	r3, [r4, #20]
 80027d8:	4283      	cmp	r3, r0
 80027da:	d004      	beq.n	80027e6 <__swbuf_r+0x6a>
 80027dc:	89a3      	ldrh	r3, [r4, #12]
 80027de:	07db      	lsls	r3, r3, #31
 80027e0:	d51a      	bpl.n	8002818 <__swbuf_r+0x9c>
 80027e2:	2e0a      	cmp	r6, #10
 80027e4:	d118      	bne.n	8002818 <__swbuf_r+0x9c>
 80027e6:	0021      	movs	r1, r4
 80027e8:	0028      	movs	r0, r5
 80027ea:	f000 f91d 	bl	8002a28 <_fflush_r>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d012      	beq.n	8002818 <__swbuf_r+0x9c>
 80027f2:	e00f      	b.n	8002814 <__swbuf_r+0x98>
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <__swbuf_r+0xa4>)
 80027f6:	429c      	cmp	r4, r3
 80027f8:	d101      	bne.n	80027fe <__swbuf_r+0x82>
 80027fa:	68ac      	ldr	r4, [r5, #8]
 80027fc:	e7cd      	b.n	800279a <__swbuf_r+0x1e>
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <__swbuf_r+0xa8>)
 8002800:	429c      	cmp	r4, r3
 8002802:	d1ca      	bne.n	800279a <__swbuf_r+0x1e>
 8002804:	68ec      	ldr	r4, [r5, #12]
 8002806:	e7c8      	b.n	800279a <__swbuf_r+0x1e>
 8002808:	0021      	movs	r1, r4
 800280a:	0028      	movs	r0, r5
 800280c:	f000 f80c 	bl	8002828 <__swsetup_r>
 8002810:	2800      	cmp	r0, #0
 8002812:	d0ca      	beq.n	80027aa <__swbuf_r+0x2e>
 8002814:	2601      	movs	r6, #1
 8002816:	4276      	negs	r6, r6
 8002818:	0030      	movs	r0, r6
 800281a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800281c:	08003080 	.word	0x08003080
 8002820:	080030a0 	.word	0x080030a0
 8002824:	08003060 	.word	0x08003060

08002828 <__swsetup_r>:
 8002828:	4b36      	ldr	r3, [pc, #216]	; (8002904 <__swsetup_r+0xdc>)
 800282a:	b570      	push	{r4, r5, r6, lr}
 800282c:	681d      	ldr	r5, [r3, #0]
 800282e:	0006      	movs	r6, r0
 8002830:	000c      	movs	r4, r1
 8002832:	2d00      	cmp	r5, #0
 8002834:	d005      	beq.n	8002842 <__swsetup_r+0x1a>
 8002836:	69ab      	ldr	r3, [r5, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <__swsetup_r+0x1a>
 800283c:	0028      	movs	r0, r5
 800283e:	f000 f961 	bl	8002b04 <__sinit>
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <__swsetup_r+0xe0>)
 8002844:	429c      	cmp	r4, r3
 8002846:	d10f      	bne.n	8002868 <__swsetup_r+0x40>
 8002848:	686c      	ldr	r4, [r5, #4]
 800284a:	230c      	movs	r3, #12
 800284c:	5ee2      	ldrsh	r2, [r4, r3]
 800284e:	b293      	uxth	r3, r2
 8002850:	0719      	lsls	r1, r3, #28
 8002852:	d42d      	bmi.n	80028b0 <__swsetup_r+0x88>
 8002854:	06d9      	lsls	r1, r3, #27
 8002856:	d411      	bmi.n	800287c <__swsetup_r+0x54>
 8002858:	2309      	movs	r3, #9
 800285a:	2001      	movs	r0, #1
 800285c:	6033      	str	r3, [r6, #0]
 800285e:	3337      	adds	r3, #55	; 0x37
 8002860:	4313      	orrs	r3, r2
 8002862:	81a3      	strh	r3, [r4, #12]
 8002864:	4240      	negs	r0, r0
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <__swsetup_r+0xe4>)
 800286a:	429c      	cmp	r4, r3
 800286c:	d101      	bne.n	8002872 <__swsetup_r+0x4a>
 800286e:	68ac      	ldr	r4, [r5, #8]
 8002870:	e7eb      	b.n	800284a <__swsetup_r+0x22>
 8002872:	4b27      	ldr	r3, [pc, #156]	; (8002910 <__swsetup_r+0xe8>)
 8002874:	429c      	cmp	r4, r3
 8002876:	d1e8      	bne.n	800284a <__swsetup_r+0x22>
 8002878:	68ec      	ldr	r4, [r5, #12]
 800287a:	e7e6      	b.n	800284a <__swsetup_r+0x22>
 800287c:	075b      	lsls	r3, r3, #29
 800287e:	d513      	bpl.n	80028a8 <__swsetup_r+0x80>
 8002880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002882:	2900      	cmp	r1, #0
 8002884:	d008      	beq.n	8002898 <__swsetup_r+0x70>
 8002886:	0023      	movs	r3, r4
 8002888:	3344      	adds	r3, #68	; 0x44
 800288a:	4299      	cmp	r1, r3
 800288c:	d002      	beq.n	8002894 <__swsetup_r+0x6c>
 800288e:	0030      	movs	r0, r6
 8002890:	f000 fa38 	bl	8002d04 <_free_r>
 8002894:	2300      	movs	r3, #0
 8002896:	6363      	str	r3, [r4, #52]	; 0x34
 8002898:	2224      	movs	r2, #36	; 0x24
 800289a:	89a3      	ldrh	r3, [r4, #12]
 800289c:	4393      	bics	r3, r2
 800289e:	81a3      	strh	r3, [r4, #12]
 80028a0:	2300      	movs	r3, #0
 80028a2:	6063      	str	r3, [r4, #4]
 80028a4:	6923      	ldr	r3, [r4, #16]
 80028a6:	6023      	str	r3, [r4, #0]
 80028a8:	2308      	movs	r3, #8
 80028aa:	89a2      	ldrh	r2, [r4, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	81a3      	strh	r3, [r4, #12]
 80028b0:	6923      	ldr	r3, [r4, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10b      	bne.n	80028ce <__swsetup_r+0xa6>
 80028b6:	21a0      	movs	r1, #160	; 0xa0
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	89a3      	ldrh	r3, [r4, #12]
 80028bc:	0089      	lsls	r1, r1, #2
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	400b      	ands	r3, r1
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d003      	beq.n	80028ce <__swsetup_r+0xa6>
 80028c6:	0021      	movs	r1, r4
 80028c8:	0030      	movs	r0, r6
 80028ca:	f000 f9d7 	bl	8002c7c <__smakebuf_r>
 80028ce:	2301      	movs	r3, #1
 80028d0:	89a2      	ldrh	r2, [r4, #12]
 80028d2:	4013      	ands	r3, r2
 80028d4:	d011      	beq.n	80028fa <__swsetup_r+0xd2>
 80028d6:	2300      	movs	r3, #0
 80028d8:	60a3      	str	r3, [r4, #8]
 80028da:	6963      	ldr	r3, [r4, #20]
 80028dc:	425b      	negs	r3, r3
 80028de:	61a3      	str	r3, [r4, #24]
 80028e0:	2000      	movs	r0, #0
 80028e2:	6923      	ldr	r3, [r4, #16]
 80028e4:	4283      	cmp	r3, r0
 80028e6:	d1be      	bne.n	8002866 <__swsetup_r+0x3e>
 80028e8:	230c      	movs	r3, #12
 80028ea:	5ee2      	ldrsh	r2, [r4, r3]
 80028ec:	0613      	lsls	r3, r2, #24
 80028ee:	d5ba      	bpl.n	8002866 <__swsetup_r+0x3e>
 80028f0:	2340      	movs	r3, #64	; 0x40
 80028f2:	4313      	orrs	r3, r2
 80028f4:	81a3      	strh	r3, [r4, #12]
 80028f6:	3801      	subs	r0, #1
 80028f8:	e7b5      	b.n	8002866 <__swsetup_r+0x3e>
 80028fa:	0792      	lsls	r2, r2, #30
 80028fc:	d400      	bmi.n	8002900 <__swsetup_r+0xd8>
 80028fe:	6963      	ldr	r3, [r4, #20]
 8002900:	60a3      	str	r3, [r4, #8]
 8002902:	e7ed      	b.n	80028e0 <__swsetup_r+0xb8>
 8002904:	2000000c 	.word	0x2000000c
 8002908:	08003080 	.word	0x08003080
 800290c:	080030a0 	.word	0x080030a0
 8002910:	08003060 	.word	0x08003060

08002914 <__sflush_r>:
 8002914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002916:	898a      	ldrh	r2, [r1, #12]
 8002918:	0005      	movs	r5, r0
 800291a:	000c      	movs	r4, r1
 800291c:	0713      	lsls	r3, r2, #28
 800291e:	d460      	bmi.n	80029e2 <__sflush_r+0xce>
 8002920:	684b      	ldr	r3, [r1, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	dc04      	bgt.n	8002930 <__sflush_r+0x1c>
 8002926:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	dc01      	bgt.n	8002930 <__sflush_r+0x1c>
 800292c:	2000      	movs	r0, #0
 800292e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002930:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002932:	2f00      	cmp	r7, #0
 8002934:	d0fa      	beq.n	800292c <__sflush_r+0x18>
 8002936:	2300      	movs	r3, #0
 8002938:	682e      	ldr	r6, [r5, #0]
 800293a:	602b      	str	r3, [r5, #0]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	015b      	lsls	r3, r3, #5
 8002940:	6a21      	ldr	r1, [r4, #32]
 8002942:	401a      	ands	r2, r3
 8002944:	d034      	beq.n	80029b0 <__sflush_r+0x9c>
 8002946:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002948:	89a3      	ldrh	r3, [r4, #12]
 800294a:	075b      	lsls	r3, r3, #29
 800294c:	d506      	bpl.n	800295c <__sflush_r+0x48>
 800294e:	6863      	ldr	r3, [r4, #4]
 8002950:	1ac0      	subs	r0, r0, r3
 8002952:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <__sflush_r+0x48>
 8002958:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800295a:	1ac0      	subs	r0, r0, r3
 800295c:	0002      	movs	r2, r0
 800295e:	6a21      	ldr	r1, [r4, #32]
 8002960:	2300      	movs	r3, #0
 8002962:	0028      	movs	r0, r5
 8002964:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002966:	47b8      	blx	r7
 8002968:	89a1      	ldrh	r1, [r4, #12]
 800296a:	1c43      	adds	r3, r0, #1
 800296c:	d106      	bne.n	800297c <__sflush_r+0x68>
 800296e:	682b      	ldr	r3, [r5, #0]
 8002970:	2b1d      	cmp	r3, #29
 8002972:	d830      	bhi.n	80029d6 <__sflush_r+0xc2>
 8002974:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <__sflush_r+0x110>)
 8002976:	40da      	lsrs	r2, r3
 8002978:	07d3      	lsls	r3, r2, #31
 800297a:	d52c      	bpl.n	80029d6 <__sflush_r+0xc2>
 800297c:	2300      	movs	r3, #0
 800297e:	6063      	str	r3, [r4, #4]
 8002980:	6923      	ldr	r3, [r4, #16]
 8002982:	6023      	str	r3, [r4, #0]
 8002984:	04cb      	lsls	r3, r1, #19
 8002986:	d505      	bpl.n	8002994 <__sflush_r+0x80>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d102      	bne.n	8002992 <__sflush_r+0x7e>
 800298c:	682b      	ldr	r3, [r5, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d100      	bne.n	8002994 <__sflush_r+0x80>
 8002992:	6560      	str	r0, [r4, #84]	; 0x54
 8002994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002996:	602e      	str	r6, [r5, #0]
 8002998:	2900      	cmp	r1, #0
 800299a:	d0c7      	beq.n	800292c <__sflush_r+0x18>
 800299c:	0023      	movs	r3, r4
 800299e:	3344      	adds	r3, #68	; 0x44
 80029a0:	4299      	cmp	r1, r3
 80029a2:	d002      	beq.n	80029aa <__sflush_r+0x96>
 80029a4:	0028      	movs	r0, r5
 80029a6:	f000 f9ad 	bl	8002d04 <_free_r>
 80029aa:	2000      	movs	r0, #0
 80029ac:	6360      	str	r0, [r4, #52]	; 0x34
 80029ae:	e7be      	b.n	800292e <__sflush_r+0x1a>
 80029b0:	2301      	movs	r3, #1
 80029b2:	0028      	movs	r0, r5
 80029b4:	47b8      	blx	r7
 80029b6:	1c43      	adds	r3, r0, #1
 80029b8:	d1c6      	bne.n	8002948 <__sflush_r+0x34>
 80029ba:	682b      	ldr	r3, [r5, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0c3      	beq.n	8002948 <__sflush_r+0x34>
 80029c0:	2b1d      	cmp	r3, #29
 80029c2:	d001      	beq.n	80029c8 <__sflush_r+0xb4>
 80029c4:	2b16      	cmp	r3, #22
 80029c6:	d101      	bne.n	80029cc <__sflush_r+0xb8>
 80029c8:	602e      	str	r6, [r5, #0]
 80029ca:	e7af      	b.n	800292c <__sflush_r+0x18>
 80029cc:	2340      	movs	r3, #64	; 0x40
 80029ce:	89a2      	ldrh	r2, [r4, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	81a3      	strh	r3, [r4, #12]
 80029d4:	e7ab      	b.n	800292e <__sflush_r+0x1a>
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	430b      	orrs	r3, r1
 80029da:	2001      	movs	r0, #1
 80029dc:	81a3      	strh	r3, [r4, #12]
 80029de:	4240      	negs	r0, r0
 80029e0:	e7a5      	b.n	800292e <__sflush_r+0x1a>
 80029e2:	690f      	ldr	r7, [r1, #16]
 80029e4:	2f00      	cmp	r7, #0
 80029e6:	d0a1      	beq.n	800292c <__sflush_r+0x18>
 80029e8:	680b      	ldr	r3, [r1, #0]
 80029ea:	600f      	str	r7, [r1, #0]
 80029ec:	1bdb      	subs	r3, r3, r7
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	2300      	movs	r3, #0
 80029f2:	0792      	lsls	r2, r2, #30
 80029f4:	d100      	bne.n	80029f8 <__sflush_r+0xe4>
 80029f6:	694b      	ldr	r3, [r1, #20]
 80029f8:	60a3      	str	r3, [r4, #8]
 80029fa:	9b01      	ldr	r3, [sp, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	dc00      	bgt.n	8002a02 <__sflush_r+0xee>
 8002a00:	e794      	b.n	800292c <__sflush_r+0x18>
 8002a02:	9b01      	ldr	r3, [sp, #4]
 8002a04:	003a      	movs	r2, r7
 8002a06:	6a21      	ldr	r1, [r4, #32]
 8002a08:	0028      	movs	r0, r5
 8002a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a0c:	47b0      	blx	r6
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	dc03      	bgt.n	8002a1a <__sflush_r+0x106>
 8002a12:	2340      	movs	r3, #64	; 0x40
 8002a14:	89a2      	ldrh	r2, [r4, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	e7df      	b.n	80029da <__sflush_r+0xc6>
 8002a1a:	9b01      	ldr	r3, [sp, #4]
 8002a1c:	183f      	adds	r7, r7, r0
 8002a1e:	1a1b      	subs	r3, r3, r0
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	e7ea      	b.n	80029fa <__sflush_r+0xe6>
 8002a24:	20400001 	.word	0x20400001

08002a28 <_fflush_r>:
 8002a28:	690b      	ldr	r3, [r1, #16]
 8002a2a:	b570      	push	{r4, r5, r6, lr}
 8002a2c:	0005      	movs	r5, r0
 8002a2e:	000c      	movs	r4, r1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <_fflush_r+0x10>
 8002a34:	2000      	movs	r0, #0
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d004      	beq.n	8002a46 <_fflush_r+0x1e>
 8002a3c:	6983      	ldr	r3, [r0, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <_fflush_r+0x1e>
 8002a42:	f000 f85f 	bl	8002b04 <__sinit>
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <_fflush_r+0x4c>)
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	d109      	bne.n	8002a60 <_fflush_r+0x38>
 8002a4c:	686c      	ldr	r4, [r5, #4]
 8002a4e:	220c      	movs	r2, #12
 8002a50:	5ea3      	ldrsh	r3, [r4, r2]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ee      	beq.n	8002a34 <_fflush_r+0xc>
 8002a56:	0021      	movs	r1, r4
 8002a58:	0028      	movs	r0, r5
 8002a5a:	f7ff ff5b 	bl	8002914 <__sflush_r>
 8002a5e:	e7ea      	b.n	8002a36 <_fflush_r+0xe>
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <_fflush_r+0x50>)
 8002a62:	429c      	cmp	r4, r3
 8002a64:	d101      	bne.n	8002a6a <_fflush_r+0x42>
 8002a66:	68ac      	ldr	r4, [r5, #8]
 8002a68:	e7f1      	b.n	8002a4e <_fflush_r+0x26>
 8002a6a:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <_fflush_r+0x54>)
 8002a6c:	429c      	cmp	r4, r3
 8002a6e:	d1ee      	bne.n	8002a4e <_fflush_r+0x26>
 8002a70:	68ec      	ldr	r4, [r5, #12]
 8002a72:	e7ec      	b.n	8002a4e <_fflush_r+0x26>
 8002a74:	08003080 	.word	0x08003080
 8002a78:	080030a0 	.word	0x080030a0
 8002a7c:	08003060 	.word	0x08003060

08002a80 <std>:
 8002a80:	2300      	movs	r3, #0
 8002a82:	b510      	push	{r4, lr}
 8002a84:	0004      	movs	r4, r0
 8002a86:	6003      	str	r3, [r0, #0]
 8002a88:	6043      	str	r3, [r0, #4]
 8002a8a:	6083      	str	r3, [r0, #8]
 8002a8c:	8181      	strh	r1, [r0, #12]
 8002a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8002a90:	81c2      	strh	r2, [r0, #14]
 8002a92:	6103      	str	r3, [r0, #16]
 8002a94:	6143      	str	r3, [r0, #20]
 8002a96:	6183      	str	r3, [r0, #24]
 8002a98:	0019      	movs	r1, r3
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	305c      	adds	r0, #92	; 0x5c
 8002a9e:	f7ff fdfb 	bl	8002698 <memset>
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <std+0x38>)
 8002aa4:	6224      	str	r4, [r4, #32]
 8002aa6:	6263      	str	r3, [r4, #36]	; 0x24
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <std+0x3c>)
 8002aaa:	62a3      	str	r3, [r4, #40]	; 0x28
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <std+0x40>)
 8002aae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <std+0x44>)
 8002ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8002ab4:	bd10      	pop	{r4, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	08002e79 	.word	0x08002e79
 8002abc:	08002ea1 	.word	0x08002ea1
 8002ac0:	08002ed9 	.word	0x08002ed9
 8002ac4:	08002f05 	.word	0x08002f05

08002ac8 <_cleanup_r>:
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	4902      	ldr	r1, [pc, #8]	; (8002ad4 <_cleanup_r+0xc>)
 8002acc:	f000 f88c 	bl	8002be8 <_fwalk_reent>
 8002ad0:	bd10      	pop	{r4, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	08002a29 	.word	0x08002a29

08002ad8 <__sfmoreglue>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	2568      	movs	r5, #104	; 0x68
 8002adc:	1e4a      	subs	r2, r1, #1
 8002ade:	4355      	muls	r5, r2
 8002ae0:	000e      	movs	r6, r1
 8002ae2:	0029      	movs	r1, r5
 8002ae4:	3174      	adds	r1, #116	; 0x74
 8002ae6:	f000 f957 	bl	8002d98 <_malloc_r>
 8002aea:	1e04      	subs	r4, r0, #0
 8002aec:	d008      	beq.n	8002b00 <__sfmoreglue+0x28>
 8002aee:	2100      	movs	r1, #0
 8002af0:	002a      	movs	r2, r5
 8002af2:	6001      	str	r1, [r0, #0]
 8002af4:	6046      	str	r6, [r0, #4]
 8002af6:	300c      	adds	r0, #12
 8002af8:	60a0      	str	r0, [r4, #8]
 8002afa:	3268      	adds	r2, #104	; 0x68
 8002afc:	f7ff fdcc 	bl	8002698 <memset>
 8002b00:	0020      	movs	r0, r4
 8002b02:	bd70      	pop	{r4, r5, r6, pc}

08002b04 <__sinit>:
 8002b04:	6983      	ldr	r3, [r0, #24]
 8002b06:	b513      	push	{r0, r1, r4, lr}
 8002b08:	0004      	movs	r4, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d128      	bne.n	8002b60 <__sinit+0x5c>
 8002b0e:	6483      	str	r3, [r0, #72]	; 0x48
 8002b10:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002b12:	6503      	str	r3, [r0, #80]	; 0x50
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <__sinit+0x60>)
 8002b16:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <__sinit+0x64>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6282      	str	r2, [r0, #40]	; 0x28
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	4298      	cmp	r0, r3
 8002b20:	d101      	bne.n	8002b26 <__sinit+0x22>
 8002b22:	2301      	movs	r3, #1
 8002b24:	6183      	str	r3, [r0, #24]
 8002b26:	0020      	movs	r0, r4
 8002b28:	f000 f820 	bl	8002b6c <__sfp>
 8002b2c:	6060      	str	r0, [r4, #4]
 8002b2e:	0020      	movs	r0, r4
 8002b30:	f000 f81c 	bl	8002b6c <__sfp>
 8002b34:	60a0      	str	r0, [r4, #8]
 8002b36:	0020      	movs	r0, r4
 8002b38:	f000 f818 	bl	8002b6c <__sfp>
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	60e0      	str	r0, [r4, #12]
 8002b40:	2104      	movs	r1, #4
 8002b42:	6860      	ldr	r0, [r4, #4]
 8002b44:	f7ff ff9c 	bl	8002a80 <std>
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2109      	movs	r1, #9
 8002b4c:	68a0      	ldr	r0, [r4, #8]
 8002b4e:	f7ff ff97 	bl	8002a80 <std>
 8002b52:	2202      	movs	r2, #2
 8002b54:	2112      	movs	r1, #18
 8002b56:	68e0      	ldr	r0, [r4, #12]
 8002b58:	f7ff ff92 	bl	8002a80 <std>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	61a3      	str	r3, [r4, #24]
 8002b60:	bd13      	pop	{r0, r1, r4, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	0800305c 	.word	0x0800305c
 8002b68:	08002ac9 	.word	0x08002ac9

08002b6c <__sfp>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <__sfp+0x74>)
 8002b70:	0007      	movs	r7, r0
 8002b72:	681e      	ldr	r6, [r3, #0]
 8002b74:	69b3      	ldr	r3, [r6, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d102      	bne.n	8002b80 <__sfp+0x14>
 8002b7a:	0030      	movs	r0, r6
 8002b7c:	f7ff ffc2 	bl	8002b04 <__sinit>
 8002b80:	3648      	adds	r6, #72	; 0x48
 8002b82:	68b4      	ldr	r4, [r6, #8]
 8002b84:	6873      	ldr	r3, [r6, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	d504      	bpl.n	8002b94 <__sfp+0x28>
 8002b8a:	6833      	ldr	r3, [r6, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <__sfp+0x34>
 8002b90:	6836      	ldr	r6, [r6, #0]
 8002b92:	e7f6      	b.n	8002b82 <__sfp+0x16>
 8002b94:	220c      	movs	r2, #12
 8002b96:	5ea5      	ldrsh	r5, [r4, r2]
 8002b98:	2d00      	cmp	r5, #0
 8002b9a:	d00d      	beq.n	8002bb8 <__sfp+0x4c>
 8002b9c:	3468      	adds	r4, #104	; 0x68
 8002b9e:	e7f2      	b.n	8002b86 <__sfp+0x1a>
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	0038      	movs	r0, r7
 8002ba4:	f7ff ff98 	bl	8002ad8 <__sfmoreglue>
 8002ba8:	6030      	str	r0, [r6, #0]
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d1f0      	bne.n	8002b90 <__sfp+0x24>
 8002bae:	230c      	movs	r3, #12
 8002bb0:	0004      	movs	r4, r0
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	0020      	movs	r0, r4
 8002bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb8:	0020      	movs	r0, r4
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <__sfp+0x78>)
 8002bbc:	6665      	str	r5, [r4, #100]	; 0x64
 8002bbe:	6025      	str	r5, [r4, #0]
 8002bc0:	6065      	str	r5, [r4, #4]
 8002bc2:	60a5      	str	r5, [r4, #8]
 8002bc4:	60e3      	str	r3, [r4, #12]
 8002bc6:	6125      	str	r5, [r4, #16]
 8002bc8:	6165      	str	r5, [r4, #20]
 8002bca:	61a5      	str	r5, [r4, #24]
 8002bcc:	2208      	movs	r2, #8
 8002bce:	0029      	movs	r1, r5
 8002bd0:	305c      	adds	r0, #92	; 0x5c
 8002bd2:	f7ff fd61 	bl	8002698 <memset>
 8002bd6:	6365      	str	r5, [r4, #52]	; 0x34
 8002bd8:	63a5      	str	r5, [r4, #56]	; 0x38
 8002bda:	64a5      	str	r5, [r4, #72]	; 0x48
 8002bdc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002bde:	e7e9      	b.n	8002bb4 <__sfp+0x48>
 8002be0:	0800305c 	.word	0x0800305c
 8002be4:	ffff0001 	.word	0xffff0001

08002be8 <_fwalk_reent>:
 8002be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bea:	0004      	movs	r4, r0
 8002bec:	0007      	movs	r7, r0
 8002bee:	2600      	movs	r6, #0
 8002bf0:	9101      	str	r1, [sp, #4]
 8002bf2:	3448      	adds	r4, #72	; 0x48
 8002bf4:	2c00      	cmp	r4, #0
 8002bf6:	d101      	bne.n	8002bfc <_fwalk_reent+0x14>
 8002bf8:	0030      	movs	r0, r6
 8002bfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002bfc:	6863      	ldr	r3, [r4, #4]
 8002bfe:	68a5      	ldr	r5, [r4, #8]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	9b00      	ldr	r3, [sp, #0]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	d501      	bpl.n	8002c0e <_fwalk_reent+0x26>
 8002c0a:	6824      	ldr	r4, [r4, #0]
 8002c0c:	e7f2      	b.n	8002bf4 <_fwalk_reent+0xc>
 8002c0e:	89ab      	ldrh	r3, [r5, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d908      	bls.n	8002c26 <_fwalk_reent+0x3e>
 8002c14:	220e      	movs	r2, #14
 8002c16:	5eab      	ldrsh	r3, [r5, r2]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d004      	beq.n	8002c26 <_fwalk_reent+0x3e>
 8002c1c:	0029      	movs	r1, r5
 8002c1e:	0038      	movs	r0, r7
 8002c20:	9b01      	ldr	r3, [sp, #4]
 8002c22:	4798      	blx	r3
 8002c24:	4306      	orrs	r6, r0
 8002c26:	3568      	adds	r5, #104	; 0x68
 8002c28:	e7eb      	b.n	8002c02 <_fwalk_reent+0x1a>
	...

08002c2c <__swhatbuf_r>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	000e      	movs	r6, r1
 8002c30:	001d      	movs	r5, r3
 8002c32:	230e      	movs	r3, #14
 8002c34:	5ec9      	ldrsh	r1, [r1, r3]
 8002c36:	b096      	sub	sp, #88	; 0x58
 8002c38:	0014      	movs	r4, r2
 8002c3a:	2900      	cmp	r1, #0
 8002c3c:	da07      	bge.n	8002c4e <__swhatbuf_r+0x22>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	602b      	str	r3, [r5, #0]
 8002c42:	89b3      	ldrh	r3, [r6, #12]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	d411      	bmi.n	8002c6c <__swhatbuf_r+0x40>
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	e00f      	b.n	8002c6e <__swhatbuf_r+0x42>
 8002c4e:	466a      	mov	r2, sp
 8002c50:	f000 f984 	bl	8002f5c <_fstat_r>
 8002c54:	2800      	cmp	r0, #0
 8002c56:	dbf2      	blt.n	8002c3e <__swhatbuf_r+0x12>
 8002c58:	22f0      	movs	r2, #240	; 0xf0
 8002c5a:	9b01      	ldr	r3, [sp, #4]
 8002c5c:	0212      	lsls	r2, r2, #8
 8002c5e:	4013      	ands	r3, r2
 8002c60:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <__swhatbuf_r+0x4c>)
 8002c62:	189b      	adds	r3, r3, r2
 8002c64:	425a      	negs	r2, r3
 8002c66:	4153      	adcs	r3, r2
 8002c68:	602b      	str	r3, [r5, #0]
 8002c6a:	e7ed      	b.n	8002c48 <__swhatbuf_r+0x1c>
 8002c6c:	2340      	movs	r3, #64	; 0x40
 8002c6e:	2000      	movs	r0, #0
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	b016      	add	sp, #88	; 0x58
 8002c74:	bd70      	pop	{r4, r5, r6, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	ffffe000 	.word	0xffffe000

08002c7c <__smakebuf_r>:
 8002c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c7e:	2602      	movs	r6, #2
 8002c80:	898b      	ldrh	r3, [r1, #12]
 8002c82:	0005      	movs	r5, r0
 8002c84:	000c      	movs	r4, r1
 8002c86:	4233      	tst	r3, r6
 8002c88:	d006      	beq.n	8002c98 <__smakebuf_r+0x1c>
 8002c8a:	0023      	movs	r3, r4
 8002c8c:	3347      	adds	r3, #71	; 0x47
 8002c8e:	6023      	str	r3, [r4, #0]
 8002c90:	6123      	str	r3, [r4, #16]
 8002c92:	2301      	movs	r3, #1
 8002c94:	6163      	str	r3, [r4, #20]
 8002c96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002c98:	ab01      	add	r3, sp, #4
 8002c9a:	466a      	mov	r2, sp
 8002c9c:	f7ff ffc6 	bl	8002c2c <__swhatbuf_r>
 8002ca0:	9900      	ldr	r1, [sp, #0]
 8002ca2:	0007      	movs	r7, r0
 8002ca4:	0028      	movs	r0, r5
 8002ca6:	f000 f877 	bl	8002d98 <_malloc_r>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d108      	bne.n	8002cc0 <__smakebuf_r+0x44>
 8002cae:	220c      	movs	r2, #12
 8002cb0:	5ea3      	ldrsh	r3, [r4, r2]
 8002cb2:	059a      	lsls	r2, r3, #22
 8002cb4:	d4ef      	bmi.n	8002c96 <__smakebuf_r+0x1a>
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	4393      	bics	r3, r2
 8002cba:	431e      	orrs	r6, r3
 8002cbc:	81a6      	strh	r6, [r4, #12]
 8002cbe:	e7e4      	b.n	8002c8a <__smakebuf_r+0xe>
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <__smakebuf_r+0x84>)
 8002cc2:	62ab      	str	r3, [r5, #40]	; 0x28
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	89a2      	ldrh	r2, [r4, #12]
 8002cc8:	6020      	str	r0, [r4, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	81a3      	strh	r3, [r4, #12]
 8002cce:	9b00      	ldr	r3, [sp, #0]
 8002cd0:	6120      	str	r0, [r4, #16]
 8002cd2:	6163      	str	r3, [r4, #20]
 8002cd4:	9b01      	ldr	r3, [sp, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <__smakebuf_r+0x7a>
 8002cda:	230e      	movs	r3, #14
 8002cdc:	5ee1      	ldrsh	r1, [r4, r3]
 8002cde:	0028      	movs	r0, r5
 8002ce0:	f000 f94e 	bl	8002f80 <_isatty_r>
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	d006      	beq.n	8002cf6 <__smakebuf_r+0x7a>
 8002ce8:	2203      	movs	r2, #3
 8002cea:	89a3      	ldrh	r3, [r4, #12]
 8002cec:	4393      	bics	r3, r2
 8002cee:	001a      	movs	r2, r3
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	81a3      	strh	r3, [r4, #12]
 8002cf6:	89a0      	ldrh	r0, [r4, #12]
 8002cf8:	4338      	orrs	r0, r7
 8002cfa:	81a0      	strh	r0, [r4, #12]
 8002cfc:	e7cb      	b.n	8002c96 <__smakebuf_r+0x1a>
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	08002ac9 	.word	0x08002ac9

08002d04 <_free_r>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	0005      	movs	r5, r0
 8002d08:	2900      	cmp	r1, #0
 8002d0a:	d010      	beq.n	8002d2e <_free_r+0x2a>
 8002d0c:	1f0c      	subs	r4, r1, #4
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	da00      	bge.n	8002d16 <_free_r+0x12>
 8002d14:	18e4      	adds	r4, r4, r3
 8002d16:	0028      	movs	r0, r5
 8002d18:	f000 f958 	bl	8002fcc <__malloc_lock>
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <_free_r+0x90>)
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <_free_r+0x2c>
 8002d24:	6063      	str	r3, [r4, #4]
 8002d26:	6014      	str	r4, [r2, #0]
 8002d28:	0028      	movs	r0, r5
 8002d2a:	f000 f950 	bl	8002fce <__malloc_unlock>
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
 8002d30:	42a3      	cmp	r3, r4
 8002d32:	d909      	bls.n	8002d48 <_free_r+0x44>
 8002d34:	6821      	ldr	r1, [r4, #0]
 8002d36:	1860      	adds	r0, r4, r1
 8002d38:	4283      	cmp	r3, r0
 8002d3a:	d1f3      	bne.n	8002d24 <_free_r+0x20>
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	1841      	adds	r1, r0, r1
 8002d42:	6021      	str	r1, [r4, #0]
 8002d44:	e7ee      	b.n	8002d24 <_free_r+0x20>
 8002d46:	0013      	movs	r3, r2
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	2a00      	cmp	r2, #0
 8002d4c:	d001      	beq.n	8002d52 <_free_r+0x4e>
 8002d4e:	42a2      	cmp	r2, r4
 8002d50:	d9f9      	bls.n	8002d46 <_free_r+0x42>
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	1858      	adds	r0, r3, r1
 8002d56:	42a0      	cmp	r0, r4
 8002d58:	d10b      	bne.n	8002d72 <_free_r+0x6e>
 8002d5a:	6820      	ldr	r0, [r4, #0]
 8002d5c:	1809      	adds	r1, r1, r0
 8002d5e:	1858      	adds	r0, r3, r1
 8002d60:	6019      	str	r1, [r3, #0]
 8002d62:	4282      	cmp	r2, r0
 8002d64:	d1e0      	bne.n	8002d28 <_free_r+0x24>
 8002d66:	6810      	ldr	r0, [r2, #0]
 8002d68:	6852      	ldr	r2, [r2, #4]
 8002d6a:	1841      	adds	r1, r0, r1
 8002d6c:	6019      	str	r1, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	e7da      	b.n	8002d28 <_free_r+0x24>
 8002d72:	42a0      	cmp	r0, r4
 8002d74:	d902      	bls.n	8002d7c <_free_r+0x78>
 8002d76:	230c      	movs	r3, #12
 8002d78:	602b      	str	r3, [r5, #0]
 8002d7a:	e7d5      	b.n	8002d28 <_free_r+0x24>
 8002d7c:	6821      	ldr	r1, [r4, #0]
 8002d7e:	1860      	adds	r0, r4, r1
 8002d80:	4282      	cmp	r2, r0
 8002d82:	d103      	bne.n	8002d8c <_free_r+0x88>
 8002d84:	6810      	ldr	r0, [r2, #0]
 8002d86:	6852      	ldr	r2, [r2, #4]
 8002d88:	1841      	adds	r1, r0, r1
 8002d8a:	6021      	str	r1, [r4, #0]
 8002d8c:	6062      	str	r2, [r4, #4]
 8002d8e:	605c      	str	r4, [r3, #4]
 8002d90:	e7ca      	b.n	8002d28 <_free_r+0x24>
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	2000009c 	.word	0x2000009c

08002d98 <_malloc_r>:
 8002d98:	2303      	movs	r3, #3
 8002d9a:	b570      	push	{r4, r5, r6, lr}
 8002d9c:	1ccd      	adds	r5, r1, #3
 8002d9e:	439d      	bics	r5, r3
 8002da0:	3508      	adds	r5, #8
 8002da2:	0006      	movs	r6, r0
 8002da4:	2d0c      	cmp	r5, #12
 8002da6:	d21e      	bcs.n	8002de6 <_malloc_r+0x4e>
 8002da8:	250c      	movs	r5, #12
 8002daa:	42a9      	cmp	r1, r5
 8002dac:	d81d      	bhi.n	8002dea <_malloc_r+0x52>
 8002dae:	0030      	movs	r0, r6
 8002db0:	f000 f90c 	bl	8002fcc <__malloc_lock>
 8002db4:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <_malloc_r+0xb4>)
 8002db6:	6814      	ldr	r4, [r2, #0]
 8002db8:	0021      	movs	r1, r4
 8002dba:	2900      	cmp	r1, #0
 8002dbc:	d119      	bne.n	8002df2 <_malloc_r+0x5a>
 8002dbe:	4c24      	ldr	r4, [pc, #144]	; (8002e50 <_malloc_r+0xb8>)
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <_malloc_r+0x36>
 8002dc6:	0030      	movs	r0, r6
 8002dc8:	f000 f844 	bl	8002e54 <_sbrk_r>
 8002dcc:	6020      	str	r0, [r4, #0]
 8002dce:	0029      	movs	r1, r5
 8002dd0:	0030      	movs	r0, r6
 8002dd2:	f000 f83f 	bl	8002e54 <_sbrk_r>
 8002dd6:	1c43      	adds	r3, r0, #1
 8002dd8:	d12b      	bne.n	8002e32 <_malloc_r+0x9a>
 8002dda:	230c      	movs	r3, #12
 8002ddc:	0030      	movs	r0, r6
 8002dde:	6033      	str	r3, [r6, #0]
 8002de0:	f000 f8f5 	bl	8002fce <__malloc_unlock>
 8002de4:	e003      	b.n	8002dee <_malloc_r+0x56>
 8002de6:	2d00      	cmp	r5, #0
 8002de8:	dadf      	bge.n	8002daa <_malloc_r+0x12>
 8002dea:	230c      	movs	r3, #12
 8002dec:	6033      	str	r3, [r6, #0]
 8002dee:	2000      	movs	r0, #0
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
 8002df2:	680b      	ldr	r3, [r1, #0]
 8002df4:	1b5b      	subs	r3, r3, r5
 8002df6:	d419      	bmi.n	8002e2c <_malloc_r+0x94>
 8002df8:	2b0b      	cmp	r3, #11
 8002dfa:	d903      	bls.n	8002e04 <_malloc_r+0x6c>
 8002dfc:	600b      	str	r3, [r1, #0]
 8002dfe:	18cc      	adds	r4, r1, r3
 8002e00:	6025      	str	r5, [r4, #0]
 8002e02:	e003      	b.n	8002e0c <_malloc_r+0x74>
 8002e04:	684b      	ldr	r3, [r1, #4]
 8002e06:	428c      	cmp	r4, r1
 8002e08:	d10d      	bne.n	8002e26 <_malloc_r+0x8e>
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	0030      	movs	r0, r6
 8002e0e:	f000 f8de 	bl	8002fce <__malloc_unlock>
 8002e12:	0020      	movs	r0, r4
 8002e14:	2207      	movs	r2, #7
 8002e16:	300b      	adds	r0, #11
 8002e18:	1d23      	adds	r3, r4, #4
 8002e1a:	4390      	bics	r0, r2
 8002e1c:	1ac3      	subs	r3, r0, r3
 8002e1e:	d0e7      	beq.n	8002df0 <_malloc_r+0x58>
 8002e20:	425a      	negs	r2, r3
 8002e22:	50e2      	str	r2, [r4, r3]
 8002e24:	e7e4      	b.n	8002df0 <_malloc_r+0x58>
 8002e26:	6063      	str	r3, [r4, #4]
 8002e28:	000c      	movs	r4, r1
 8002e2a:	e7ef      	b.n	8002e0c <_malloc_r+0x74>
 8002e2c:	000c      	movs	r4, r1
 8002e2e:	6849      	ldr	r1, [r1, #4]
 8002e30:	e7c3      	b.n	8002dba <_malloc_r+0x22>
 8002e32:	2303      	movs	r3, #3
 8002e34:	1cc4      	adds	r4, r0, #3
 8002e36:	439c      	bics	r4, r3
 8002e38:	42a0      	cmp	r0, r4
 8002e3a:	d0e1      	beq.n	8002e00 <_malloc_r+0x68>
 8002e3c:	1a21      	subs	r1, r4, r0
 8002e3e:	0030      	movs	r0, r6
 8002e40:	f000 f808 	bl	8002e54 <_sbrk_r>
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d1db      	bne.n	8002e00 <_malloc_r+0x68>
 8002e48:	e7c7      	b.n	8002dda <_malloc_r+0x42>
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	2000009c 	.word	0x2000009c
 8002e50:	200000a0 	.word	0x200000a0

08002e54 <_sbrk_r>:
 8002e54:	2300      	movs	r3, #0
 8002e56:	b570      	push	{r4, r5, r6, lr}
 8002e58:	4c06      	ldr	r4, [pc, #24]	; (8002e74 <_sbrk_r+0x20>)
 8002e5a:	0005      	movs	r5, r0
 8002e5c:	0008      	movs	r0, r1
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	f7fd fccc 	bl	80007fc <_sbrk>
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d103      	bne.n	8002e70 <_sbrk_r+0x1c>
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d000      	beq.n	8002e70 <_sbrk_r+0x1c>
 8002e6e:	602b      	str	r3, [r5, #0]
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	200000d0 	.word	0x200000d0

08002e78 <__sread>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	000c      	movs	r4, r1
 8002e7c:	250e      	movs	r5, #14
 8002e7e:	5f49      	ldrsh	r1, [r1, r5]
 8002e80:	f000 f8a6 	bl	8002fd0 <_read_r>
 8002e84:	2800      	cmp	r0, #0
 8002e86:	db03      	blt.n	8002e90 <__sread+0x18>
 8002e88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e8a:	181b      	adds	r3, r3, r0
 8002e8c:	6563      	str	r3, [r4, #84]	; 0x54
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	4a02      	ldr	r2, [pc, #8]	; (8002e9c <__sread+0x24>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	81a3      	strh	r3, [r4, #12]
 8002e98:	e7f9      	b.n	8002e8e <__sread+0x16>
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	ffffefff 	.word	0xffffefff

08002ea0 <__swrite>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	001f      	movs	r7, r3
 8002ea4:	898b      	ldrh	r3, [r1, #12]
 8002ea6:	0005      	movs	r5, r0
 8002ea8:	000c      	movs	r4, r1
 8002eaa:	0016      	movs	r6, r2
 8002eac:	05db      	lsls	r3, r3, #23
 8002eae:	d505      	bpl.n	8002ebc <__swrite+0x1c>
 8002eb0:	230e      	movs	r3, #14
 8002eb2:	5ec9      	ldrsh	r1, [r1, r3]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	f000 f874 	bl	8002fa4 <_lseek_r>
 8002ebc:	89a3      	ldrh	r3, [r4, #12]
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <__swrite+0x34>)
 8002ec0:	0028      	movs	r0, r5
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	81a3      	strh	r3, [r4, #12]
 8002ec6:	0032      	movs	r2, r6
 8002ec8:	230e      	movs	r3, #14
 8002eca:	5ee1      	ldrsh	r1, [r4, r3]
 8002ecc:	003b      	movs	r3, r7
 8002ece:	f000 f81f 	bl	8002f10 <_write_r>
 8002ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed4:	ffffefff 	.word	0xffffefff

08002ed8 <__sseek>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	000c      	movs	r4, r1
 8002edc:	250e      	movs	r5, #14
 8002ede:	5f49      	ldrsh	r1, [r1, r5]
 8002ee0:	f000 f860 	bl	8002fa4 <_lseek_r>
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	1c42      	adds	r2, r0, #1
 8002ee8:	d103      	bne.n	8002ef2 <__sseek+0x1a>
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <__sseek+0x28>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	81a3      	strh	r3, [r4, #12]
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	0152      	lsls	r2, r2, #5
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	81a3      	strh	r3, [r4, #12]
 8002efa:	6560      	str	r0, [r4, #84]	; 0x54
 8002efc:	e7f8      	b.n	8002ef0 <__sseek+0x18>
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	ffffefff 	.word	0xffffefff

08002f04 <__sclose>:
 8002f04:	b510      	push	{r4, lr}
 8002f06:	230e      	movs	r3, #14
 8002f08:	5ec9      	ldrsh	r1, [r1, r3]
 8002f0a:	f000 f815 	bl	8002f38 <_close_r>
 8002f0e:	bd10      	pop	{r4, pc}

08002f10 <_write_r>:
 8002f10:	b570      	push	{r4, r5, r6, lr}
 8002f12:	0005      	movs	r5, r0
 8002f14:	0008      	movs	r0, r1
 8002f16:	0011      	movs	r1, r2
 8002f18:	2200      	movs	r2, #0
 8002f1a:	4c06      	ldr	r4, [pc, #24]	; (8002f34 <_write_r+0x24>)
 8002f1c:	6022      	str	r2, [r4, #0]
 8002f1e:	001a      	movs	r2, r3
 8002f20:	f7fd fc23 	bl	800076a <_write>
 8002f24:	1c43      	adds	r3, r0, #1
 8002f26:	d103      	bne.n	8002f30 <_write_r+0x20>
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d000      	beq.n	8002f30 <_write_r+0x20>
 8002f2e:	602b      	str	r3, [r5, #0]
 8002f30:	bd70      	pop	{r4, r5, r6, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	200000d0 	.word	0x200000d0

08002f38 <_close_r>:
 8002f38:	2300      	movs	r3, #0
 8002f3a:	b570      	push	{r4, r5, r6, lr}
 8002f3c:	4c06      	ldr	r4, [pc, #24]	; (8002f58 <_close_r+0x20>)
 8002f3e:	0005      	movs	r5, r0
 8002f40:	0008      	movs	r0, r1
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	f7fd fc2d 	bl	80007a2 <_close>
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d103      	bne.n	8002f54 <_close_r+0x1c>
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d000      	beq.n	8002f54 <_close_r+0x1c>
 8002f52:	602b      	str	r3, [r5, #0]
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	200000d0 	.word	0x200000d0

08002f5c <_fstat_r>:
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	b570      	push	{r4, r5, r6, lr}
 8002f60:	4c06      	ldr	r4, [pc, #24]	; (8002f7c <_fstat_r+0x20>)
 8002f62:	0005      	movs	r5, r0
 8002f64:	0008      	movs	r0, r1
 8002f66:	0011      	movs	r1, r2
 8002f68:	6023      	str	r3, [r4, #0]
 8002f6a:	f7fd fc24 	bl	80007b6 <_fstat>
 8002f6e:	1c43      	adds	r3, r0, #1
 8002f70:	d103      	bne.n	8002f7a <_fstat_r+0x1e>
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d000      	beq.n	8002f7a <_fstat_r+0x1e>
 8002f78:	602b      	str	r3, [r5, #0]
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	200000d0 	.word	0x200000d0

08002f80 <_isatty_r>:
 8002f80:	2300      	movs	r3, #0
 8002f82:	b570      	push	{r4, r5, r6, lr}
 8002f84:	4c06      	ldr	r4, [pc, #24]	; (8002fa0 <_isatty_r+0x20>)
 8002f86:	0005      	movs	r5, r0
 8002f88:	0008      	movs	r0, r1
 8002f8a:	6023      	str	r3, [r4, #0]
 8002f8c:	f7fd fc21 	bl	80007d2 <_isatty>
 8002f90:	1c43      	adds	r3, r0, #1
 8002f92:	d103      	bne.n	8002f9c <_isatty_r+0x1c>
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d000      	beq.n	8002f9c <_isatty_r+0x1c>
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	bd70      	pop	{r4, r5, r6, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	200000d0 	.word	0x200000d0

08002fa4 <_lseek_r>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	0005      	movs	r5, r0
 8002fa8:	0008      	movs	r0, r1
 8002faa:	0011      	movs	r1, r2
 8002fac:	2200      	movs	r2, #0
 8002fae:	4c06      	ldr	r4, [pc, #24]	; (8002fc8 <_lseek_r+0x24>)
 8002fb0:	6022      	str	r2, [r4, #0]
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	f7fd fc16 	bl	80007e4 <_lseek>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d103      	bne.n	8002fc4 <_lseek_r+0x20>
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d000      	beq.n	8002fc4 <_lseek_r+0x20>
 8002fc2:	602b      	str	r3, [r5, #0]
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	200000d0 	.word	0x200000d0

08002fcc <__malloc_lock>:
 8002fcc:	4770      	bx	lr

08002fce <__malloc_unlock>:
 8002fce:	4770      	bx	lr

08002fd0 <_read_r>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	0005      	movs	r5, r0
 8002fd4:	0008      	movs	r0, r1
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	2200      	movs	r2, #0
 8002fda:	4c06      	ldr	r4, [pc, #24]	; (8002ff4 <_read_r+0x24>)
 8002fdc:	6022      	str	r2, [r4, #0]
 8002fde:	001a      	movs	r2, r3
 8002fe0:	f7fd fba6 	bl	8000730 <_read>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d103      	bne.n	8002ff0 <_read_r+0x20>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d000      	beq.n	8002ff0 <_read_r+0x20>
 8002fee:	602b      	str	r3, [r5, #0]
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	200000d0 	.word	0x200000d0

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

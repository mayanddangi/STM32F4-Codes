
TFTLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002514  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003b62c  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803dcd8  0803dcd8  0004dcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803dce0  0803dce0  0004dce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0803dce4  0803dce4  0004dce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000040  20000000  0803dce8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000080  20000040  0803dd28  00050040  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000c0  0803dd28  000500c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00050040  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010a99  00000000  00000000  00050070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001efb  00000000  00000000  00060b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e98  00000000  00000000  00062a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006b8  00000000  00000000  000668a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000788  00000000  00000000  00066f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000168f4  00000000  00000000  000676e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008202  00000000  00000000  0007dfd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00082ebe  00000000  00000000  000861d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00109094  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000011dc  00000000  00000000  00109110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002694 	.word	0x08002694

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	08002694 	.word	0x08002694

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Display_Round_Icon_40x40>:
#include "ILI9341_Driver.h"
#include "icons_included.h"
#include "ironman.h"

void Display_Round_Icon_40x40(const unsigned int icon[], unsigned int x0, unsigned int y0, unsigned int r)
{
 80004d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	4681      	mov	r9, r0
 80004e0:	4688      	mov	r8, r1
 80004e2:	4692      	mov	sl, r2
 80004e4:	461a      	mov	r2, r3
	uint64_t k = 0;

    ILI9341_Draw_Circle(x0, y0, r, BLUE, 1);
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	231f      	movs	r3, #31
 80004ec:	4651      	mov	r1, sl
 80004ee:	4640      	mov	r0, r8
 80004f0:	f001 fb0a 	bl	8001b08 <ILI9341_Draw_Circle>

	for(uint32_t j = y0 - 19; j < y0 + 21; j++)
 80004f4:	f1aa 0513 	sub.w	r5, sl, #19
	uint64_t k = 0;
 80004f8:	2600      	movs	r6, #0
 80004fa:	2700      	movs	r7, #0
	for(uint32_t j = y0 - 19; j < y0 + 21; j++)
 80004fc:	e00f      	b.n	800051e <Display_Round_Icon_40x40+0x46>
	{
		for(uint32_t i = x0 -19; i < x0 + 21; i++)
		{
				ILI9341_Draw_Pixel(i, j, icon[k]);
 80004fe:	00b3      	lsls	r3, r6, #2
 8000500:	f859 2003 	ldr.w	r2, [r9, r3]
 8000504:	4629      	mov	r1, r5
 8000506:	4620      	mov	r0, r4
 8000508:	f001 fa5a 	bl	80019c0 <ILI9341_Draw_Pixel>
				k++;
 800050c:	3601      	adds	r6, #1
 800050e:	f147 0700 	adc.w	r7, r7, #0
		for(uint32_t i = x0 -19; i < x0 + 21; i++)
 8000512:	3401      	adds	r4, #1
 8000514:	f108 0315 	add.w	r3, r8, #21
 8000518:	42a3      	cmp	r3, r4
 800051a:	d8f0      	bhi.n	80004fe <Display_Round_Icon_40x40+0x26>
	for(uint32_t j = y0 - 19; j < y0 + 21; j++)
 800051c:	3501      	adds	r5, #1
 800051e:	f10a 0315 	add.w	r3, sl, #21
 8000522:	42ab      	cmp	r3, r5
 8000524:	d902      	bls.n	800052c <Display_Round_Icon_40x40+0x54>
		for(uint32_t i = x0 -19; i < x0 + 21; i++)
 8000526:	f1a8 0413 	sub.w	r4, r8, #19
 800052a:	e7f3      	b.n	8000514 <Display_Round_Icon_40x40+0x3c>
		}
	}
}
 800052c:	b002      	add	sp, #8
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000532 <Display_Square_Icon_40x40>:

void Display_Square_Icon_40x40(const unsigned int icon[], unsigned int x0, unsigned int y0)
{
 8000532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000536:	4681      	mov	r9, r0
 8000538:	4688      	mov	r8, r1
 800053a:	4692      	mov	sl, r2
	uint64_t k = 0;

	for(uint32_t j = y0; j < y0 + 40; j++)
 800053c:	4615      	mov	r5, r2
	uint64_t k = 0;
 800053e:	2600      	movs	r6, #0
 8000540:	2700      	movs	r7, #0
	for(uint32_t j = y0; j < y0 + 40; j++)
 8000542:	e00f      	b.n	8000564 <Display_Square_Icon_40x40+0x32>
	{
		for(uint32_t i = x0; i < x0 + 40; i++)
		{
				ILI9341_Draw_Pixel(i, j, icon[k]);
 8000544:	00b3      	lsls	r3, r6, #2
 8000546:	f859 2003 	ldr.w	r2, [r9, r3]
 800054a:	4629      	mov	r1, r5
 800054c:	4620      	mov	r0, r4
 800054e:	f001 fa37 	bl	80019c0 <ILI9341_Draw_Pixel>
				k++;
 8000552:	3601      	adds	r6, #1
 8000554:	f147 0700 	adc.w	r7, r7, #0
		for(uint32_t i = x0; i < x0 + 40; i++)
 8000558:	3401      	adds	r4, #1
 800055a:	f108 0328 	add.w	r3, r8, #40	; 0x28
 800055e:	42a3      	cmp	r3, r4
 8000560:	d8f0      	bhi.n	8000544 <Display_Square_Icon_40x40+0x12>
	for(uint32_t j = y0; j < y0 + 40; j++)
 8000562:	3501      	adds	r5, #1
 8000564:	f10a 0328 	add.w	r3, sl, #40	; 0x28
 8000568:	42ab      	cmp	r3, r5
 800056a:	d901      	bls.n	8000570 <Display_Square_Icon_40x40+0x3e>
		for(uint32_t i = x0; i < x0 + 40; i++)
 800056c:	4644      	mov	r4, r8
 800056e:	e7f4      	b.n	800055a <Display_Square_Icon_40x40+0x28>
		}
	}
}
 8000570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000574 <Display_Menu>:

void Display_Menu()
{
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b083      	sub	sp, #12

	ILI9341_Set_Rotation(3);
 8000578:	2003      	movs	r0, #3
 800057a:	f001 f913 	bl	80017a4 <ILI9341_Set_Rotation>

	/* Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 800057e:	2000      	movs	r0, #0
 8000580:	f001 fa08 	bl	8001994 <ILI9341_Fill_Screen>
	HAL_Delay(500);
 8000584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000588:	f000 f932 	bl	80007f0 <HAL_Delay>

	/* Counting through all the bytes of those icons */
	uint64_t k = 0;
	/* Draw border for the menu */
    ILI9341_Draw_Empty_Rectangle(YELLOW, 10, 30, 310, 230);
 800058c:	23e6      	movs	r3, #230	; 0xe6
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	f44f 739b 	mov.w	r3, #310	; 0x136
 8000594:	221e      	movs	r2, #30
 8000596:	210a      	movs	r1, #10
 8000598:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800059c:	f001 fa90 	bl	8001ac0 <ILI9341_Draw_Empty_Rectangle>

    /* Write something */
	ILI9341_Draw_String(10,10,WHITE,BLACK,"Welcome!",2);
 80005a0:	2302      	movs	r3, #2
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <Display_Menu+0xcc>)
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2300      	movs	r3, #0
 80005aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ae:	210a      	movs	r1, #10
 80005b0:	4608      	mov	r0, r1
 80005b2:	f001 fc03 	bl	8001dbc <ILI9341_Draw_String>

	/* Battery Icon in the top right corner */
    for(uint32_t j = 10; j < 20; j++) {
 80005b6:	250a      	movs	r5, #10
	uint64_t k = 0;
 80005b8:	2600      	movs	r6, #0
 80005ba:	2700      	movs	r7, #0
    for(uint32_t j = 10; j < 20; j++) {
 80005bc:	e00e      	b.n	80005dc <Display_Menu+0x68>
    	for(uint32_t i = 280; i < 300; i++) {
				ILI9341_Draw_Pixel(i, j, battery_icon[k]);
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <Display_Menu+0xd0>)
 80005c0:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 80005c4:	4629      	mov	r1, r5
 80005c6:	4620      	mov	r0, r4
 80005c8:	f001 f9fa 	bl	80019c0 <ILI9341_Draw_Pixel>
				k++;
 80005cc:	3601      	adds	r6, #1
 80005ce:	f147 0700 	adc.w	r7, r7, #0
    	for(uint32_t i = 280; i < 300; i++) {
 80005d2:	3401      	adds	r4, #1
 80005d4:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 80005d8:	d3f1      	bcc.n	80005be <Display_Menu+0x4a>
    for(uint32_t j = 10; j < 20; j++) {
 80005da:	3501      	adds	r5, #1
 80005dc:	2d13      	cmp	r5, #19
 80005de:	d802      	bhi.n	80005e6 <Display_Menu+0x72>
    	for(uint32_t i = 280; i < 300; i++) {
 80005e0:	f44f 748c 	mov.w	r4, #280	; 0x118
 80005e4:	e7f6      	b.n	80005d4 <Display_Menu+0x60>
	}

    /* =================================List of Icons================================= */

    /* ===========================Icon No.1=========================== */
    Display_Round_Icon_40x40(home_icon_40x40, 59, 79, 40);
 80005e6:	2328      	movs	r3, #40	; 0x28
 80005e8:	224f      	movs	r2, #79	; 0x4f
 80005ea:	213b      	movs	r1, #59	; 0x3b
 80005ec:	4816      	ldr	r0, [pc, #88]	; (8000648 <Display_Menu+0xd4>)
 80005ee:	f7ff ff73 	bl	80004d8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.2=========================== */
    Display_Round_Icon_40x40(music_icon_40x40, 159, 79, 40);
 80005f2:	2328      	movs	r3, #40	; 0x28
 80005f4:	224f      	movs	r2, #79	; 0x4f
 80005f6:	219f      	movs	r1, #159	; 0x9f
 80005f8:	4814      	ldr	r0, [pc, #80]	; (800064c <Display_Menu+0xd8>)
 80005fa:	f7ff ff6d 	bl	80004d8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.3=========================== */
    Display_Round_Icon_40x40(note_icon_40x40, 259, 79, 40);
 80005fe:	2328      	movs	r3, #40	; 0x28
 8000600:	224f      	movs	r2, #79	; 0x4f
 8000602:	f240 1103 	movw	r1, #259	; 0x103
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <Display_Menu+0xdc>)
 8000608:	f7ff ff66 	bl	80004d8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.4=========================== */
    Display_Round_Icon_40x40(game_icon_40x40, 59, 179, 40);
 800060c:	2328      	movs	r3, #40	; 0x28
 800060e:	22b3      	movs	r2, #179	; 0xb3
 8000610:	213b      	movs	r1, #59	; 0x3b
 8000612:	4810      	ldr	r0, [pc, #64]	; (8000654 <Display_Menu+0xe0>)
 8000614:	f7ff ff60 	bl	80004d8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.5=========================== */
    Display_Round_Icon_40x40(facebook_icon_40x40, 159, 179, 40);
 8000618:	2328      	movs	r3, #40	; 0x28
 800061a:	22b3      	movs	r2, #179	; 0xb3
 800061c:	219f      	movs	r1, #159	; 0x9f
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <Display_Menu+0xe4>)
 8000620:	f7ff ff5a 	bl	80004d8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.6=========================== */
    Display_Round_Icon_40x40(image_icon_40x40, 259, 179, 40);
 8000624:	2328      	movs	r3, #40	; 0x28
 8000626:	22b3      	movs	r2, #179	; 0xb3
 8000628:	f240 1103 	movw	r1, #259	; 0x103
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <Display_Menu+0xe8>)
 800062e:	f7ff ff53 	bl	80004d8 <Display_Round_Icon_40x40>

	CS_OFF;
 8000632:	2201      	movs	r2, #1
 8000634:	2104      	movs	r1, #4
 8000636:	480a      	ldr	r0, [pc, #40]	; (8000660 <Display_Menu+0xec>)
 8000638:	f000 fa39 	bl	8000aae <HAL_GPIO_WritePin>
}
 800063c:	b003      	add	sp, #12
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000640:	0803dc2c 	.word	0x0803dc2c
 8000644:	080026ac 	.word	0x080026ac
 8000648:	0803820c 	.word	0x0803820c
 800064c:	080362cc 	.word	0x080362cc
 8000650:	080349cc 	.word	0x080349cc
 8000654:	080330cc 	.word	0x080330cc
 8000658:	080317cc 	.word	0x080317cc
 800065c:	0802fecc 	.word	0x0802fecc
 8000660:	40020000 	.word	0x40020000

08000664 <Display_Text>:
		}
	}
}

void Display_Text()
{
 8000664:	b510      	push	{r4, lr}
 8000666:	b082      	sub	sp, #8
	/* Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 8000668:	2000      	movs	r0, #0
 800066a:	f001 f993 	bl	8001994 <ILI9341_Fill_Screen>
	HAL_Delay(500);
 800066e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000672:	f000 f8bd 	bl	80007f0 <HAL_Delay>

	/* Draw border for the menu */
    ILI9341_Draw_Empty_Rectangle(YELLOW, 10, 30, 310, 230);
 8000676:	23e6      	movs	r3, #230	; 0xe6
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	f44f 739b 	mov.w	r3, #310	; 0x136
 800067e:	221e      	movs	r2, #30
 8000680:	210a      	movs	r1, #10
 8000682:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000686:	f001 fa1b 	bl	8001ac0 <ILI9341_Draw_Empty_Rectangle>

    /* Write something */
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "Hello User!", 2);
 800068a:	2402      	movs	r4, #2
 800068c:	9401      	str	r4, [sp, #4]
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <Display_Text+0x88>)
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000698:	2128      	movs	r1, #40	; 0x28
 800069a:	2014      	movs	r0, #20
 800069c:	f001 fb8e 	bl	8001dbc <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 60, WHITE, BLACK, "This is the test for TFT LCD!", 2);
 80006a0:	9401      	str	r4, [sp, #4]
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <Display_Text+0x8c>)
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ac:	213c      	movs	r1, #60	; 0x3c
 80006ae:	2014      	movs	r0, #20
 80006b0:	f001 fb84 	bl	8001dbc <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 80, WHITE, BLACK, "For more information, please visit:", 2);
 80006b4:	9401      	str	r4, [sp, #4]
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <Display_Text+0x90>)
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2300      	movs	r3, #0
 80006bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c0:	2150      	movs	r1, #80	; 0x50
 80006c2:	2014      	movs	r0, #20
 80006c4:	f001 fb7a 	bl	8001dbc <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 100, WHITE, BLACK, "    aweirdolife.wordpress.com    ", 2);
 80006c8:	9401      	str	r4, [sp, #4]
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <Display_Text+0x94>)
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d4:	2164      	movs	r1, #100	; 0x64
 80006d6:	2014      	movs	r0, #20
 80006d8:	f001 fb70 	bl	8001dbc <ILI9341_Draw_String>

	Display_Square_Icon_40x40(back_icon_40x40, 0, 200);
 80006dc:	22c8      	movs	r2, #200	; 0xc8
 80006de:	2100      	movs	r1, #0
 80006e0:	4806      	ldr	r0, [pc, #24]	; (80006fc <Display_Text+0x98>)
 80006e2:	f7ff ff26 	bl	8000532 <Display_Square_Icon_40x40>
}
 80006e6:	b002      	add	sp, #8
 80006e8:	bd10      	pop	{r4, pc}
 80006ea:	bf00      	nop
 80006ec:	0803dc38 	.word	0x0803dc38
 80006f0:	0803dc44 	.word	0x0803dc44
 80006f4:	0803dc64 	.word	0x0803dc64
 80006f8:	0803dc88 	.word	0x0803dc88
 80006fc:	0802e5cc 	.word	0x0802e5cc

08000700 <Display_Color_Picture>:

void Display_Color_Picture()
{
 8000700:	b538      	push	{r3, r4, r5, lr}
	for (uint16_t i = 0; i < 280; i++)
 8000702:	2500      	movs	r5, #0
 8000704:	e014      	b.n	8000730 <Display_Color_Picture+0x30>
	{
		for (uint16_t j = 0; j < 320; j++)
		{
			ILI9341_Draw_Double_Pixel(j, i, ironman[(640 * i) + j * 2], ironman[(640 * i) + j * 2 + 1]);
 8000706:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800070a:	019a      	lsls	r2, r3, #6
 800070c:	4422      	add	r2, r4
 800070e:	0053      	lsls	r3, r2, #1
 8000710:	490d      	ldr	r1, [pc, #52]	; (8000748 <Display_Color_Picture+0x48>)
 8000712:	3301      	adds	r3, #1
 8000714:	5ccb      	ldrb	r3, [r1, r3]
 8000716:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 800071a:	4629      	mov	r1, r5
 800071c:	4620      	mov	r0, r4
 800071e:	f001 fb9d 	bl	8001e5c <ILI9341_Draw_Double_Pixel>
		for (uint16_t j = 0; j < 320; j++)
 8000722:	3401      	adds	r4, #1
 8000724:	b2a4      	uxth	r4, r4
 8000726:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 800072a:	d3ec      	bcc.n	8000706 <Display_Color_Picture+0x6>
	for (uint16_t i = 0; i < 280; i++)
 800072c:	3501      	adds	r5, #1
 800072e:	b2ad      	uxth	r5, r5
 8000730:	f5b5 7f8c 	cmp.w	r5, #280	; 0x118
 8000734:	d201      	bcs.n	800073a <Display_Color_Picture+0x3a>
		for (uint16_t j = 0; j < 320; j++)
 8000736:	2400      	movs	r4, #0
 8000738:	e7f5      	b.n	8000726 <Display_Color_Picture+0x26>
		}
	}

	Display_Square_Icon_40x40(back_icon_40x40, 0, 200);
 800073a:	22c8      	movs	r2, #200	; 0xc8
 800073c:	2100      	movs	r1, #0
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <Display_Color_Picture+0x4c>)
 8000740:	f7ff fef7 	bl	8000532 <Display_Square_Icon_40x40>
}
 8000744:	bd38      	pop	{r3, r4, r5, pc}
 8000746:	bf00      	nop
 8000748:	080029cc 	.word	0x080029cc
 800074c:	0802e5cc 	.word	0x0802e5cc

08000750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b510      	push	{r4, lr}
 8000752:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_InitTick+0x40>)
 8000756:	7818      	ldrb	r0, [r3, #0]
 8000758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <HAL_InitTick+0x44>)
 8000762:	6810      	ldr	r0, [r2, #0]
 8000764:	fbb0 f0f3 	udiv	r0, r0, r3
 8000768:	f000 f89c 	bl	80008a4 <HAL_SYSTICK_Config>
 800076c:	b968      	cbnz	r0, 800078a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	2c0f      	cmp	r4, #15
 8000770:	d901      	bls.n	8000776 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000772:	2001      	movs	r0, #1
 8000774:	e00a      	b.n	800078c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000776:	2200      	movs	r2, #0
 8000778:	4621      	mov	r1, r4
 800077a:	f04f 30ff 	mov.w	r0, #4294967295
 800077e:	f000 f85d 	bl	800083c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000782:	4b03      	ldr	r3, [pc, #12]	; (8000790 <HAL_InitTick+0x40>)
 8000784:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000786:	2000      	movs	r0, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800078a:	2001      	movs	r0, #1
}
 800078c:	bd10      	pop	{r4, pc}
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000
 8000794:	20000010 	.word	0x20000010

08000798 <HAL_Init>:
{
 8000798:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <HAL_Init+0x30>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007a2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007aa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007b2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 f82f 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff ffc8 	bl	8000750 <HAL_InitTick>
  HAL_MspInit();
 80007c0:	f001 fcb2 	bl	8002128 <HAL_MspInit>
}
 80007c4:	2000      	movs	r0, #0
 80007c6:	bd08      	pop	{r3, pc}
 80007c8:	40023c00 	.word	0x40023c00

080007cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007cc:	4a03      	ldr	r2, [pc, #12]	; (80007dc <HAL_IncTick+0x10>)
 80007ce:	6811      	ldr	r1, [r2, #0]
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HAL_IncTick+0x14>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	440b      	add	r3, r1
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200000b8 	.word	0x200000b8
 80007e0:	20000000 	.word	0x20000000

080007e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007e4:	4b01      	ldr	r3, [pc, #4]	; (80007ec <HAL_GetTick+0x8>)
 80007e6:	6818      	ldr	r0, [r3, #0]
}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200000b8 	.word	0x200000b8

080007f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f0:	b538      	push	{r3, r4, r5, lr}
 80007f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007f4:	f7ff fff6 	bl	80007e4 <HAL_GetTick>
 80007f8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80007fe:	d002      	beq.n	8000806 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <HAL_Delay+0x24>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000806:	f7ff ffed 	bl	80007e4 <HAL_GetTick>
 800080a:	1b40      	subs	r0, r0, r5
 800080c:	42a0      	cmp	r0, r4
 800080e:	d3fa      	bcc.n	8000806 <HAL_Delay+0x16>
  {
  }
}
 8000810:	bd38      	pop	{r3, r4, r5, pc}
 8000812:	bf00      	nop
 8000814:	20000000 	.word	0x20000000

08000818 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800081a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000820:	041b      	lsls	r3, r3, #16
 8000822:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000824:	0200      	lsls	r0, r0, #8
 8000826:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800082c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000830:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000834:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000836:	4770      	bx	lr
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_NVIC_SetPriority+0x60>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000846:	f1c3 0407 	rsb	r4, r3, #7
 800084a:	2c04      	cmp	r4, #4
 800084c:	bf28      	it	cs
 800084e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000850:	1d1d      	adds	r5, r3, #4
 8000852:	2d06      	cmp	r5, #6
 8000854:	d918      	bls.n	8000888 <HAL_NVIC_SetPriority+0x4c>
 8000856:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 35ff 	mov.w	r5, #4294967295
 800085c:	fa05 f404 	lsl.w	r4, r5, r4
 8000860:	ea21 0104 	bic.w	r1, r1, r4
 8000864:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000866:	fa05 f303 	lsl.w	r3, r5, r3
 800086a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000870:	2800      	cmp	r0, #0
 8000872:	db0b      	blt.n	800088c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	0109      	lsls	r1, r1, #4
 8000876:	b2c9      	uxtb	r1, r1
 8000878:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800087c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000880:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000884:	bc30      	pop	{r4, r5}
 8000886:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000888:	2300      	movs	r3, #0
 800088a:	e7e5      	b.n	8000858 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	f000 000f 	and.w	r0, r0, #15
 8000890:	0109      	lsls	r1, r1, #4
 8000892:	b2c9      	uxtb	r1, r1
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <HAL_NVIC_SetPriority+0x64>)
 8000896:	5419      	strb	r1, [r3, r0]
 8000898:	e7f4      	b.n	8000884 <HAL_NVIC_SetPriority+0x48>
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00
 80008a0:	e000ed14 	.word	0xe000ed14

080008a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a4:	3801      	subs	r0, #1
 80008a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008aa:	d20a      	bcs.n	80008c2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_SYSTICK_Config+0x24>)
 80008ae:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <HAL_SYSTICK_Config+0x28>)
 80008b2:	21f0      	movs	r1, #240	; 0xf0
 80008b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	2000      	movs	r0, #0
 80008ba:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008bc:	2207      	movs	r2, #7
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008d0:	2804      	cmp	r0, #4
 80008d2:	d005      	beq.n	80008e0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	f023 0304 	bic.w	r3, r3, #4
 80008dc:	6013      	str	r3, [r2, #0]
  }
}
 80008de:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008e0:	4a02      	ldr	r2, [pc, #8]	; (80008ec <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80008e2:	6813      	ldr	r3, [r2, #0]
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6013      	str	r3, [r2, #0]
 80008ea:	4770      	bx	lr
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008f0:	4770      	bx	lr

080008f2 <HAL_SYSTICK_IRQHandler>:
{
 80008f2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008f4:	f7ff fffc 	bl	80008f0 <HAL_SYSTICK_Callback>
}
 80008f8:	bd08      	pop	{r3, pc}
	...

080008fc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	f200 80c5 	bhi.w	8000a8e <HAL_GPIO_Init+0x192>
{
 8000904:	b4f0      	push	{r4, r5, r6, r7}
 8000906:	b082      	sub	sp, #8
 8000908:	e039      	b.n	800097e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800090a:	2204      	movs	r2, #4
 800090c:	e000      	b.n	8000910 <HAL_GPIO_Init+0x14>
 800090e:	2200      	movs	r2, #0
 8000910:	40b2      	lsls	r2, r6
 8000912:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000914:	3402      	adds	r4, #2
 8000916:	4e5e      	ldr	r6, [pc, #376]	; (8000a90 <HAL_GPIO_Init+0x194>)
 8000918:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800091c:	4a5d      	ldr	r2, [pc, #372]	; (8000a94 <HAL_GPIO_Init+0x198>)
 800091e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000920:	43ea      	mvns	r2, r5
 8000922:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000926:	684f      	ldr	r7, [r1, #4]
 8000928:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800092c:	d001      	beq.n	8000932 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800092e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000932:	4c58      	ldr	r4, [pc, #352]	; (8000a94 <HAL_GPIO_Init+0x198>)
 8000934:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000936:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000938:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800093c:	684f      	ldr	r7, [r1, #4]
 800093e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000942:	d001      	beq.n	8000948 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000944:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000948:	4c52      	ldr	r4, [pc, #328]	; (8000a94 <HAL_GPIO_Init+0x198>)
 800094a:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800094c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800094e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000952:	684f      	ldr	r7, [r1, #4]
 8000954:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000958:	d001      	beq.n	800095e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800095a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800095e:	4c4d      	ldr	r4, [pc, #308]	; (8000a94 <HAL_GPIO_Init+0x198>)
 8000960:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000962:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000964:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000966:	684e      	ldr	r6, [r1, #4]
 8000968:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800096c:	d001      	beq.n	8000972 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800096e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000972:	4c48      	ldr	r4, [pc, #288]	; (8000a94 <HAL_GPIO_Init+0x198>)
 8000974:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000976:	3301      	adds	r3, #1
 8000978:	2b0f      	cmp	r3, #15
 800097a:	f200 8085 	bhi.w	8000a88 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 800097e:	2201      	movs	r2, #1
 8000980:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000982:	680c      	ldr	r4, [r1, #0]
 8000984:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000988:	42aa      	cmp	r2, r5
 800098a:	d1f4      	bne.n	8000976 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098c:	684c      	ldr	r4, [r1, #4]
 800098e:	2c02      	cmp	r4, #2
 8000990:	d001      	beq.n	8000996 <HAL_GPIO_Init+0x9a>
 8000992:	2c12      	cmp	r4, #18
 8000994:	d110      	bne.n	80009b8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8000996:	08de      	lsrs	r6, r3, #3
 8000998:	3608      	adds	r6, #8
 800099a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800099e:	f003 0407 	and.w	r4, r3, #7
 80009a2:	00a7      	lsls	r7, r4, #2
 80009a4:	240f      	movs	r4, #15
 80009a6:	40bc      	lsls	r4, r7
 80009a8:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009ac:	690c      	ldr	r4, [r1, #16]
 80009ae:	40bc      	lsls	r4, r7
 80009b0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009b4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80009b8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ba:	005f      	lsls	r7, r3, #1
 80009bc:	2603      	movs	r6, #3
 80009be:	40be      	lsls	r6, r7
 80009c0:	43f6      	mvns	r6, r6
 80009c2:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009c6:	684c      	ldr	r4, [r1, #4]
 80009c8:	f004 0403 	and.w	r4, r4, #3
 80009cc:	40bc      	lsls	r4, r7
 80009ce:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80009d2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d4:	684c      	ldr	r4, [r1, #4]
 80009d6:	f104 3cff 	add.w	ip, r4, #4294967295
 80009da:	f1bc 0f01 	cmp.w	ip, #1
 80009de:	d903      	bls.n	80009e8 <HAL_GPIO_Init+0xec>
 80009e0:	2c11      	cmp	r4, #17
 80009e2:	d001      	beq.n	80009e8 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	2c12      	cmp	r4, #18
 80009e6:	d110      	bne.n	8000a0a <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 80009e8:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009ea:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ee:	68cc      	ldr	r4, [r1, #12]
 80009f0:	40bc      	lsls	r4, r7
 80009f2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 80009f6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80009f8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009fa:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009fe:	684c      	ldr	r4, [r1, #4]
 8000a00:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000a04:	409c      	lsls	r4, r3
 8000a06:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000a08:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a0a:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a0c:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a0e:	688a      	ldr	r2, [r1, #8]
 8000a10:	40ba      	lsls	r2, r7
 8000a12:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000a14:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a16:	684a      	ldr	r2, [r1, #4]
 8000a18:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000a1c:	d0ab      	beq.n	8000976 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2200      	movs	r2, #0
 8000a20:	9201      	str	r2, [sp, #4]
 8000a22:	4a1d      	ldr	r2, [pc, #116]	; (8000a98 <HAL_GPIO_Init+0x19c>)
 8000a24:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000a26:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000a2a:	6454      	str	r4, [r2, #68]	; 0x44
 8000a2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000a2e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a32:	9201      	str	r2, [sp, #4]
 8000a34:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a36:	089c      	lsrs	r4, r3, #2
 8000a38:	1ca6      	adds	r6, r4, #2
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <HAL_GPIO_Init+0x194>)
 8000a3c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a40:	f003 0203 	and.w	r2, r3, #3
 8000a44:	0096      	lsls	r6, r2, #2
 8000a46:	220f      	movs	r2, #15
 8000a48:	40b2      	lsls	r2, r6
 8000a4a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <HAL_GPIO_Init+0x1a0>)
 8000a50:	4290      	cmp	r0, r2
 8000a52:	f43f af5c 	beq.w	800090e <HAL_GPIO_Init+0x12>
 8000a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d00e      	beq.n	8000a7c <HAL_GPIO_Init+0x180>
 8000a5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000a62:	4290      	cmp	r0, r2
 8000a64:	d00c      	beq.n	8000a80 <HAL_GPIO_Init+0x184>
 8000a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000a6a:	4290      	cmp	r0, r2
 8000a6c:	d00a      	beq.n	8000a84 <HAL_GPIO_Init+0x188>
 8000a6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000a72:	4290      	cmp	r0, r2
 8000a74:	f43f af49 	beq.w	800090a <HAL_GPIO_Init+0xe>
 8000a78:	2207      	movs	r2, #7
 8000a7a:	e749      	b.n	8000910 <HAL_GPIO_Init+0x14>
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	e747      	b.n	8000910 <HAL_GPIO_Init+0x14>
 8000a80:	2202      	movs	r2, #2
 8000a82:	e745      	b.n	8000910 <HAL_GPIO_Init+0x14>
 8000a84:	2203      	movs	r2, #3
 8000a86:	e743      	b.n	8000910 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000a88:	b002      	add	sp, #8
 8000a8a:	bcf0      	pop	{r4, r5, r6, r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	4770      	bx	lr
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40013c00 	.word	0x40013c00
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000aa0:	6903      	ldr	r3, [r0, #16]
 8000aa2:	4219      	tst	r1, r3
 8000aa4:	d101      	bne.n	8000aaa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000aa6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000aa8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4770      	bx	lr

08000aae <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aae:	b912      	cbnz	r2, 8000ab6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ab0:	0409      	lsls	r1, r1, #16
 8000ab2:	6181      	str	r1, [r0, #24]
  }
}
 8000ab4:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000ab6:	6181      	str	r1, [r0, #24]
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000abc:	2800      	cmp	r0, #0
 8000abe:	f000 81bb 	beq.w	8000e38 <HAL_RCC_OscConfig+0x37c>
{
 8000ac2:	b570      	push	{r4, r5, r6, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ac8:	6803      	ldr	r3, [r0, #0]
 8000aca:	f013 0f01 	tst.w	r3, #1
 8000ace:	d03b      	beq.n	8000b48 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ad0:	4ba7      	ldr	r3, [pc, #668]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 030c 	and.w	r3, r3, #12
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d02c      	beq.n	8000b36 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000adc:	4ba4      	ldr	r3, [pc, #656]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ae4:	2b08      	cmp	r3, #8
 8000ae6:	d021      	beq.n	8000b2c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae8:	6863      	ldr	r3, [r4, #4]
 8000aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aee:	d04f      	beq.n	8000b90 <HAL_RCC_OscConfig+0xd4>
 8000af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000af4:	d052      	beq.n	8000b9c <HAL_RCC_OscConfig+0xe0>
 8000af6:	4b9e      	ldr	r3, [pc, #632]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b06:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b08:	6863      	ldr	r3, [r4, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d050      	beq.n	8000bb0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fe69 	bl	80007e4 <HAL_GetTick>
 8000b12:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b14:	4b96      	ldr	r3, [pc, #600]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b1c:	d114      	bne.n	8000b48 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b1e:	f7ff fe61 	bl	80007e4 <HAL_GetTick>
 8000b22:	1b40      	subs	r0, r0, r5
 8000b24:	2864      	cmp	r0, #100	; 0x64
 8000b26:	d9f5      	bls.n	8000b14 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000b28:	2003      	movs	r0, #3
 8000b2a:	e18a      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b2c:	4b90      	ldr	r3, [pc, #576]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000b34:	d0d8      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b36:	4b8e      	ldr	r3, [pc, #568]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b3e:	d003      	beq.n	8000b48 <HAL_RCC_OscConfig+0x8c>
 8000b40:	6863      	ldr	r3, [r4, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 817a 	beq.w	8000e3c <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	f013 0f02 	tst.w	r3, #2
 8000b4e:	d055      	beq.n	8000bfc <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b50:	4b87      	ldr	r3, [pc, #540]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f013 0f0c 	tst.w	r3, #12
 8000b58:	d03e      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b5a:	4b85      	ldr	r3, [pc, #532]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d033      	beq.n	8000bce <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b66:	68e3      	ldr	r3, [r4, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d068      	beq.n	8000c3e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b6c:	4b81      	ldr	r3, [pc, #516]	; (8000d74 <HAL_RCC_OscConfig+0x2b8>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b72:	f7ff fe37 	bl	80007e4 <HAL_GetTick>
 8000b76:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b78:	4b7d      	ldr	r3, [pc, #500]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f013 0f02 	tst.w	r3, #2
 8000b80:	d154      	bne.n	8000c2c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b82:	f7ff fe2f 	bl	80007e4 <HAL_GetTick>
 8000b86:	1b40      	subs	r0, r0, r5
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	d9f5      	bls.n	8000b78 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	e158      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b90:	4a77      	ldr	r2, [pc, #476]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e7b5      	b.n	8000b08 <HAL_RCC_OscConfig+0x4c>
 8000b9c:	4b74      	ldr	r3, [pc, #464]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e7ab      	b.n	8000b08 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fe18 	bl	80007e4 <HAL_GetTick>
 8000bb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb6:	4b6e      	ldr	r3, [pc, #440]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000bbe:	d0c3      	beq.n	8000b48 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc0:	f7ff fe10 	bl	80007e4 <HAL_GetTick>
 8000bc4:	1b40      	subs	r0, r0, r5
 8000bc6:	2864      	cmp	r0, #100	; 0x64
 8000bc8:	d9f5      	bls.n	8000bb6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000bca:	2003      	movs	r0, #3
 8000bcc:	e139      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bce:	4b68      	ldr	r3, [pc, #416]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000bd6:	d1c6      	bne.n	8000b66 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd8:	4b65      	ldr	r3, [pc, #404]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f013 0f02 	tst.w	r3, #2
 8000be0:	d004      	beq.n	8000bec <HAL_RCC_OscConfig+0x130>
 8000be2:	68e3      	ldr	r3, [r4, #12]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d001      	beq.n	8000bec <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8000be8:	2001      	movs	r0, #1
 8000bea:	e12a      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bec:	4a60      	ldr	r2, [pc, #384]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000bee:	6813      	ldr	r3, [r2, #0]
 8000bf0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bf4:	6921      	ldr	r1, [r4, #16]
 8000bf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bfa:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	f013 0f08 	tst.w	r3, #8
 8000c02:	d040      	beq.n	8000c86 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c04:	6963      	ldr	r3, [r4, #20]
 8000c06:	b363      	cbz	r3, 8000c62 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c08:	4b5b      	ldr	r3, [pc, #364]	; (8000d78 <HAL_RCC_OscConfig+0x2bc>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c0e:	f7ff fde9 	bl	80007e4 <HAL_GetTick>
 8000c12:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c14:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c18:	f013 0f02 	tst.w	r3, #2
 8000c1c:	d133      	bne.n	8000c86 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c1e:	f7ff fde1 	bl	80007e4 <HAL_GetTick>
 8000c22:	1b40      	subs	r0, r0, r5
 8000c24:	2802      	cmp	r0, #2
 8000c26:	d9f5      	bls.n	8000c14 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000c28:	2003      	movs	r0, #3
 8000c2a:	e10a      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c2c:	4a50      	ldr	r2, [pc, #320]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000c2e:	6813      	ldr	r3, [r2, #0]
 8000c30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c34:	6921      	ldr	r1, [r4, #16]
 8000c36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	e7de      	b.n	8000bfc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000c3e:	4b4d      	ldr	r3, [pc, #308]	; (8000d74 <HAL_RCC_OscConfig+0x2b8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c44:	f7ff fdce 	bl	80007e4 <HAL_GetTick>
 8000c48:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4a:	4b49      	ldr	r3, [pc, #292]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f013 0f02 	tst.w	r3, #2
 8000c52:	d0d3      	beq.n	8000bfc <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c54:	f7ff fdc6 	bl	80007e4 <HAL_GetTick>
 8000c58:	1b40      	subs	r0, r0, r5
 8000c5a:	2802      	cmp	r0, #2
 8000c5c:	d9f5      	bls.n	8000c4a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000c5e:	2003      	movs	r0, #3
 8000c60:	e0ef      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c62:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <HAL_RCC_OscConfig+0x2bc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c68:	f7ff fdbc 	bl	80007e4 <HAL_GetTick>
 8000c6c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c6e:	4b40      	ldr	r3, [pc, #256]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c72:	f013 0f02 	tst.w	r3, #2
 8000c76:	d006      	beq.n	8000c86 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c78:	f7ff fdb4 	bl	80007e4 <HAL_GetTick>
 8000c7c:	1b40      	subs	r0, r0, r5
 8000c7e:	2802      	cmp	r0, #2
 8000c80:	d9f5      	bls.n	8000c6e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8000c82:	2003      	movs	r0, #3
 8000c84:	e0dd      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	f013 0f04 	tst.w	r3, #4
 8000c8c:	d079      	beq.n	8000d82 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c8e:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000c96:	d133      	bne.n	8000d00 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cb0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb2:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <HAL_RCC_OscConfig+0x2c0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000cba:	d023      	beq.n	8000d04 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cbc:	68a3      	ldr	r3, [r4, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d034      	beq.n	8000d2c <HAL_RCC_OscConfig+0x270>
 8000cc2:	2b05      	cmp	r3, #5
 8000cc4:	d038      	beq.n	8000d38 <HAL_RCC_OscConfig+0x27c>
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000cc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000cca:	f022 0201 	bic.w	r2, r2, #1
 8000cce:	671a      	str	r2, [r3, #112]	; 0x70
 8000cd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000cd2:	f022 0204 	bic.w	r2, r2, #4
 8000cd6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000cd8:	68a3      	ldr	r3, [r4, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d036      	beq.n	8000d4c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cde:	f7ff fd81 	bl	80007e4 <HAL_GetTick>
 8000ce2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ce8:	f013 0f02 	tst.w	r3, #2
 8000cec:	d148      	bne.n	8000d80 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cee:	f7ff fd79 	bl	80007e4 <HAL_GetTick>
 8000cf2:	1b80      	subs	r0, r0, r6
 8000cf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	d9f3      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	e0a0      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8000d00:	2500      	movs	r5, #0
 8000d02:	e7d6      	b.n	8000cb2 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_RCC_OscConfig+0x2c0>)
 8000d06:	6813      	ldr	r3, [r2, #0]
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000d0e:	f7ff fd69 	bl	80007e4 <HAL_GetTick>
 8000d12:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_RCC_OscConfig+0x2c0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d1c:	d1ce      	bne.n	8000cbc <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d1e:	f7ff fd61 	bl	80007e4 <HAL_GetTick>
 8000d22:	1b80      	subs	r0, r0, r6
 8000d24:	2802      	cmp	r0, #2
 8000d26:	d9f5      	bls.n	8000d14 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8000d28:	2003      	movs	r0, #3
 8000d2a:	e08a      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2c:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000d2e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6713      	str	r3, [r2, #112]	; 0x70
 8000d36:	e7cf      	b.n	8000cd8 <HAL_RCC_OscConfig+0x21c>
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000d3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d3c:	f042 0204 	orr.w	r2, r2, #4
 8000d40:	671a      	str	r2, [r3, #112]	; 0x70
 8000d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d44:	f042 0201 	orr.w	r2, r2, #1
 8000d48:	671a      	str	r2, [r3, #112]	; 0x70
 8000d4a:	e7c5      	b.n	8000cd8 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d4c:	f7ff fd4a 	bl	80007e4 <HAL_GetTick>
 8000d50:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_RCC_OscConfig+0x2b4>)
 8000d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d56:	f013 0f02 	tst.w	r3, #2
 8000d5a:	d011      	beq.n	8000d80 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d5c:	f7ff fd42 	bl	80007e4 <HAL_GetTick>
 8000d60:	1b80      	subs	r0, r0, r6
 8000d62:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d66:	4298      	cmp	r0, r3
 8000d68:	d9f3      	bls.n	8000d52 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	e069      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	42470000 	.word	0x42470000
 8000d78:	42470e80 	.word	0x42470e80
 8000d7c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d80:	b9e5      	cbnz	r5, 8000dbc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d82:	69a3      	ldr	r3, [r4, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d05b      	beq.n	8000e40 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d88:	4a30      	ldr	r2, [pc, #192]	; (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000d8a:	6892      	ldr	r2, [r2, #8]
 8000d8c:	f002 020c 	and.w	r2, r2, #12
 8000d90:	2a08      	cmp	r2, #8
 8000d92:	d058      	beq.n	8000e46 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d017      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <HAL_RCC_OscConfig+0x394>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fd21 	bl	80007e4 <HAL_GetTick>
 8000da2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dac:	d042      	beq.n	8000e34 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dae:	f7ff fd19 	bl	80007e4 <HAL_GetTick>
 8000db2:	1b00      	subs	r0, r0, r4
 8000db4:	2802      	cmp	r0, #2
 8000db6:	d9f5      	bls.n	8000da4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000db8:	2003      	movs	r0, #3
 8000dba:	e042      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dbc:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000dbe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	e7dc      	b.n	8000d82 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_RCC_OscConfig+0x394>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dce:	f7ff fd09 	bl	80007e4 <HAL_GetTick>
 8000dd2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ddc:	d006      	beq.n	8000dec <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dde:	f7ff fd01 	bl	80007e4 <HAL_GetTick>
 8000de2:	1b40      	subs	r0, r0, r5
 8000de4:	2802      	cmp	r0, #2
 8000de6:	d9f5      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000de8:	2003      	movs	r0, #3
 8000dea:	e02a      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000dec:	69e3      	ldr	r3, [r4, #28]
 8000dee:	6a22      	ldr	r2, [r4, #32]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000df4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000df8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dfa:	0852      	lsrs	r2, r2, #1
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000e0a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_RCC_OscConfig+0x394>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e12:	f7ff fce7 	bl	80007e4 <HAL_GetTick>
 8000e16:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e20:	d106      	bne.n	8000e30 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e22:	f7ff fcdf 	bl	80007e4 <HAL_GetTick>
 8000e26:	1b00      	subs	r0, r0, r4
 8000e28:	2802      	cmp	r0, #2
 8000e2a:	d9f5      	bls.n	8000e18 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000e30:	2000      	movs	r0, #0
 8000e32:	e006      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
 8000e34:	2000      	movs	r0, #0
 8000e36:	e004      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8000e38:	2001      	movs	r0, #1
}
 8000e3a:	4770      	bx	lr
        return HAL_ERROR;
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	e000      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8000e40:	2000      	movs	r0, #0
}
 8000e42:	b002      	add	sp, #8
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000e46:	2001      	movs	r0, #1
 8000e48:	e7fb      	b.n	8000e42 <HAL_RCC_OscConfig+0x386>
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	42470060 	.word	0x42470060

08000e54 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e54:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d05c      	beq.n	8000f1a <HAL_RCC_GetSysClockFreq+0xc6>
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	d001      	beq.n	8000e68 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e64:	482f      	ldr	r0, [pc, #188]	; (8000f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8000e66:	4770      	bx	lr
{
 8000e68:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e7a:	d02b      	beq.n	8000ed4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e7c:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000e84:	461e      	mov	r6, r3
 8000e86:	2700      	movs	r7, #0
 8000e88:	015c      	lsls	r4, r3, #5
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	1ae4      	subs	r4, r4, r3
 8000e8e:	eb65 0507 	sbc.w	r5, r5, r7
 8000e92:	01a9      	lsls	r1, r5, #6
 8000e94:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000e98:	01a0      	lsls	r0, r4, #6
 8000e9a:	1b00      	subs	r0, r0, r4
 8000e9c:	eb61 0105 	sbc.w	r1, r1, r5
 8000ea0:	00cb      	lsls	r3, r1, #3
 8000ea2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ea6:	00c4      	lsls	r4, r0, #3
 8000ea8:	19a0      	adds	r0, r4, r6
 8000eaa:	eb43 0107 	adc.w	r1, r3, r7
 8000eae:	024b      	lsls	r3, r1, #9
 8000eb0:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8000eb4:	0244      	lsls	r4, r0, #9
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f7ff f98c 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ec8:	3301      	adds	r3, #1
 8000eca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000ecc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ed0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000edc:	461e      	mov	r6, r3
 8000ede:	2700      	movs	r7, #0
 8000ee0:	015c      	lsls	r4, r3, #5
 8000ee2:	2500      	movs	r5, #0
 8000ee4:	1ae4      	subs	r4, r4, r3
 8000ee6:	eb65 0507 	sbc.w	r5, r5, r7
 8000eea:	01a9      	lsls	r1, r5, #6
 8000eec:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000ef0:	01a0      	lsls	r0, r4, #6
 8000ef2:	1b00      	subs	r0, r0, r4
 8000ef4:	eb61 0105 	sbc.w	r1, r1, r5
 8000ef8:	00cb      	lsls	r3, r1, #3
 8000efa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000efe:	00c4      	lsls	r4, r0, #3
 8000f00:	19a0      	adds	r0, r4, r6
 8000f02:	eb43 0107 	adc.w	r1, r3, r7
 8000f06:	028b      	lsls	r3, r1, #10
 8000f08:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000f0c:	0284      	lsls	r4, r0, #10
 8000f0e:	4620      	mov	r0, r4
 8000f10:	4619      	mov	r1, r3
 8000f12:	2300      	movs	r3, #0
 8000f14:	f7ff f960 	bl	80001d8 <__aeabi_uldivmod>
 8000f18:	e7d2      	b.n	8000ec0 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	00f42400 	.word	0x00f42400
 8000f28:	007a1200 	.word	0x007a1200

08000f2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	f000 809d 	beq.w	800106c <HAL_RCC_ClockConfig+0x140>
{
 8000f32:	b570      	push	{r4, r5, r6, lr}
 8000f34:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f36:	4b4f      	ldr	r3, [pc, #316]	; (8001074 <HAL_RCC_ClockConfig+0x148>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d209      	bcs.n	8000f56 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f42:	b2cb      	uxtb	r3, r1
 8000f44:	4a4b      	ldr	r2, [pc, #300]	; (8001074 <HAL_RCC_ClockConfig+0x148>)
 8000f46:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f48:	6813      	ldr	r3, [r2, #0]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d001      	beq.n	8000f56 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8000f52:	2001      	movs	r0, #1
}
 8000f54:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	f013 0f02 	tst.w	r3, #2
 8000f5c:	d017      	beq.n	8000f8e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f5e:	f013 0f04 	tst.w	r3, #4
 8000f62:	d004      	beq.n	8000f6e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f64:	4a44      	ldr	r2, [pc, #272]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 8000f66:	6893      	ldr	r3, [r2, #8]
 8000f68:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f6c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	f013 0f08 	tst.w	r3, #8
 8000f74:	d004      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f76:	4a40      	ldr	r2, [pc, #256]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 8000f78:	6893      	ldr	r3, [r2, #8]
 8000f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f7e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f80:	4a3d      	ldr	r2, [pc, #244]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 8000f82:	6893      	ldr	r3, [r2, #8]
 8000f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f88:	68a0      	ldr	r0, [r4, #8]
 8000f8a:	4303      	orrs	r3, r0
 8000f8c:	6093      	str	r3, [r2, #8]
 8000f8e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	f013 0f01 	tst.w	r3, #1
 8000f96:	d032      	beq.n	8000ffe <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f98:	6863      	ldr	r3, [r4, #4]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d021      	beq.n	8000fe2 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f9e:	1e9a      	subs	r2, r3, #2
 8000fa0:	2a01      	cmp	r2, #1
 8000fa2:	d925      	bls.n	8000ff0 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa4:	4a34      	ldr	r2, [pc, #208]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	f012 0f02 	tst.w	r2, #2
 8000fac:	d060      	beq.n	8001070 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fae:	4932      	ldr	r1, [pc, #200]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 8000fb0:	688a      	ldr	r2, [r1, #8]
 8000fb2:	f022 0203 	bic.w	r2, r2, #3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000fba:	f7ff fc13 	bl	80007e4 <HAL_GetTick>
 8000fbe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	6862      	ldr	r2, [r4, #4]
 8000fca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000fce:	d016      	beq.n	8000ffe <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fd0:	f7ff fc08 	bl	80007e4 <HAL_GetTick>
 8000fd4:	1b80      	subs	r0, r0, r6
 8000fd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	d9f0      	bls.n	8000fc0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
 8000fe0:	e7b8      	b.n	8000f54 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	4a25      	ldr	r2, [pc, #148]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000fea:	d1e0      	bne.n	8000fae <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
 8000fee:	e7b1      	b.n	8000f54 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000ff8:	d1d9      	bne.n	8000fae <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	e7aa      	b.n	8000f54 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_RCC_ClockConfig+0x148>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	42ab      	cmp	r3, r5
 8001008:	d909      	bls.n	800101e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100a:	b2ea      	uxtb	r2, r5
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_RCC_ClockConfig+0x148>)
 800100e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	42ab      	cmp	r3, r5
 8001018:	d001      	beq.n	800101e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800101a:	2001      	movs	r0, #1
 800101c:	e79a      	b.n	8000f54 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	f013 0f04 	tst.w	r3, #4
 8001024:	d006      	beq.n	8001034 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 8001028:	6893      	ldr	r3, [r2, #8]
 800102a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800102e:	68e1      	ldr	r1, [r4, #12]
 8001030:	430b      	orrs	r3, r1
 8001032:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	f013 0f08 	tst.w	r3, #8
 800103a:	d007      	beq.n	800104c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 800103e:	6893      	ldr	r3, [r2, #8]
 8001040:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001044:	6921      	ldr	r1, [r4, #16]
 8001046:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800104a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800104c:	f7ff ff02 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_RCC_ClockConfig+0x14c>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001058:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_RCC_ClockConfig+0x150>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	40d8      	lsrs	r0, r3
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_RCC_ClockConfig+0x154>)
 8001060:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fb74 	bl	8000750 <HAL_InitTick>
  return HAL_OK;
 8001068:	2000      	movs	r0, #0
 800106a:	e773      	b.n	8000f54 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800106c:	2001      	movs	r0, #1
}
 800106e:	4770      	bx	lr
        return HAL_ERROR;
 8001070:	2001      	movs	r0, #1
 8001072:	e76f      	b.n	8000f54 <HAL_RCC_ClockConfig+0x28>
 8001074:	40023c00 	.word	0x40023c00
 8001078:	40023800 	.word	0x40023800
 800107c:	0803dc14 	.word	0x0803dc14
 8001080:	20000010 	.word	0x20000010

08001084 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001084:	4b01      	ldr	r3, [pc, #4]	; (800108c <HAL_RCC_GetHCLKFreq+0x8>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000010 	.word	0x20000010

08001090 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001092:	4605      	mov	r5, r0
 8001094:	460f      	mov	r7, r1
 8001096:	4616      	mov	r6, r2
 8001098:	461c      	mov	r4, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800109a:	e03b      	b.n	8001114 <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800109c:	b12c      	cbz	r4, 80010aa <SPI_WaitFlagStateUntilTimeout+0x1a>
 800109e:	f7ff fba1 	bl	80007e4 <HAL_GetTick>
 80010a2:	9b06      	ldr	r3, [sp, #24]
 80010a4:	1ac0      	subs	r0, r0, r3
 80010a6:	42a0      	cmp	r0, r4
 80010a8:	d334      	bcc.n	8001114 <SPI_WaitFlagStateUntilTimeout+0x84>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80010aa:	682a      	ldr	r2, [r5, #0]
 80010ac:	6853      	ldr	r3, [r2, #4]
 80010ae:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80010b2:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80010b4:	686b      	ldr	r3, [r5, #4]
 80010b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80010ba:	d00b      	beq.n	80010d4 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80010bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80010be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010c2:	d014      	beq.n	80010ee <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80010ca:	2300      	movs	r3, #0
 80010cc:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 80010d0:	2003      	movs	r0, #3
 80010d2:	e027      	b.n	8001124 <SPI_WaitFlagStateUntilTimeout+0x94>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80010d4:	68ab      	ldr	r3, [r5, #8]
 80010d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010da:	d002      	beq.n	80010e2 <SPI_WaitFlagStateUntilTimeout+0x52>
 80010dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e0:	d1ec      	bne.n	80010bc <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 80010e2:	682a      	ldr	r2, [r5, #0]
 80010e4:	6813      	ldr	r3, [r2, #0]
 80010e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	e7e6      	b.n	80010bc <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 80010ee:	682a      	ldr	r2, [r5, #0]
 80010f0:	6813      	ldr	r3, [r2, #0]
 80010f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010f6:	041b      	lsls	r3, r3, #16
 80010f8:	0c1b      	lsrs	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	682a      	ldr	r2, [r5, #0]
 80010fe:	6813      	ldr	r3, [r2, #0]
 8001100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e7dd      	b.n	80010c4 <SPI_WaitFlagStateUntilTimeout+0x34>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001108:	2301      	movs	r3, #1
 800110a:	42b3      	cmp	r3, r6
 800110c:	d009      	beq.n	8001122 <SPI_WaitFlagStateUntilTimeout+0x92>
    if(Timeout != HAL_MAX_DELAY)
 800110e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001112:	d1c3      	bne.n	800109c <SPI_WaitFlagStateUntilTimeout+0xc>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	ea37 0303 	bics.w	r3, r7, r3
 800111c:	d0f4      	beq.n	8001108 <SPI_WaitFlagStateUntilTimeout+0x78>
 800111e:	2300      	movs	r3, #0
 8001120:	e7f3      	b.n	800110a <SPI_WaitFlagStateUntilTimeout+0x7a>
      }
    }
  }

  return HAL_OK;
 8001122:	2000      	movs	r0, #0
}
 8001124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001126 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001126:	b510      	push	{r4, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	460b      	mov	r3, r1
 8001130:	2200      	movs	r2, #0
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	f7ff ffac 	bl	8001090 <SPI_WaitFlagStateUntilTimeout>
 8001138:	4603      	mov	r3, r0
 800113a:	b910      	cbnz	r0, 8001142 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800113c:	4618      	mov	r0, r3
 800113e:	b002      	add	sp, #8
 8001140:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001142:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001144:	f043 0320 	orr.w	r3, r3, #32
 8001148:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e7f6      	b.n	800113c <SPI_CheckFlag_BSY+0x16>

0800114e <HAL_SPI_Init>:
  if(hspi == NULL)
 800114e:	2800      	cmp	r0, #0
 8001150:	d03b      	beq.n	80011ca <HAL_SPI_Init+0x7c>
{
 8001152:	b510      	push	{r4, lr}
 8001154:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 800115a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800115e:	2b00      	cmp	r3, #0
 8001160:	d02e      	beq.n	80011c0 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001162:	2302      	movs	r3, #2
 8001164:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001168:	6822      	ldr	r2, [r4, #0]
 800116a:	6813      	ldr	r3, [r2, #0]
 800116c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001170:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001172:	6863      	ldr	r3, [r4, #4]
 8001174:	68a2      	ldr	r2, [r4, #8]
 8001176:	4313      	orrs	r3, r2
 8001178:	68e2      	ldr	r2, [r4, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	6922      	ldr	r2, [r4, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	6962      	ldr	r2, [r4, #20]
 8001182:	4313      	orrs	r3, r2
 8001184:	69a2      	ldr	r2, [r4, #24]
 8001186:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800118a:	4313      	orrs	r3, r2
 800118c:	69e2      	ldr	r2, [r4, #28]
 800118e:	4313      	orrs	r3, r2
 8001190:	6a22      	ldr	r2, [r4, #32]
 8001192:	4313      	orrs	r3, r2
 8001194:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001196:	6822      	ldr	r2, [r4, #0]
 8001198:	430b      	orrs	r3, r1
 800119a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800119c:	8b63      	ldrh	r3, [r4, #26]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011a4:	6822      	ldr	r2, [r4, #0]
 80011a6:	430b      	orrs	r3, r1
 80011a8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011aa:	6822      	ldr	r2, [r4, #0]
 80011ac:	69d3      	ldr	r3, [r2, #28]
 80011ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011b2:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011b4:	2000      	movs	r0, #0
 80011b6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80011be:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80011c0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80011c4:	f000 fffa 	bl	80021bc <HAL_SPI_MspInit>
 80011c8:	e7cb      	b.n	8001162 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 80011ca:	2001      	movs	r0, #1
}
 80011cc:	4770      	bx	lr

080011ce <HAL_SPI_Transmit>:
{
 80011ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80011d6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80011da:	2b01      	cmp	r3, #1
 80011dc:	f000 80c8 	beq.w	8001370 <HAL_SPI_Transmit+0x1a2>
 80011e0:	4604      	mov	r4, r0
 80011e2:	460d      	mov	r5, r1
 80011e4:	4690      	mov	r8, r2
 80011e6:	2301      	movs	r3, #1
 80011e8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80011ec:	f7ff fafa 	bl	80007e4 <HAL_GetTick>
 80011f0:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80011f2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d00a      	beq.n	8001212 <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 80011fc:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 80011fe:	2201      	movs	r2, #1
 8001200:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001204:	2200      	movs	r2, #0
 8001206:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800120a:	4618      	mov	r0, r3
 800120c:	b004      	add	sp, #16
 800120e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((pData == NULL ) || (Size == 0))
 8001212:	2d00      	cmp	r5, #0
 8001214:	f000 80a4 	beq.w	8001360 <HAL_SPI_Transmit+0x192>
 8001218:	f1b8 0f00 	cmp.w	r8, #0
 800121c:	f000 80a2 	beq.w	8001364 <HAL_SPI_Transmit+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001220:	2303      	movs	r3, #3
 8001222:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001226:	2300      	movs	r3, #0
 8001228:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800122a:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800122c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001230:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001234:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001236:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001238:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800123a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800123c:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800123e:	68a3      	ldr	r3, [r4, #8]
 8001240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001244:	d01b      	beq.n	800127e <HAL_SPI_Transmit+0xb0>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800124e:	d103      	bne.n	8001258 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001256:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001258:	68e3      	ldr	r3, [r4, #12]
 800125a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800125e:	d014      	beq.n	800128a <HAL_SPI_Transmit+0xbc>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001260:	6863      	ldr	r3, [r4, #4]
 8001262:	b11b      	cbz	r3, 800126c <HAL_SPI_Transmit+0x9e>
 8001264:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001266:	b29b      	uxth	r3, r3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d13e      	bne.n	80012ea <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001272:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001274:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001276:	3b01      	subs	r3, #1
 8001278:	b29b      	uxth	r3, r3
 800127a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800127c:	e035      	b.n	80012ea <HAL_SPI_Transmit+0x11c>
    SPI_1LINE_TX(hspi);
 800127e:	6822      	ldr	r2, [r4, #0]
 8001280:	6813      	ldr	r3, [r2, #0]
 8001282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e7dd      	b.n	8001246 <HAL_SPI_Transmit+0x78>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800128a:	6863      	ldr	r3, [r4, #4]
 800128c:	b11b      	cbz	r3, 8001296 <HAL_SPI_Transmit+0xc8>
 800128e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001290:	b29b      	uxth	r3, r3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d10d      	bne.n	80012b2 <HAL_SPI_Transmit+0xe4>
      hspi->Instance->DR = *((uint16_t *)pData);
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	f835 2b02 	ldrh.w	r2, [r5], #2
 800129c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800129e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80012a0:	3b01      	subs	r3, #1
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80012a6:	e004      	b.n	80012b2 <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012a8:	2e00      	cmp	r6, #0
 80012aa:	d05d      	beq.n	8001368 <HAL_SPI_Transmit+0x19a>
 80012ac:	f1b6 3fff 	cmp.w	r6, #4294967295
 80012b0:	d10f      	bne.n	80012d2 <HAL_SPI_Transmit+0x104>
    while (hspi->TxXferCount > 0U)
 80012b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	b37b      	cbz	r3, 8001318 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	f012 0f02 	tst.w	r2, #2
 80012c0:	d0f2      	beq.n	80012a8 <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((uint16_t *)pData);
 80012c2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80012c6:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 80012c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80012ca:	3b01      	subs	r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	86e3      	strh	r3, [r4, #54]	; 0x36
 80012d0:	e7ef      	b.n	80012b2 <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012d2:	f7ff fa87 	bl	80007e4 <HAL_GetTick>
 80012d6:	1bc0      	subs	r0, r0, r7
 80012d8:	42b0      	cmp	r0, r6
 80012da:	d3ea      	bcc.n	80012b2 <HAL_SPI_Transmit+0xe4>
          errorcode = HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e78e      	b.n	80011fe <HAL_SPI_Transmit+0x30>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012e0:	2e00      	cmp	r6, #0
 80012e2:	d043      	beq.n	800136c <HAL_SPI_Transmit+0x19e>
 80012e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80012e8:	d10f      	bne.n	800130a <HAL_SPI_Transmit+0x13c>
    while (hspi->TxXferCount > 0U)
 80012ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b19b      	cbz	r3, 8001318 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	f012 0f02 	tst.w	r2, #2
 80012f8:	d0f2      	beq.n	80012e0 <HAL_SPI_Transmit+0x112>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80012fa:	f815 2b01 	ldrb.w	r2, [r5], #1
 80012fe:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001300:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001302:	3b01      	subs	r3, #1
 8001304:	b29b      	uxth	r3, r3
 8001306:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001308:	e7ef      	b.n	80012ea <HAL_SPI_Transmit+0x11c>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800130a:	f7ff fa6b 	bl	80007e4 <HAL_GetTick>
 800130e:	1bc0      	subs	r0, r0, r7
 8001310:	42b0      	cmp	r0, r6
 8001312:	d3ea      	bcc.n	80012ea <HAL_SPI_Transmit+0x11c>
          errorcode = HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e772      	b.n	80011fe <HAL_SPI_Transmit+0x30>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001318:	9700      	str	r7, [sp, #0]
 800131a:	4633      	mov	r3, r6
 800131c:	2201      	movs	r2, #1
 800131e:	2102      	movs	r1, #2
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff feb5 	bl	8001090 <SPI_WaitFlagStateUntilTimeout>
 8001326:	b108      	cbz	r0, 800132c <HAL_SPI_Transmit+0x15e>
    errorcode = HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e768      	b.n	80011fe <HAL_SPI_Transmit+0x30>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800132c:	463a      	mov	r2, r7
 800132e:	4631      	mov	r1, r6
 8001330:	4620      	mov	r0, r4
 8001332:	f7ff fef8 	bl	8001126 <SPI_CheckFlag_BSY>
 8001336:	4603      	mov	r3, r0
 8001338:	b118      	cbz	r0, 8001342 <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800133a:	2320      	movs	r3, #32
 800133c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
    goto error;
 8001340:	e75d      	b.n	80011fe <HAL_SPI_Transmit+0x30>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001342:	68a2      	ldr	r2, [r4, #8]
 8001344:	b932      	cbnz	r2, 8001354 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001346:	9203      	str	r2, [sp, #12]
 8001348:	6822      	ldr	r2, [r4, #0]
 800134a:	68d1      	ldr	r1, [r2, #12]
 800134c:	9103      	str	r1, [sp, #12]
 800134e:	6892      	ldr	r2, [r2, #8]
 8001350:	9203      	str	r2, [sp, #12]
 8001352:	9a03      	ldr	r2, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001354:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001356:	2a00      	cmp	r2, #0
 8001358:	f43f af51 	beq.w	80011fe <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e74e      	b.n	80011fe <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e74c      	b.n	80011fe <HAL_SPI_Transmit+0x30>
 8001364:	2301      	movs	r3, #1
 8001366:	e74a      	b.n	80011fe <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e748      	b.n	80011fe <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e746      	b.n	80011fe <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8001370:	2302      	movs	r3, #2
 8001372:	e74a      	b.n	800120a <HAL_SPI_Transmit+0x3c>

08001374 <ILI9341_SPI_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init() {
 8001374:	b508      	push	{r3, lr}
	lcd_spi.Instance 				= SPI1;
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <ILI9341_SPI_Init+0x3c>)
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <ILI9341_SPI_Init+0x40>)
 800137a:	6003      	str	r3, [r0, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 800137c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001380:	6043      	str	r3, [r0, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 8001382:	2300      	movs	r3, #0
 8001384:	6083      	str	r3, [r0, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8001386:	60c3      	str	r3, [r0, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8001388:	6103      	str	r3, [r0, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 800138a:	6143      	str	r3, [r0, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 800138c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001390:	6182      	str	r2, [r0, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8001392:	61c3      	str	r3, [r0, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8001394:	6203      	str	r3, [r0, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8001396:	6243      	str	r3, [r0, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 8001398:	6283      	str	r3, [r0, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 800139a:	230a      	movs	r3, #10
 800139c:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 800139e:	f7ff fed6 	bl	800114e <HAL_SPI_Init>
 80013a2:	b900      	cbnz	r0, 80013a6 <ILI9341_SPI_Init+0x32>
		Error_Handler();
	}
}
 80013a4:	bd08      	pop	{r3, pc}
		Error_Handler();
 80013a6:	21a8      	movs	r1, #168	; 0xa8
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <ILI9341_SPI_Init+0x44>)
 80013aa:	f000 fdcd 	bl	8001f48 <_Error_Handler>
}
 80013ae:	e7f9      	b.n	80013a4 <ILI9341_SPI_Init+0x30>
 80013b0:	2000005c 	.word	0x2000005c
 80013b4:	40013000 	.word	0x40013000
 80013b8:	0803dcac 	.word	0x0803dcac

080013bc <Before_Sending_Command>:
static void Before_Sending_Data() {
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
}

static void Before_Sending_Command() {
 80013bc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80013be:	4c06      	ldr	r4, [pc, #24]	; (80013d8 <Before_Sending_Command+0x1c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	2102      	movs	r1, #2
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff fb72 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2104      	movs	r1, #4
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff fb6d 	bl	8000aae <HAL_GPIO_WritePin>
}
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	bf00      	nop
 80013d8:	40020000 	.word	0x40020000

080013dc <Before_Sending_Data>:
static void Before_Sending_Data() {
 80013dc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80013de:	4c06      	ldr	r4, [pc, #24]	; (80013f8 <Before_Sending_Data+0x1c>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	2102      	movs	r1, #2
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7ff fb62 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2104      	movs	r1, #4
 80013ee:	4620      	mov	r0, r4
 80013f0:	f7ff fb5d 	bl	8000aae <HAL_GPIO_WritePin>
}
 80013f4:	bd10      	pop	{r4, pc}
 80013f6:	bf00      	nop
 80013f8:	40020000 	.word	0x40020000

080013fc <ILI9341_SPI_Send>:
{
 80013fc:	b500      	push	{lr}
 80013fe:	b083      	sub	sp, #12
 8001400:	a902      	add	r1, sp, #8
 8001402:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 8001406:	2301      	movs	r3, #1
 8001408:	461a      	mov	r2, r3
 800140a:	4803      	ldr	r0, [pc, #12]	; (8001418 <ILI9341_SPI_Send+0x1c>)
 800140c:	f7ff fedf 	bl	80011ce <HAL_SPI_Transmit>
}
 8001410:	b003      	add	sp, #12
 8001412:	f85d fb04 	ldr.w	pc, [sp], #4
 8001416:	bf00      	nop
 8001418:	2000005c 	.word	0x2000005c

0800141c <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command) {
 800141c:	b510      	push	{r4, lr}
 800141e:	4604      	mov	r4, r0
	Before_Sending_Command();
 8001420:	f7ff ffcc 	bl	80013bc <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff ffe9 	bl	80013fc <ILI9341_SPI_Send>
}
 800142a:	bd10      	pop	{r4, pc}

0800142c <ILI9341_Send_Data>:
static void ILI9341_Send_Data(unsigned char data) {
 800142c:	b510      	push	{r4, lr}
 800142e:	4604      	mov	r4, r0
	Before_Sending_Data();
 8001430:	f7ff ffd4 	bl	80013dc <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8001434:	4620      	mov	r0, r4
 8001436:	f7ff ffe1 	bl	80013fc <ILI9341_SPI_Send>
}
 800143a:	bd10      	pop	{r4, pc}

0800143c <ILI9341_Send_Burst>:
static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 800143c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001440:	460f      	mov	r7, r1
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8001442:	0a06      	lsrs	r6, r0, #8
 8001444:	b2c4      	uxtb	r4, r0
	CS_ON;
 8001446:	4d44      	ldr	r5, [pc, #272]	; (8001558 <ILI9341_Send_Burst+0x11c>)
 8001448:	2200      	movs	r2, #0
 800144a:	2104      	movs	r1, #4
 800144c:	4628      	mov	r0, r5
 800144e:	f7ff fb2e 	bl	8000aae <HAL_GPIO_WritePin>
	DC_COMMAND;
 8001452:	2200      	movs	r2, #0
 8001454:	2102      	movs	r1, #2
 8001456:	4628      	mov	r0, r5
 8001458:	f7ff fb29 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 800145c:	202c      	movs	r0, #44	; 0x2c
 800145e:	f7ff ffcd 	bl	80013fc <ILI9341_SPI_Send>
	DC_DATA;
 8001462:	2201      	movs	r2, #1
 8001464:	2102      	movs	r1, #2
 8001466:	4628      	mov	r0, r5
 8001468:	f7ff fb21 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 800146c:	4630      	mov	r0, r6
 800146e:	f7ff ffc5 	bl	80013fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8001472:	4620      	mov	r0, r4
 8001474:	f7ff ffc2 	bl	80013fc <ILI9341_SPI_Send>
	len--;
 8001478:	3f01      	subs	r7, #1
	blocks = (unsigned short) (len / 64); //64 pixels/block
 800147a:	f3c7 138f 	ubfx	r3, r7, #6, #16
	if (high_bit == low_bit)
 800147e:	42a6      	cmp	r6, r4
 8001480:	d14f      	bne.n	8001522 <ILI9341_Send_Burst+0xe6>
 8001482:	e01d      	b.n	80014c0 <ILI9341_Send_Burst+0x84>
			i = 16;
 8001484:	2510      	movs	r5, #16
				ILI9341_SPI_Send(low_bit);
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff ffb8 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800148c:	4620      	mov	r0, r4
 800148e:	f7ff ffb5 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8001492:	4620      	mov	r0, r4
 8001494:	f7ff ffb2 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8001498:	4620      	mov	r0, r4
 800149a:	f7ff ffaf 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff ffac 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7ff ffa9 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff ffa6 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff ffa3 	bl	80013fc <ILI9341_SPI_Send>
			} while (--i);
 80014b6:	1e6b      	subs	r3, r5, #1
 80014b8:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 80014bc:	d1e3      	bne.n	8001486 <ILI9341_Send_Burst+0x4a>
		while (blocks--) {
 80014be:	4633      	mov	r3, r6
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	b296      	uxth	r6, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1dd      	bne.n	8001484 <ILI9341_Send_Burst+0x48>
		for (i = (unsigned char) len & 63; i--;) {
 80014c8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 80014cc:	e006      	b.n	80014dc <ILI9341_Send_Burst+0xa0>
			ILI9341_SPI_Send(low_bit);
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff ff94 	bl	80013fc <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff ff91 	bl	80013fc <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 80014da:	462f      	mov	r7, r5
 80014dc:	1e7b      	subs	r3, r7, #1
 80014de:	b2dd      	uxtb	r5, r3
 80014e0:	2f00      	cmp	r7, #0
 80014e2:	d1f4      	bne.n	80014ce <ILI9341_Send_Burst+0x92>
 80014e4:	e030      	b.n	8001548 <ILI9341_Send_Burst+0x10c>
			i = 16;
 80014e6:	2510      	movs	r5, #16
				ILI9341_SPI_Send(high_bit);
 80014e8:	4630      	mov	r0, r6
 80014ea:	f7ff ff87 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff ff84 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 80014f4:	4630      	mov	r0, r6
 80014f6:	f7ff ff81 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014fa:	4620      	mov	r0, r4
 80014fc:	f7ff ff7e 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8001500:	4630      	mov	r0, r6
 8001502:	f7ff ff7b 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff ff78 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 800150c:	4630      	mov	r0, r6
 800150e:	f7ff ff75 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8001512:	4620      	mov	r0, r4
 8001514:	f7ff ff72 	bl	80013fc <ILI9341_SPI_Send>
			} while (--i);
 8001518:	1e6b      	subs	r3, r5, #1
 800151a:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 800151e:	d1e3      	bne.n	80014e8 <ILI9341_Send_Burst+0xac>
		while (blocks--) {
 8001520:	4643      	mov	r3, r8
 8001522:	1e5a      	subs	r2, r3, #1
 8001524:	fa1f f882 	uxth.w	r8, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1dc      	bne.n	80014e6 <ILI9341_Send_Burst+0xaa>
		for (i = (unsigned char) len & 63; i--;) {
 800152c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8001530:	e006      	b.n	8001540 <ILI9341_Send_Burst+0x104>
			ILI9341_SPI_Send(high_bit);
 8001532:	4630      	mov	r0, r6
 8001534:	f7ff ff62 	bl	80013fc <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff ff5f 	bl	80013fc <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 800153e:	462f      	mov	r7, r5
 8001540:	1e7b      	subs	r3, r7, #1
 8001542:	b2dd      	uxtb	r5, r3
 8001544:	2f00      	cmp	r7, #0
 8001546:	d1f4      	bne.n	8001532 <ILI9341_Send_Burst+0xf6>
	CS_OFF;
 8001548:	2201      	movs	r2, #1
 800154a:	2104      	movs	r1, #4
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <ILI9341_Send_Burst+0x11c>)
 800154e:	f7ff faae 	bl	8000aae <HAL_GPIO_WritePin>
}
 8001552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001556:	bf00      	nop
 8001558:	40020000 	.word	0x40020000

0800155c <ILI9341_Reset>:
void ILI9341_Reset() {
 800155c:	b510      	push	{r4, lr}
	RESET_ON;
 800155e:	4c0f      	ldr	r4, [pc, #60]	; (800159c <ILI9341_Reset+0x40>)
 8001560:	2200      	movs	r2, #0
 8001562:	2101      	movs	r1, #1
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff faa2 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800156a:	2032      	movs	r0, #50	; 0x32
 800156c:	f7ff f940 	bl	80007f0 <HAL_Delay>
	RESET_OFF;
 8001570:	2201      	movs	r2, #1
 8001572:	4611      	mov	r1, r2
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff fa9a 	bl	8000aae <HAL_GPIO_WritePin>
	CS_ON;
 800157a:	2200      	movs	r2, #0
 800157c:	2104      	movs	r1, #4
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff fa95 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001584:	2032      	movs	r0, #50	; 0x32
 8001586:	f7ff f933 	bl	80007f0 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff ff46 	bl	800141c <ILI9341_Send_Command>
	CS_OFF;
 8001590:	2201      	movs	r2, #1
 8001592:	2104      	movs	r1, #4
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff fa8a 	bl	8000aae <HAL_GPIO_WritePin>
}
 800159a:	bd10      	pop	{r4, pc}
 800159c:	40020000 	.word	0x40020000

080015a0 <ILI9341_Init>:
void ILI9341_Init() {
 80015a0:	b508      	push	{r3, lr}
	ILI9341_SPI_Init();
 80015a2:	f7ff fee7 	bl	8001374 <ILI9341_SPI_Init>
	ILI9341_Reset();
 80015a6:	f7ff ffd9 	bl	800155c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff ff36 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Command(0xCB);
 80015b0:	20cb      	movs	r0, #203	; 0xcb
 80015b2:	f7ff ff33 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80015b6:	2039      	movs	r0, #57	; 0x39
 80015b8:	f7ff ff38 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80015bc:	202c      	movs	r0, #44	; 0x2c
 80015be:	f7ff ff35 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff ff32 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 80015c8:	2034      	movs	r0, #52	; 0x34
 80015ca:	f7ff ff2f 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff ff2c 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xCF);
 80015d4:	20cf      	movs	r0, #207	; 0xcf
 80015d6:	f7ff ff21 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80015da:	2000      	movs	r0, #0
 80015dc:	f7ff ff26 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80015e0:	20c1      	movs	r0, #193	; 0xc1
 80015e2:	f7ff ff23 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 80015e6:	2030      	movs	r0, #48	; 0x30
 80015e8:	f7ff ff20 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xE8);
 80015ec:	20e8      	movs	r0, #232	; 0xe8
 80015ee:	f7ff ff15 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80015f2:	2085      	movs	r0, #133	; 0x85
 80015f4:	f7ff ff1a 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff ff17 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80015fe:	2078      	movs	r0, #120	; 0x78
 8001600:	f7ff ff14 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xEA);
 8001604:	20ea      	movs	r0, #234	; 0xea
 8001606:	f7ff ff09 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff ff0e 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff ff0b 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xED);
 8001616:	20ed      	movs	r0, #237	; 0xed
 8001618:	f7ff ff00 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 800161c:	2064      	movs	r0, #100	; 0x64
 800161e:	f7ff ff05 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001622:	2003      	movs	r0, #3
 8001624:	f7ff ff02 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8001628:	2012      	movs	r0, #18
 800162a:	f7ff feff 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 800162e:	2081      	movs	r0, #129	; 0x81
 8001630:	f7ff fefc 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xF7);
 8001634:	20f7      	movs	r0, #247	; 0xf7
 8001636:	f7ff fef1 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 800163a:	2020      	movs	r0, #32
 800163c:	f7ff fef6 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xC0);
 8001640:	20c0      	movs	r0, #192	; 0xc0
 8001642:	f7ff feeb 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001646:	2010      	movs	r0, #16
 8001648:	f7ff fef0 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xC1);
 800164c:	20c1      	movs	r0, #193	; 0xc1
 800164e:	f7ff fee5 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001652:	2010      	movs	r0, #16
 8001654:	f7ff feea 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xC5);
 8001658:	20c5      	movs	r0, #197	; 0xc5
 800165a:	f7ff fedf 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 800165e:	203e      	movs	r0, #62	; 0x3e
 8001660:	f7ff fee4 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8001664:	2028      	movs	r0, #40	; 0x28
 8001666:	f7ff fee1 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xC7);
 800166a:	20c7      	movs	r0, #199	; 0xc7
 800166c:	f7ff fed6 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8001670:	2086      	movs	r0, #134	; 0x86
 8001672:	f7ff fedb 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0x36);
 8001676:	2036      	movs	r0, #54	; 0x36
 8001678:	f7ff fed0 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 800167c:	2048      	movs	r0, #72	; 0x48
 800167e:	f7ff fed5 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0x3A);
 8001682:	203a      	movs	r0, #58	; 0x3a
 8001684:	f7ff feca 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8001688:	2055      	movs	r0, #85	; 0x55
 800168a:	f7ff fecf 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xB1);
 800168e:	20b1      	movs	r0, #177	; 0xb1
 8001690:	f7ff fec4 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff fec9 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 800169a:	2018      	movs	r0, #24
 800169c:	f7ff fec6 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xB6);
 80016a0:	20b6      	movs	r0, #182	; 0xb6
 80016a2:	f7ff febb 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80016a6:	2008      	movs	r0, #8
 80016a8:	f7ff fec0 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80016ac:	2082      	movs	r0, #130	; 0x82
 80016ae:	f7ff febd 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80016b2:	2027      	movs	r0, #39	; 0x27
 80016b4:	f7ff feba 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xF2);
 80016b8:	20f2      	movs	r0, #242	; 0xf2
 80016ba:	f7ff feaf 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff feb4 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0x26); //Gamma set
 80016c4:	2026      	movs	r0, #38	; 0x26
 80016c6:	f7ff fea9 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7ff feae 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xE0);
 80016d0:	20e0      	movs	r0, #224	; 0xe0
 80016d2:	f7ff fea3 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 80016d6:	200f      	movs	r0, #15
 80016d8:	f7ff fea8 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80016dc:	2031      	movs	r0, #49	; 0x31
 80016de:	f7ff fea5 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 80016e2:	202b      	movs	r0, #43	; 0x2b
 80016e4:	f7ff fea2 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80016e8:	200c      	movs	r0, #12
 80016ea:	f7ff fe9f 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80016ee:	200e      	movs	r0, #14
 80016f0:	f7ff fe9c 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80016f4:	2008      	movs	r0, #8
 80016f6:	f7ff fe99 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80016fa:	204e      	movs	r0, #78	; 0x4e
 80016fc:	f7ff fe96 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8001700:	20f1      	movs	r0, #241	; 0xf1
 8001702:	f7ff fe93 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8001706:	2037      	movs	r0, #55	; 0x37
 8001708:	f7ff fe90 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800170c:	2007      	movs	r0, #7
 800170e:	f7ff fe8d 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8001712:	2010      	movs	r0, #16
 8001714:	f7ff fe8a 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001718:	2003      	movs	r0, #3
 800171a:	f7ff fe87 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800171e:	200e      	movs	r0, #14
 8001720:	f7ff fe84 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8001724:	2009      	movs	r0, #9
 8001726:	f7ff fe81 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff fe7e 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0xE1);
 8001730:	20e1      	movs	r0, #225	; 0xe1
 8001732:	f7ff fe73 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff fe78 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800173c:	200e      	movs	r0, #14
 800173e:	f7ff fe75 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8001742:	2014      	movs	r0, #20
 8001744:	f7ff fe72 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001748:	2003      	movs	r0, #3
 800174a:	f7ff fe6f 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 800174e:	2011      	movs	r0, #17
 8001750:	f7ff fe6c 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8001754:	2007      	movs	r0, #7
 8001756:	f7ff fe69 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800175a:	2031      	movs	r0, #49	; 0x31
 800175c:	f7ff fe66 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001760:	20c1      	movs	r0, #193	; 0xc1
 8001762:	f7ff fe63 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8001766:	2048      	movs	r0, #72	; 0x48
 8001768:	f7ff fe60 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800176c:	2008      	movs	r0, #8
 800176e:	f7ff fe5d 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001772:	200f      	movs	r0, #15
 8001774:	f7ff fe5a 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8001778:	200c      	movs	r0, #12
 800177a:	f7ff fe57 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800177e:	2031      	movs	r0, #49	; 0x31
 8001780:	f7ff fe54 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 8001784:	2036      	movs	r0, #54	; 0x36
 8001786:	f7ff fe51 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 800178a:	200f      	movs	r0, #15
 800178c:	f7ff fe4e 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Command(0x11);
 8001790:	2011      	movs	r0, #17
 8001792:	f7ff fe43 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Command(0x29);
 8001796:	2029      	movs	r0, #41	; 0x29
 8001798:	f7ff fe40 	bl	800141c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 800179c:	202c      	movs	r0, #44	; 0x2c
 800179e:	f7ff fe45 	bl	800142c <ILI9341_Send_Data>
}
 80017a2:	bd08      	pop	{r3, pc}

080017a4 <ILI9341_Set_Rotation>:
void ILI9341_Set_Rotation(unsigned char rotation) {
 80017a4:	b510      	push	{r4, lr}
 80017a6:	4604      	mov	r4, r0
	ILI9341_Send_Command(0x36);
 80017a8:	2036      	movs	r0, #54	; 0x36
 80017aa:	f7ff fe37 	bl	800141c <ILI9341_Send_Command>
	switch (rotation) {
 80017ae:	2c03      	cmp	r4, #3
 80017b0:	d80c      	bhi.n	80017cc <ILI9341_Set_Rotation+0x28>
 80017b2:	e8df f004 	tbb	[pc, r4]
 80017b6:	0c02      	.short	0x0c02
 80017b8:	2016      	.short	0x2016
		ILI9341_Send_Data(0x48);
 80017ba:	2048      	movs	r0, #72	; 0x48
 80017bc:	f7ff fe36 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 240;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <ILI9341_Set_Rotation+0x68>)
 80017c2:	22f0      	movs	r2, #240	; 0xf0
 80017c4:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017ca:	605a      	str	r2, [r3, #4]
}
 80017cc:	bd10      	pop	{r4, pc}
		ILI9341_Send_Data(0x28);
 80017ce:	2028      	movs	r0, #40	; 0x28
 80017d0:	f7ff fe2c 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 320;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <ILI9341_Set_Rotation+0x68>)
 80017d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017da:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017dc:	22f0      	movs	r2, #240	; 0xf0
 80017de:	605a      	str	r2, [r3, #4]
		break;
 80017e0:	e7f4      	b.n	80017cc <ILI9341_Set_Rotation+0x28>
		ILI9341_Send_Data(0x88);
 80017e2:	2088      	movs	r0, #136	; 0x88
 80017e4:	f7ff fe22 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 240;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <ILI9341_Set_Rotation+0x68>)
 80017ea:	22f0      	movs	r2, #240	; 0xf0
 80017ec:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017f2:	605a      	str	r2, [r3, #4]
		break;
 80017f4:	e7ea      	b.n	80017cc <ILI9341_Set_Rotation+0x28>
		ILI9341_Send_Data(0xE8);
 80017f6:	20e8      	movs	r0, #232	; 0xe8
 80017f8:	f7ff fe18 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 320;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <ILI9341_Set_Rotation+0x68>)
 80017fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001802:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8001804:	22f0      	movs	r2, #240	; 0xf0
 8001806:	605a      	str	r2, [r3, #4]
}
 8001808:	e7e0      	b.n	80017cc <ILI9341_Set_Rotation+0x28>
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008

08001810 <ILI9341_SPI_Send_32>:
void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8001810:	b570      	push	{r4, r5, r6, lr}
 8001812:	4606      	mov	r6, r0
 8001814:	460c      	mov	r4, r1
	CS_ON;
 8001816:	4d11      	ldr	r5, [pc, #68]	; (800185c <ILI9341_SPI_Send_32+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	2104      	movs	r1, #4
 800181c:	4628      	mov	r0, r5
 800181e:	f7ff f946 	bl	8000aae <HAL_GPIO_WritePin>
	DC_COMMAND;
 8001822:	2200      	movs	r2, #0
 8001824:	2102      	movs	r1, #2
 8001826:	4628      	mov	r0, r5
 8001828:	f7ff f941 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 800182c:	4630      	mov	r0, r6
 800182e:	f7ff fde5 	bl	80013fc <ILI9341_SPI_Send>
	DC_DATA;
 8001832:	2201      	movs	r2, #1
 8001834:	2102      	movs	r1, #2
 8001836:	4628      	mov	r0, r5
 8001838:	f7ff f939 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 800183c:	0e20      	lsrs	r0, r4, #24
 800183e:	f7ff fddd 	bl	80013fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8001842:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001846:	f7ff fdd9 	bl	80013fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 800184a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800184e:	f7ff fdd5 	bl	80013fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8001852:	b2e0      	uxtb	r0, r4
 8001854:	f7ff fdd2 	bl	80013fc <ILI9341_SPI_Send>
}
 8001858:	bd70      	pop	{r4, r5, r6, pc}
 800185a:	bf00      	nop
 800185c:	40020000 	.word	0x40020000

08001860 <ILI9341_Set_Address>:
void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8001860:	b538      	push	{r3, r4, r5, lr}
 8001862:	460d      	mov	r5, r1
 8001864:	461c      	mov	r4, r3
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8001866:	ea42 4100 	orr.w	r1, r2, r0, lsl #16
 800186a:	202a      	movs	r0, #42	; 0x2a
 800186c:	f7ff ffd0 	bl	8001810 <ILI9341_SPI_Send_32>
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 8001870:	ea44 4105 	orr.w	r1, r4, r5, lsl #16
 8001874:	202b      	movs	r0, #43	; 0x2b
 8001876:	f7ff ffcb 	bl	8001810 <ILI9341_SPI_Send_32>
}
 800187a:	bd38      	pop	{r3, r4, r5, pc}

0800187c <ILI9341_Draw_Char>:
{
 800187c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001880:	4616      	mov	r6, r2
 8001882:	461f      	mov	r7, r3
 8001884:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8001888:	f89d 301c 	ldrb.w	r3, [sp, #28]
	switch(size)
 800188c:	2b01      	cmp	r3, #1
 800188e:	d003      	beq.n	8001898 <ILI9341_Draw_Char+0x1c>
 8001890:	2b02      	cmp	r3, #2
 8001892:	d03d      	beq.n	8001910 <ILI9341_Draw_Char+0x94>
}
 8001894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ILI9341_Set_Address(x, y, x+5, y+8);
 8001898:	f101 0308 	add.w	r3, r1, #8
 800189c:	1d42      	adds	r2, r0, #5
 800189e:	f7ff ffdf 	bl	8001860 <ILI9341_Set_Address>
			DC_COMMAND;
 80018a2:	4c3a      	ldr	r4, [pc, #232]	; (800198c <ILI9341_Draw_Char+0x110>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	2102      	movs	r1, #2
 80018a8:	4620      	mov	r0, r4
 80018aa:	f7ff f900 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 80018ae:	202c      	movs	r0, #44	; 0x2c
 80018b0:	f7ff fda4 	bl	80013fc <ILI9341_SPI_Send>
			DC_DATA;
 80018b4:	2201      	movs	r2, #1
 80018b6:	2102      	movs	r1, #2
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff f8f8 	bl	8000aae <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 80018be:	f04f 0800 	mov.w	r8, #0
 80018c2:	e020      	b.n	8001906 <ILI9341_Draw_Char+0x8a>
						ILI9341_SPI_Send(phone>>8);
 80018c4:	f3c7 2007 	ubfx	r0, r7, #8, #8
 80018c8:	f7ff fd98 	bl	80013fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 80018cc:	b2f8      	uxtb	r0, r7
 80018ce:	f7ff fd95 	bl	80013fc <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 80018d2:	3401      	adds	r4, #1
 80018d4:	2c07      	cmp	r4, #7
 80018d6:	dc14      	bgt.n	8001902 <ILI9341_Draw_Char+0x86>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 80018d8:	f1a5 0320 	sub.w	r3, r5, #32
 80018dc:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <ILI9341_Draw_Char+0x114>)
 80018de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80018e2:	f813 3008 	ldrb.w	r3, [r3, r8]
 80018e6:	f1c4 0207 	rsb	r2, r4, #7
 80018ea:	4113      	asrs	r3, r2
 80018ec:	f013 0f01 	tst.w	r3, #1
 80018f0:	d0e8      	beq.n	80018c4 <ILI9341_Draw_Char+0x48>
						ILI9341_SPI_Send(color>>8);
 80018f2:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80018f6:	f7ff fd81 	bl	80013fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 80018fa:	b2f0      	uxtb	r0, r6
 80018fc:	f7ff fd7e 	bl	80013fc <ILI9341_SPI_Send>
 8001900:	e7e7      	b.n	80018d2 <ILI9341_Draw_Char+0x56>
			for(h=0;h<8;h++)
 8001902:	f108 0801 	add.w	r8, r8, #1
 8001906:	f1b8 0f07 	cmp.w	r8, #7
 800190a:	dcc3      	bgt.n	8001894 <ILI9341_Draw_Char+0x18>
				for(i=2;i<8;i++)
 800190c:	2402      	movs	r4, #2
 800190e:	e7e1      	b.n	80018d4 <ILI9341_Draw_Char+0x58>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8001910:	f101 0310 	add.w	r3, r1, #16
 8001914:	1dc2      	adds	r2, r0, #7
 8001916:	f7ff ffa3 	bl	8001860 <ILI9341_Set_Address>
			DC_COMMAND;
 800191a:	4c1c      	ldr	r4, [pc, #112]	; (800198c <ILI9341_Draw_Char+0x110>)
 800191c:	2200      	movs	r2, #0
 800191e:	2102      	movs	r1, #2
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff f8c4 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8001926:	202c      	movs	r0, #44	; 0x2c
 8001928:	f7ff fd68 	bl	80013fc <ILI9341_SPI_Send>
			DC_DATA;
 800192c:	2201      	movs	r2, #1
 800192e:	2102      	movs	r1, #2
 8001930:	4620      	mov	r0, r4
 8001932:	f7ff f8bc 	bl	8000aae <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8001936:	f04f 0800 	mov.w	r8, #0
 800193a:	e021      	b.n	8001980 <ILI9341_Draw_Char+0x104>
						ILI9341_SPI_Send(phone>>8);
 800193c:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8001940:	f7ff fd5c 	bl	80013fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001944:	b2f8      	uxtb	r0, r7
 8001946:	f7ff fd59 	bl	80013fc <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800194a:	3401      	adds	r4, #1
 800194c:	2c07      	cmp	r4, #7
 800194e:	dc15      	bgt.n	800197c <ILI9341_Draw_Char+0x100>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8001950:	f1a5 0320 	sub.w	r3, r5, #32
 8001954:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <ILI9341_Draw_Char+0x114>)
 8001956:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800195a:	4443      	add	r3, r8
 800195c:	f893 32d8 	ldrb.w	r3, [r3, #728]	; 0x2d8
 8001960:	f1c4 0207 	rsb	r2, r4, #7
 8001964:	4113      	asrs	r3, r2
 8001966:	f013 0f01 	tst.w	r3, #1
 800196a:	d0e7      	beq.n	800193c <ILI9341_Draw_Char+0xc0>
						ILI9341_SPI_Send(color>>8);
 800196c:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8001970:	f7ff fd44 	bl	80013fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8001974:	b2f0      	uxtb	r0, r6
 8001976:	f7ff fd41 	bl	80013fc <ILI9341_SPI_Send>
 800197a:	e7e6      	b.n	800194a <ILI9341_Draw_Char+0xce>
			for(h=0;h<16;h++)
 800197c:	f108 0801 	add.w	r8, r8, #1
 8001980:	f1b8 0f0f 	cmp.w	r8, #15
 8001984:	dc86      	bgt.n	8001894 <ILI9341_Draw_Char+0x18>
				for(i=0;i<8;i++)
 8001986:	2400      	movs	r4, #0
 8001988:	e7e0      	b.n	800194c <ILI9341_Draw_Char+0xd0>
 800198a:	bf00      	nop
 800198c:	40020000 	.word	0x40020000
 8001990:	0803d34c 	.word	0x0803d34c

08001994 <ILI9341_Fill_Screen>:
{
 8001994:	b538      	push	{r3, r4, r5, lr}
 8001996:	4605      	mov	r5, r0
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 8001998:	4c08      	ldr	r4, [pc, #32]	; (80019bc <ILI9341_Fill_Screen+0x28>)
 800199a:	6863      	ldr	r3, [r4, #4]
 800199c:	6822      	ldr	r2, [r4, #0]
 800199e:	3b01      	subs	r3, #1
 80019a0:	3a01      	subs	r2, #1
 80019a2:	2100      	movs	r1, #0
 80019a4:	4608      	mov	r0, r1
 80019a6:	f7ff ff5b 	bl	8001860 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	6861      	ldr	r1, [r4, #4]
 80019ae:	fb01 f103 	mul.w	r1, r1, r3
 80019b2:	b2a8      	uxth	r0, r5
 80019b4:	f7ff fd42 	bl	800143c <ILI9341_Send_Burst>
}
 80019b8:	bd38      	pop	{r3, r4, r5, pc}
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008

080019c0 <ILI9341_Draw_Pixel>:
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 80019c0:	2800      	cmp	r0, #0
 80019c2:	db25      	blt.n	8001a10 <ILI9341_Draw_Pixel+0x50>
 80019c4:	2900      	cmp	r1, #0
 80019c6:	db23      	blt.n	8001a10 <ILI9341_Draw_Pixel+0x50>
{
 80019c8:	b538      	push	{r3, r4, r5, lr}
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <ILI9341_Draw_Pixel+0x54>)
 80019cc:	681d      	ldr	r5, [r3, #0]
 80019ce:	42a8      	cmp	r0, r5
 80019d0:	d202      	bcs.n	80019d8 <ILI9341_Draw_Pixel+0x18>
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4299      	cmp	r1, r3
 80019d6:	d300      	bcc.n	80019da <ILI9341_Draw_Pixel+0x1a>
}
 80019d8:	bd38      	pop	{r3, r4, r5, pc}
 80019da:	4614      	mov	r4, r2
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 80019dc:	3b01      	subs	r3, #1
 80019de:	1e6a      	subs	r2, r5, #1
 80019e0:	f7ff ff3e 	bl	8001860 <ILI9341_Set_Address>
	DC_COMMAND;
 80019e4:	4d0c      	ldr	r5, [pc, #48]	; (8001a18 <ILI9341_Draw_Pixel+0x58>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	2102      	movs	r1, #2
 80019ea:	4628      	mov	r0, r5
 80019ec:	f7ff f85f 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 80019f0:	202c      	movs	r0, #44	; 0x2c
 80019f2:	f7ff fd03 	bl	80013fc <ILI9341_SPI_Send>
	DC_DATA;
 80019f6:	2201      	movs	r2, #1
 80019f8:	2102      	movs	r1, #2
 80019fa:	4628      	mov	r0, r5
 80019fc:	f7ff f857 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8001a00:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001a04:	f7ff fcfa 	bl	80013fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8001a08:	b2e0      	uxtb	r0, r4
 8001a0a:	f7ff fcf7 	bl	80013fc <ILI9341_SPI_Send>
 8001a0e:	e7e3      	b.n	80019d8 <ILI9341_Draw_Pixel+0x18>
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	40020000 	.word	0x40020000

08001a1c <ILI9341_Draw_Line>:
{
 8001a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a20:	b083      	sub	sp, #12
 8001a22:	9000      	str	r0, [sp, #0]
 8001a24:	460c      	mov	r4, r1
 8001a26:	4616      	mov	r6, r2
 8001a28:	4698      	mov	r8, r3
 8001a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	int steep = abs(y2-y1) > abs(x2-x1);
 8001a2c:	eba3 0902 	sub.w	r9, r3, r2
 8001a30:	f1b9 0f00 	cmp.w	r9, #0
 8001a34:	bfb8      	it	lt
 8001a36:	f1c9 0900 	rsblt	r9, r9, #0
 8001a3a:	eba8 0a01 	sub.w	sl, r8, r1
 8001a3e:	f1ba 0f00 	cmp.w	sl, #0
 8001a42:	bfb8      	it	lt
 8001a44:	f1ca 0a00 	rsblt	sl, sl, #0
	if (steep)
 8001a48:	45d1      	cmp	r9, sl
 8001a4a:	dd06      	ble.n	8001a5a <ILI9341_Draw_Line+0x3e>
		swap(x1,y1);
 8001a4c:	b20a      	sxth	r2, r1
		swap(x2,y2);
 8001a4e:	fa0f f188 	sxth.w	r1, r8
 8001a52:	4698      	mov	r8, r3
 8001a54:	460b      	mov	r3, r1
		swap(x1,y1);
 8001a56:	4634      	mov	r4, r6
 8001a58:	4616      	mov	r6, r2
	if(x1>x2)
 8001a5a:	4544      	cmp	r4, r8
 8001a5c:	d905      	bls.n	8001a6a <ILI9341_Draw_Line+0x4e>
		swap(x1,x2);
 8001a5e:	b222      	sxth	r2, r4
		swap(y1,y2);
 8001a60:	b231      	sxth	r1, r6
 8001a62:	461e      	mov	r6, r3
 8001a64:	460b      	mov	r3, r1
		swap(x1,x2);
 8001a66:	4644      	mov	r4, r8
 8001a68:	4690      	mov	r8, r2
	dx = (x2 - x1);
 8001a6a:	eba8 0b04 	sub.w	fp, r8, r4
	dy = abs(y2 - y1);
 8001a6e:	1b9f      	subs	r7, r3, r6
 8001a70:	2f00      	cmp	r7, #0
 8001a72:	bfb8      	it	lt
 8001a74:	427f      	neglt	r7, r7
	int err = dx / 2;
 8001a76:	eb0b 75db 	add.w	r5, fp, fp, lsr #31
 8001a7a:	106d      	asrs	r5, r5, #1
	if(y1 < y2)
 8001a7c:	429e      	cmp	r6, r3
 8001a7e:	d319      	bcc.n	8001ab4 <ILI9341_Draw_Line+0x98>
		ystep = -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	e007      	b.n	8001a98 <ILI9341_Draw_Line+0x7c>
			ILI9341_Draw_Pixel(x1, y1, color);
 8001a88:	9a00      	ldr	r2, [sp, #0]
 8001a8a:	4631      	mov	r1, r6
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff ff97 	bl	80019c0 <ILI9341_Draw_Pixel>
		if (err < 0)
 8001a92:	1bed      	subs	r5, r5, r7
 8001a94:	d40a      	bmi.n	8001aac <ILI9341_Draw_Line+0x90>
	for (; x1 <= x2; x1++)
 8001a96:	3401      	adds	r4, #1
 8001a98:	4544      	cmp	r4, r8
 8001a9a:	d80e      	bhi.n	8001aba <ILI9341_Draw_Line+0x9e>
		if (steep)
 8001a9c:	45d1      	cmp	r9, sl
 8001a9e:	ddf3      	ble.n	8001a88 <ILI9341_Draw_Line+0x6c>
			ILI9341_Draw_Pixel(y1, x1, color);
 8001aa0:	9a00      	ldr	r2, [sp, #0]
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	4630      	mov	r0, r6
 8001aa6:	f7ff ff8b 	bl	80019c0 <ILI9341_Draw_Pixel>
 8001aaa:	e7f2      	b.n	8001a92 <ILI9341_Draw_Line+0x76>
			y1 += ystep;
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	441e      	add	r6, r3
			err = dx;
 8001ab0:	465d      	mov	r5, fp
 8001ab2:	e7f0      	b.n	8001a96 <ILI9341_Draw_Line+0x7a>
		ystep = 1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	e7ee      	b.n	8001a98 <ILI9341_Draw_Line+0x7c>
}
 8001aba:	b003      	add	sp, #12
 8001abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ac0 <ILI9341_Draw_Empty_Rectangle>:
{
 8001ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	4605      	mov	r5, r0
 8001ac8:	460e      	mov	r6, r1
 8001aca:	4690      	mov	r8, r2
 8001acc:	461f      	mov	r7, r3
 8001ace:	9c08      	ldr	r4, [sp, #32]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	f7ff ffa3 	bl	8001a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 8001ad6:	9400      	str	r4, [sp, #0]
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4642      	mov	r2, r8
 8001adc:	4639      	mov	r1, r7
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f7ff ff9c 	bl	8001a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 8001ae4:	9400      	str	r4, [sp, #0]
 8001ae6:	4633      	mov	r3, r6
 8001ae8:	4642      	mov	r2, r8
 8001aea:	4631      	mov	r1, r6
 8001aec:	4628      	mov	r0, r5
 8001aee:	f7ff ff95 	bl	8001a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 8001af2:	9400      	str	r4, [sp, #0]
 8001af4:	463b      	mov	r3, r7
 8001af6:	4622      	mov	r2, r4
 8001af8:	4631      	mov	r1, r6
 8001afa:	4628      	mov	r0, r5
 8001afc:	f7ff ff8e 	bl	8001a1c <ILI9341_Draw_Line>
}
 8001b00:	b002      	add	sp, #8
 8001b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001b08 <ILI9341_Draw_Circle>:
void ILI9341_Draw_Circle(unsigned int x0, unsigned int y0, int r, unsigned int color, unsigned char flood) {
 8001b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0c:	b087      	sub	sp, #28
 8001b0e:	4682      	mov	sl, r0
 8001b10:	4688      	mov	r8, r1
 8001b12:	4616      	mov	r6, r2
 8001b14:	461c      	mov	r4, r3
 8001b16:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	int f = 1 - r;
 8001b1a:	f1c2 0b01 	rsb	fp, r2, #1
	int ddF_y = -2 * r;
 8001b1e:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 8001b22:	0053      	lsls	r3, r2, #1
 8001b24:	9302      	str	r3, [sp, #8]
	if (flood == 0) {
 8001b26:	2900      	cmp	r1, #0
 8001b28:	d166      	bne.n	8001bf8 <ILI9341_Draw_Circle+0xf0>
		ILI9341_Draw_Pixel(x0, y0 + r, color);
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	eb06 0108 	add.w	r1, r6, r8
 8001b30:	f7ff ff46 	bl	80019c0 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0, y0 - r, color);
 8001b34:	4622      	mov	r2, r4
 8001b36:	eba8 0106 	sub.w	r1, r8, r6
 8001b3a:	4650      	mov	r0, sl
 8001b3c:	f7ff ff40 	bl	80019c0 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0 + r, y0, color);
 8001b40:	4622      	mov	r2, r4
 8001b42:	4641      	mov	r1, r8
 8001b44:	eb06 000a 	add.w	r0, r6, sl
 8001b48:	f7ff ff3a 	bl	80019c0 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0 - r, y0, color);
 8001b4c:	4622      	mov	r2, r4
 8001b4e:	4641      	mov	r1, r8
 8001b50:	ebaa 0006 	sub.w	r0, sl, r6
 8001b54:	f7ff ff34 	bl	80019c0 <ILI9341_Draw_Pixel>
	int x = 0;
 8001b58:	2500      	movs	r5, #0
	int ddF_x = 1;
 8001b5a:	f04f 0901 	mov.w	r9, #1
 8001b5e:	9400      	str	r4, [sp, #0]
		while (x < y) {
 8001b60:	e03e      	b.n	8001be0 <ILI9341_Draw_Circle+0xd8>
			x++;
 8001b62:	3501      	adds	r5, #1
			ddF_x += 2;
 8001b64:	f109 0902 	add.w	r9, r9, #2
			f += ddF_x;
 8001b68:	44cb      	add	fp, r9
			ILI9341_Draw_Pixel(x0 + x, y0 + y, color);
 8001b6a:	eb05 070a 	add.w	r7, r5, sl
 8001b6e:	eb06 0308 	add.w	r3, r6, r8
 8001b72:	9a00      	ldr	r2, [sp, #0]
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	4619      	mov	r1, r3
 8001b78:	4638      	mov	r0, r7
 8001b7a:	f7ff ff21 	bl	80019c0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - x, y0 + y, color);
 8001b7e:	ebaa 0405 	sub.w	r4, sl, r5
 8001b82:	9a00      	ldr	r2, [sp, #0]
 8001b84:	9901      	ldr	r1, [sp, #4]
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7ff ff1a 	bl	80019c0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + x, y0 - y, color);
 8001b8c:	eba8 0306 	sub.w	r3, r8, r6
 8001b90:	9a00      	ldr	r2, [sp, #0]
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	4619      	mov	r1, r3
 8001b96:	4638      	mov	r0, r7
 8001b98:	f7ff ff12 	bl	80019c0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - x, y0 - y, color);
 8001b9c:	9a00      	ldr	r2, [sp, #0]
 8001b9e:	9901      	ldr	r1, [sp, #4]
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f7ff ff0d 	bl	80019c0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + y, y0 + x, color);
 8001ba6:	eb06 040a 	add.w	r4, r6, sl
 8001baa:	eb05 0708 	add.w	r7, r5, r8
 8001bae:	9a00      	ldr	r2, [sp, #0]
 8001bb0:	4639      	mov	r1, r7
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7ff ff04 	bl	80019c0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - y, y0 + x, color);
 8001bb8:	ebaa 0306 	sub.w	r3, sl, r6
 8001bbc:	9a00      	ldr	r2, [sp, #0]
 8001bbe:	4639      	mov	r1, r7
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fefc 	bl	80019c0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + y, y0 - x, color);
 8001bc8:	eba8 0705 	sub.w	r7, r8, r5
 8001bcc:	9a00      	ldr	r2, [sp, #0]
 8001bce:	4639      	mov	r1, r7
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff fef5 	bl	80019c0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - y, y0 - x, color);
 8001bd6:	9a00      	ldr	r2, [sp, #0]
 8001bd8:	4639      	mov	r1, r7
 8001bda:	9801      	ldr	r0, [sp, #4]
 8001bdc:	f7ff fef0 	bl	80019c0 <ILI9341_Draw_Pixel>
		while (x < y) {
 8001be0:	42b5      	cmp	r5, r6
 8001be2:	f280 80e5 	bge.w	8001db0 <ILI9341_Draw_Circle+0x2a8>
			if (f >= 0) {
 8001be6:	f1bb 0f00 	cmp.w	fp, #0
 8001bea:	dbba      	blt.n	8001b62 <ILI9341_Draw_Circle+0x5a>
				y--;
 8001bec:	3e01      	subs	r6, #1
				ddF_y += 2;
 8001bee:	9b02      	ldr	r3, [sp, #8]
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	9302      	str	r3, [sp, #8]
				f += ddF_y;
 8001bf4:	449b      	add	fp, r3
 8001bf6:	e7b4      	b.n	8001b62 <ILI9341_Draw_Circle+0x5a>
		ILI9341_Draw_Pixel(x0, y0 + r, color);
 8001bf8:	4622      	mov	r2, r4
 8001bfa:	eb06 0108 	add.w	r1, r6, r8
 8001bfe:	f7ff fedf 	bl	80019c0 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0, y0 - r, color);
 8001c02:	4622      	mov	r2, r4
 8001c04:	eba8 0106 	sub.w	r1, r8, r6
 8001c08:	4650      	mov	r0, sl
 8001c0a:	f7ff fed9 	bl	80019c0 <ILI9341_Draw_Pixel>
		ILI9341_Set_Address(x0 - r, y0, x0 + r, y0);
 8001c0e:	4643      	mov	r3, r8
 8001c10:	eb06 020a 	add.w	r2, r6, sl
 8001c14:	4641      	mov	r1, r8
 8001c16:	ebaa 0006 	sub.w	r0, sl, r6
 8001c1a:	f7ff fe21 	bl	8001860 <ILI9341_Set_Address>
		DC_COMMAND;
 8001c1e:	4d66      	ldr	r5, [pc, #408]	; (8001db8 <ILI9341_Draw_Circle+0x2b0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	2102      	movs	r1, #2
 8001c24:	4628      	mov	r0, r5
 8001c26:	f7fe ff42 	bl	8000aae <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 8001c2a:	202c      	movs	r0, #44	; 0x2c
 8001c2c:	f7ff fbe6 	bl	80013fc <ILI9341_SPI_Send>
		DC_DATA;
 8001c30:	2201      	movs	r2, #1
 8001c32:	2102      	movs	r1, #2
 8001c34:	4628      	mov	r0, r5
 8001c36:	f7fe ff3a 	bl	8000aae <HAL_GPIO_WritePin>
		for (uint32_t fff = 0; fff < r * 2 + 1; fff++) {
 8001c3a:	2500      	movs	r5, #0
 8001c3c:	e007      	b.n	8001c4e <ILI9341_Draw_Circle+0x146>
			ILI9341_SPI_Send(color >> 8);
 8001c3e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001c42:	f7ff fbdb 	bl	80013fc <ILI9341_SPI_Send>
			ILI9341_SPI_Send(color);
 8001c46:	b2e0      	uxtb	r0, r4
 8001c48:	f7ff fbd8 	bl	80013fc <ILI9341_SPI_Send>
		for (uint32_t fff = 0; fff < r * 2 + 1; fff++) {
 8001c4c:	3501      	adds	r5, #1
 8001c4e:	0073      	lsls	r3, r6, #1
 8001c50:	3301      	adds	r3, #1
 8001c52:	42ab      	cmp	r3, r5
 8001c54:	d8f3      	bhi.n	8001c3e <ILI9341_Draw_Circle+0x136>
	int x = 0;
 8001c56:	f04f 0900 	mov.w	r9, #0
	int ddF_x = 1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	9303      	str	r3, [sp, #12]
 8001c5e:	f8cd 8000 	str.w	r8, [sp]
 8001c62:	e077      	b.n	8001d54 <ILI9341_Draw_Circle+0x24c>
				ILI9341_SPI_Send(color >> 8);
 8001c64:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001c68:	f7ff fbc8 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8001c6c:	b2e0      	uxtb	r0, r4
 8001c6e:	f7ff fbc5 	bl	80013fc <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8001c72:	3701      	adds	r7, #1
 8001c74:	ea4f 0549 	mov.w	r5, r9, lsl #1
 8001c78:	3501      	adds	r5, #1
 8001c7a:	42bd      	cmp	r5, r7
 8001c7c:	d8f2      	bhi.n	8001c64 <ILI9341_Draw_Circle+0x15c>
			ILI9341_Set_Address(x0 - x, y0 - y, x0 + x, y0 - y);
 8001c7e:	9b00      	ldr	r3, [sp, #0]
 8001c80:	eba3 0108 	sub.w	r1, r3, r8
 8001c84:	460b      	mov	r3, r1
 8001c86:	9a05      	ldr	r2, [sp, #20]
 8001c88:	9804      	ldr	r0, [sp, #16]
 8001c8a:	f7ff fde9 	bl	8001860 <ILI9341_Set_Address>
			DC_COMMAND;
 8001c8e:	4f4a      	ldr	r7, [pc, #296]	; (8001db8 <ILI9341_Draw_Circle+0x2b0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	2102      	movs	r1, #2
 8001c94:	4638      	mov	r0, r7
 8001c96:	f7fe ff0a 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8001c9a:	202c      	movs	r0, #44	; 0x2c
 8001c9c:	f7ff fbae 	bl	80013fc <ILI9341_SPI_Send>
			DC_DATA;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	4638      	mov	r0, r7
 8001ca6:	f7fe ff02 	bl	8000aae <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8001caa:	2700      	movs	r7, #0
 8001cac:	e007      	b.n	8001cbe <ILI9341_Draw_Circle+0x1b6>
				ILI9341_SPI_Send(color >> 8);
 8001cae:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001cb2:	f7ff fba3 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8001cb6:	b2e0      	uxtb	r0, r4
 8001cb8:	f7ff fba0 	bl	80013fc <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8001cbc:	3701      	adds	r7, #1
 8001cbe:	42bd      	cmp	r5, r7
 8001cc0:	d8f5      	bhi.n	8001cae <ILI9341_Draw_Circle+0x1a6>
			ILI9341_Set_Address(x0 - y, y0 + x, x0 + y, y0 + x);
 8001cc2:	ebaa 0008 	sub.w	r0, sl, r8
 8001cc6:	9004      	str	r0, [sp, #16]
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	9a00      	ldr	r2, [sp, #0]
 8001ccc:	1899      	adds	r1, r3, r2
 8001cce:	44d0      	add	r8, sl
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4642      	mov	r2, r8
 8001cd4:	f7ff fdc4 	bl	8001860 <ILI9341_Set_Address>
			DC_COMMAND;
 8001cd8:	4d37      	ldr	r5, [pc, #220]	; (8001db8 <ILI9341_Draw_Circle+0x2b0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2102      	movs	r1, #2
 8001cde:	4628      	mov	r0, r5
 8001ce0:	f7fe fee5 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8001ce4:	202c      	movs	r0, #44	; 0x2c
 8001ce6:	f7ff fb89 	bl	80013fc <ILI9341_SPI_Send>
			DC_DATA;
 8001cea:	2201      	movs	r2, #1
 8001cec:	2102      	movs	r1, #2
 8001cee:	4628      	mov	r0, r5
 8001cf0:	f7fe fedd 	bl	8000aae <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8001cf4:	2700      	movs	r7, #0
 8001cf6:	e007      	b.n	8001d08 <ILI9341_Draw_Circle+0x200>
				ILI9341_SPI_Send(color >> 8);
 8001cf8:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001cfc:	f7ff fb7e 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8001d00:	b2e0      	uxtb	r0, r4
 8001d02:	f7ff fb7b 	bl	80013fc <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8001d06:	3701      	adds	r7, #1
 8001d08:	0075      	lsls	r5, r6, #1
 8001d0a:	3501      	adds	r5, #1
 8001d0c:	42bd      	cmp	r5, r7
 8001d0e:	d8f3      	bhi.n	8001cf8 <ILI9341_Draw_Circle+0x1f0>
			ILI9341_Set_Address(x0 - y, y0 - x, x0 + y, y0 - x);
 8001d10:	9b00      	ldr	r3, [sp, #0]
 8001d12:	9a01      	ldr	r2, [sp, #4]
 8001d14:	1a99      	subs	r1, r3, r2
 8001d16:	460b      	mov	r3, r1
 8001d18:	4642      	mov	r2, r8
 8001d1a:	9804      	ldr	r0, [sp, #16]
 8001d1c:	f7ff fda0 	bl	8001860 <ILI9341_Set_Address>
			DC_COMMAND;
 8001d20:	4f25      	ldr	r7, [pc, #148]	; (8001db8 <ILI9341_Draw_Circle+0x2b0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	2102      	movs	r1, #2
 8001d26:	4638      	mov	r0, r7
 8001d28:	f7fe fec1 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8001d2c:	202c      	movs	r0, #44	; 0x2c
 8001d2e:	f7ff fb65 	bl	80013fc <ILI9341_SPI_Send>
			DC_DATA;
 8001d32:	2201      	movs	r2, #1
 8001d34:	2102      	movs	r1, #2
 8001d36:	4638      	mov	r0, r7
 8001d38:	f7fe feb9 	bl	8000aae <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8001d3c:	2700      	movs	r7, #0
 8001d3e:	e007      	b.n	8001d50 <ILI9341_Draw_Circle+0x248>
				ILI9341_SPI_Send(color >> 8);
 8001d40:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001d44:	f7ff fb5a 	bl	80013fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8001d48:	b2e0      	uxtb	r0, r4
 8001d4a:	f7ff fb57 	bl	80013fc <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8001d4e:	3701      	adds	r7, #1
 8001d50:	42bd      	cmp	r5, r7
 8001d52:	d8f5      	bhi.n	8001d40 <ILI9341_Draw_Circle+0x238>
		while (x < y) {
 8001d54:	45b1      	cmp	r9, r6
 8001d56:	da2b      	bge.n	8001db0 <ILI9341_Draw_Circle+0x2a8>
			if (f >= 0) {
 8001d58:	f1bb 0f00 	cmp.w	fp, #0
 8001d5c:	db04      	blt.n	8001d68 <ILI9341_Draw_Circle+0x260>
				y--;
 8001d5e:	3e01      	subs	r6, #1
				ddF_y += 2;
 8001d60:	9b02      	ldr	r3, [sp, #8]
 8001d62:	3302      	adds	r3, #2
 8001d64:	9302      	str	r3, [sp, #8]
				f += ddF_y;
 8001d66:	449b      	add	fp, r3
			x++;
 8001d68:	f109 0901 	add.w	r9, r9, #1
			ddF_x += 2;
 8001d6c:	9b03      	ldr	r3, [sp, #12]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	9303      	str	r3, [sp, #12]
			f += ddF_x;
 8001d72:	449b      	add	fp, r3
			ILI9341_Set_Address(x0 - x, y0 + y, x0 + x, y0 + y);
 8001d74:	f8cd 9004 	str.w	r9, [sp, #4]
 8001d78:	ebaa 0009 	sub.w	r0, sl, r9
 8001d7c:	9004      	str	r0, [sp, #16]
 8001d7e:	46b0      	mov	r8, r6
 8001d80:	9b00      	ldr	r3, [sp, #0]
 8001d82:	18f1      	adds	r1, r6, r3
 8001d84:	eb09 020a 	add.w	r2, r9, sl
 8001d88:	9205      	str	r2, [sp, #20]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	f7ff fd68 	bl	8001860 <ILI9341_Set_Address>
			DC_COMMAND;
 8001d90:	4d09      	ldr	r5, [pc, #36]	; (8001db8 <ILI9341_Draw_Circle+0x2b0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	2102      	movs	r1, #2
 8001d96:	4628      	mov	r0, r5
 8001d98:	f7fe fe89 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8001d9c:	202c      	movs	r0, #44	; 0x2c
 8001d9e:	f7ff fb2d 	bl	80013fc <ILI9341_SPI_Send>
			DC_DATA;
 8001da2:	2201      	movs	r2, #1
 8001da4:	2102      	movs	r1, #2
 8001da6:	4628      	mov	r0, r5
 8001da8:	f7fe fe81 	bl	8000aae <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8001dac:	2700      	movs	r7, #0
 8001dae:	e761      	b.n	8001c74 <ILI9341_Draw_Circle+0x16c>
}
 8001db0:	b007      	add	sp, #28
 8001db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001db6:	bf00      	nop
 8001db8:	40020000 	.word	0x40020000

08001dbc <ILI9341_Draw_String>:
{
 8001dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	460f      	mov	r7, r1
 8001dc6:	4692      	mov	sl, r2
 8001dc8:	469b      	mov	fp, r3
 8001dca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001dcc:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	switch (size)
 8001dd0:	46c1      	mov	r9, r8
 8001dd2:	f1b8 0f01 	cmp.w	r8, #1
 8001dd6:	d011      	beq.n	8001dfc <ILI9341_Draw_String+0x40>
 8001dd8:	f1b8 0f02 	cmp.w	r8, #2
 8001ddc:	d01b      	beq.n	8001e16 <ILI9341_Draw_String+0x5a>
}
 8001dde:	b003      	add	sp, #12
 8001de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8001de4:	f8cd 8004 	str.w	r8, [sp, #4]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	465b      	mov	r3, fp
 8001dec:	4652      	mov	r2, sl
 8001dee:	4639      	mov	r1, r7
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7ff fd43 	bl	800187c <ILI9341_Draw_Char>
			x += size*8-2;
 8001df6:	4434      	add	r4, r6
 8001df8:	3c02      	subs	r4, #2
			*str++;
 8001dfa:	3501      	adds	r5, #1
		while (*str)
 8001dfc:	782b      	ldrb	r3, [r5, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0ed      	beq.n	8001dde <ILI9341_Draw_String+0x22>
			if ((x+(size*8))>X_SIZE)
 8001e02:	ea4f 06c9 	mov.w	r6, r9, lsl #3
 8001e06:	1931      	adds	r1, r6, r4
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <ILI9341_Draw_String+0x98>)
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	4291      	cmp	r1, r2
 8001e0e:	d9e9      	bls.n	8001de4 <ILI9341_Draw_String+0x28>
				y = y + (size*8);
 8001e10:	4437      	add	r7, r6
				x = 1;
 8001e12:	2401      	movs	r4, #1
 8001e14:	e7e6      	b.n	8001de4 <ILI9341_Draw_String+0x28>
		hh=1;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <ILI9341_Draw_String+0x9c>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
		while (*str)
 8001e1c:	e00d      	b.n	8001e3a <ILI9341_Draw_String+0x7e>
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8001e1e:	f8cd 8004 	str.w	r8, [sp, #4]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	465b      	mov	r3, fp
 8001e26:	4652      	mov	r2, sl
 8001e28:	4639      	mov	r1, r7
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7ff fd26 	bl	800187c <ILI9341_Draw_Char>
			x += hh*8;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <ILI9341_Draw_String+0x9c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			*str++;
 8001e38:	3501      	adds	r5, #1
		while (*str)
 8001e3a:	782b      	ldrb	r3, [r5, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ce      	beq.n	8001dde <ILI9341_Draw_String+0x22>
			if ((x+(size*8))>X_SIZE)
 8001e40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e44:	1910      	adds	r0, r2, r4
 8001e46:	4903      	ldr	r1, [pc, #12]	; (8001e54 <ILI9341_Draw_String+0x98>)
 8001e48:	6809      	ldr	r1, [r1, #0]
 8001e4a:	4288      	cmp	r0, r1
 8001e4c:	d9e7      	bls.n	8001e1e <ILI9341_Draw_String+0x62>
				y = y + (size*8);
 8001e4e:	4417      	add	r7, r2
				x = 1;
 8001e50:	2401      	movs	r4, #1
 8001e52:	e7e4      	b.n	8001e1e <ILI9341_Draw_String+0x62>
 8001e54:	20000008 	.word	0x20000008
 8001e58:	200000bc 	.word	0x200000bc

08001e5c <ILI9341_Draw_Double_Pixel>:
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	db25      	blt.n	8001eac <ILI9341_Draw_Double_Pixel+0x50>
 8001e60:	2900      	cmp	r1, #0
 8001e62:	db23      	blt.n	8001eac <ILI9341_Draw_Double_Pixel+0x50>
{
 8001e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8001e66:	4c12      	ldr	r4, [pc, #72]	; (8001eb0 <ILI9341_Draw_Double_Pixel+0x54>)
 8001e68:	6826      	ldr	r6, [r4, #0]
 8001e6a:	42b0      	cmp	r0, r6
 8001e6c:	d202      	bcs.n	8001e74 <ILI9341_Draw_Double_Pixel+0x18>
 8001e6e:	6867      	ldr	r7, [r4, #4]
 8001e70:	42b9      	cmp	r1, r7
 8001e72:	d300      	bcc.n	8001e76 <ILI9341_Draw_Double_Pixel+0x1a>
}
 8001e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e76:	461d      	mov	r5, r3
 8001e78:	4614      	mov	r4, r2
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8001e7a:	1e7b      	subs	r3, r7, #1
 8001e7c:	1e72      	subs	r2, r6, #1
 8001e7e:	f7ff fcef 	bl	8001860 <ILI9341_Set_Address>
	DC_COMMAND;
 8001e82:	4e0c      	ldr	r6, [pc, #48]	; (8001eb4 <ILI9341_Draw_Double_Pixel+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	2102      	movs	r1, #2
 8001e88:	4630      	mov	r0, r6
 8001e8a:	f7fe fe10 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8001e8e:	202c      	movs	r0, #44	; 0x2c
 8001e90:	f7ff fab4 	bl	80013fc <ILI9341_SPI_Send>
	DC_DATA;
 8001e94:	2201      	movs	r2, #1
 8001e96:	2102      	movs	r1, #2
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f7fe fe08 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color1);
 8001e9e:	b2e0      	uxtb	r0, r4
 8001ea0:	f7ff faac 	bl	80013fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color2);
 8001ea4:	b2e8      	uxtb	r0, r5
 8001ea6:	f7ff faa9 	bl	80013fc <ILI9341_SPI_Send>
 8001eaa:	e7e3      	b.n	8001e74 <ILI9341_Draw_Double_Pixel+0x18>
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <MX_GPIO_Init>:
}

/** Pinout Configuration
*/
static void MX_GPIO_Init(void)
{
 8001eb8:	b500      	push	{lr}
 8001eba:	b08b      	sub	sp, #44	; 0x2c

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	9200      	str	r2, [sp, #0]
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <MX_GPIO_Init+0x88>)
 8001ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec4:	f041 0101 	orr.w	r1, r1, #1
 8001ec8:	6319      	str	r1, [r3, #48]	; 0x30
 8001eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ecc:	f001 0101 	and.w	r1, r1, #1
 8001ed0:	9100      	str	r1, [sp, #0]
 8001ed2:	9900      	ldr	r1, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed4:	9201      	str	r2, [sp, #4]
 8001ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed8:	f041 0102 	orr.w	r1, r1, #2
 8001edc:	6319      	str	r1, [r3, #48]	; 0x30
 8001ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee0:	f001 0102 	and.w	r1, r1, #2
 8001ee4:	9101      	str	r1, [sp, #4]
 8001ee6:	9901      	ldr	r1, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee8:	9202      	str	r2, [sp, #8]
 8001eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eec:	f041 0104 	orr.w	r1, r1, #4
 8001ef0:	6319      	str	r1, [r3, #48]	; 0x30
 8001ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef4:	f001 0104 	and.w	r1, r1, #4
 8001ef8:	9102      	str	r1, [sp, #8]
 8001efa:	9902      	ldr	r1, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001efc:	9203      	str	r2, [sp, #12]
 8001efe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f00:	f041 0108 	orr.w	r1, r1, #8
 8001f04:	6319      	str	r1, [r3, #48]	; 0x30
 8001f06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f08:	f001 0108 	and.w	r1, r1, #8
 8001f0c:	9103      	str	r1, [sp, #12]
 8001f0e:	9903      	ldr	r1, [sp, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001f10:	9204      	str	r2, [sp, #16]
 8001f12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f14:	f041 0110 	orr.w	r1, r1, #16
 8001f18:	6319      	str	r1, [r3, #48]	; 0x30
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	9304      	str	r3, [sp, #16]
 8001f22:	9b04      	ldr	r3, [sp, #16]

	GPIO_InitStruct.Pin 	= DC_Pin | CS_Pin | RESET_Pin;
 8001f24:	2307      	movs	r3, #7
 8001f26:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001f2c:	9207      	str	r2, [sp, #28]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8001f2e:	9208      	str	r2, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	a905      	add	r1, sp, #20
 8001f32:	4804      	ldr	r0, [pc, #16]	; (8001f44 <MX_GPIO_Init+0x8c>)
 8001f34:	f7fe fce2 	bl	80008fc <HAL_GPIO_Init>

}
 8001f38:	b00b      	add	sp, #44	; 0x2c
 8001f3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000

08001f48 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001f48:	e7fe      	b.n	8001f48 <_Error_Handler>
	...

08001f4c <SystemClock_Config>:
{
 8001f4c:	b500      	push	{lr}
 8001f4e:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <SystemClock_Config+0xb4>)
 8001f56:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001f58:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001f5c:	6411      	str	r1, [r2, #64]	; 0x40
 8001f5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f60:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	4a26      	ldr	r2, [pc, #152]	; (8002004 <SystemClock_Config+0xb8>)
 8001f6c:	6811      	ldr	r1, [r2, #0]
 8001f6e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001f72:	6011      	str	r1, [r2, #0]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001f7a:	9202      	str	r2, [sp, #8]
 8001f7c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f7e:	2202      	movs	r2, #2
 8001f80:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f82:	2101      	movs	r1, #1
 8001f84:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f86:	2110      	movs	r1, #16
 8001f88:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f8c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f8e:	2308      	movs	r3, #8
 8001f90:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001f92:	22c0      	movs	r2, #192	; 0xc0
 8001f94:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f96:	2204      	movs	r2, #4
 8001f98:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001f9a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9c:	a808      	add	r0, sp, #32
 8001f9e:	f7fe fd8d 	bl	8000abc <HAL_RCC_OscConfig>
 8001fa2:	bb20      	cbnz	r0, 8001fee <SystemClock_Config+0xa2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fb4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fba:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fbc:	2103      	movs	r1, #3
 8001fbe:	a803      	add	r0, sp, #12
 8001fc0:	f7fe ffb4 	bl	8000f2c <HAL_RCC_ClockConfig>
 8001fc4:	b9b8      	cbnz	r0, 8001ff6 <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001fc6:	f7ff f85d 	bl	8001084 <HAL_RCC_GetHCLKFreq>
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <SystemClock_Config+0xbc>)
 8001fcc:	fba3 3000 	umull	r3, r0, r3, r0
 8001fd0:	0980      	lsrs	r0, r0, #6
 8001fd2:	f7fe fc67 	bl	80008a4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001fd6:	2004      	movs	r0, #4
 8001fd8:	f7fe fc7a 	bl	80008d0 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4611      	mov	r1, r2
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f7fe fc2a 	bl	800083c <HAL_NVIC_SetPriority>
}
 8001fe8:	b015      	add	sp, #84	; 0x54
 8001fea:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001fee:	219f      	movs	r1, #159	; 0x9f
 8001ff0:	4806      	ldr	r0, [pc, #24]	; (800200c <SystemClock_Config+0xc0>)
 8001ff2:	f7ff ffa9 	bl	8001f48 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001ff6:	21ad      	movs	r1, #173	; 0xad
 8001ff8:	4804      	ldr	r0, [pc, #16]	; (800200c <SystemClock_Config+0xc0>)
 8001ffa:	f7ff ffa5 	bl	8001f48 <_Error_Handler>
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000
 8002008:	10624dd3 	.word	0x10624dd3
 800200c:	0803dcc8 	.word	0x0803dcc8

08002010 <main>:
{
 8002010:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 8002012:	f7fe fbc1 	bl	8000798 <HAL_Init>
  SystemClock_Config();
 8002016:	f7ff ff99 	bl	8001f4c <SystemClock_Config>
  MX_GPIO_Init();
 800201a:	f7ff ff4d 	bl	8001eb8 <MX_GPIO_Init>
  ILI9341_Init();
 800201e:	f7ff fabf 	bl	80015a0 <ILI9341_Init>
  ILI9341_Set_Rotation(0);
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff fbbe 	bl	80017a4 <ILI9341_Set_Rotation>
  HAL_Delay(500);
 8002028:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800202c:	f7fe fbe0 	bl	80007f0 <HAL_Delay>
  ILI9341_Fill_Screen(RED);
 8002030:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002034:	f7ff fcae 	bl	8001994 <ILI9341_Fill_Screen>
  HAL_Delay(500);
 8002038:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800203c:	f7fe fbd8 	bl	80007f0 <HAL_Delay>
  ILI9341_Fill_Screen(GREEN);
 8002040:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002044:	f7ff fca6 	bl	8001994 <ILI9341_Fill_Screen>
  HAL_Delay(500);
 8002048:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800204c:	f7fe fbd0 	bl	80007f0 <HAL_Delay>
  ILI9341_Fill_Screen(BLUE);
 8002050:	201f      	movs	r0, #31
 8002052:	f7ff fc9f 	bl	8001994 <ILI9341_Fill_Screen>
  HAL_Delay(500);
 8002056:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800205a:	f7fe fbc9 	bl	80007f0 <HAL_Delay>
  ILI9341_Fill_Screen(BLACK);
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff fc98 	bl	8001994 <ILI9341_Fill_Screen>
  HAL_Delay(500);
 8002064:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002068:	f7fe fbc2 	bl	80007f0 <HAL_Delay>
  Display_Menu();
 800206c:	f7fe fa82 	bl	8000574 <Display_Menu>
  TP_Init();
 8002070:	f000 f900 	bl	8002274 <TP_Init>
 8002074:	e016      	b.n	80020a4 <main+0x94>
				  Display_Color_Picture();
 8002076:	f7fe fb43 	bl	8000700 <Display_Color_Picture>
				  state = 1;
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <main+0x110>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e033      	b.n	80020ea <main+0xda>
			  if(xtemp > 3400 && xtemp < 3900 && ytemp > 350 && ytemp < 750) {
 8002082:	f6a4 5449 	subw	r4, r4, #3401	; 0xd49
 8002086:	b2a4      	uxth	r4, r4
 8002088:	f5b4 7ff9 	cmp.w	r4, #498	; 0x1f2
 800208c:	d806      	bhi.n	800209c <main+0x8c>
 800208e:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
 8002092:	d903      	bls.n	800209c <main+0x8c>
 8002094:	f240 23ed 	movw	r3, #749	; 0x2ed
 8002098:	4298      	cmp	r0, r3
 800209a:	d93b      	bls.n	8002114 <main+0x104>
		  HAL_Delay(500);
 800209c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020a0:	f7fe fba6 	bl	80007f0 <HAL_Delay>
	  tp_dev.scan(0);
 80020a4:	4c1f      	ldr	r4, [pc, #124]	; (8002124 <main+0x114>)
 80020a6:	6863      	ldr	r3, [r4, #4]
 80020a8:	2000      	movs	r0, #0
 80020aa:	4798      	blx	r3
	  if(tp_dev.sta & TP_PRES_DOWN)
 80020ac:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	daf7      	bge.n	80020a4 <main+0x94>
		  xtemp = TP_Read_XOY(0xD0);
 80020b4:	20d0      	movs	r0, #208	; 0xd0
 80020b6:	f000 f989 	bl	80023cc <TP_Read_XOY>
 80020ba:	4604      	mov	r4, r0
		  ytemp = TP_Read_XOY(0x90);
 80020bc:	2090      	movs	r0, #144	; 0x90
 80020be:	f000 f985 	bl	80023cc <TP_Read_XOY>
 80020c2:	4605      	mov	r5, r0
		  if(0 == state)
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <main+0x110>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1da      	bne.n	8002082 <main+0x72>
			  if(xtemp > 2700 && xtemp < 3400 && ytemp > 3000 && ytemp < 3500) {
 80020cc:	f6a4 238d 	subw	r3, r4, #2701	; 0xa8d
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f240 22ba 	movw	r2, #698	; 0x2ba
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d807      	bhi.n	80020ea <main+0xda>
 80020da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80020de:	4298      	cmp	r0, r3
 80020e0:	d903      	bls.n	80020ea <main+0xda>
 80020e2:	f640 53ab 	movw	r3, #3499	; 0xdab
 80020e6:	4298      	cmp	r0, r3
 80020e8:	d9c5      	bls.n	8002076 <main+0x66>
			  if(xtemp > 1200 && xtemp < 1900 && ytemp > 3000 && ytemp < 3500) {
 80020ea:	f2a4 44b1 	subw	r4, r4, #1201	; 0x4b1
 80020ee:	b2a4      	uxth	r4, r4
 80020f0:	f240 23ba 	movw	r3, #698	; 0x2ba
 80020f4:	429c      	cmp	r4, r3
 80020f6:	d8d1      	bhi.n	800209c <main+0x8c>
 80020f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80020fc:	429d      	cmp	r5, r3
 80020fe:	d9cd      	bls.n	800209c <main+0x8c>
 8002100:	f640 53ab 	movw	r3, #3499	; 0xdab
 8002104:	429d      	cmp	r5, r3
 8002106:	d8c9      	bhi.n	800209c <main+0x8c>
				  Display_Text();
 8002108:	f7fe faac 	bl	8000664 <Display_Text>
				  state = 1;
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <main+0x110>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e7c3      	b.n	800209c <main+0x8c>
				  Display_Menu();
 8002114:	f7fe fa2e 	bl	8000574 <Display_Menu>
				  state = 0;
 8002118:	4b01      	ldr	r3, [pc, #4]	; (8002120 <main+0x110>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e7bd      	b.n	800209c <main+0x8c>
 8002120:	200000b4 	.word	0x200000b4
 8002124:	20000018 	.word	0x20000018

08002128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002128:	b510      	push	{r4, lr}
 800212a:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212c:	2400      	movs	r4, #0
 800212e:	9400      	str	r4, [sp, #0]
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_MspInit+0x90>)
 8002132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
 800213a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002140:	9200      	str	r2, [sp, #0]
 8002142:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002144:	9401      	str	r4, [sp, #4]
 8002146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002148:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002158:	2007      	movs	r0, #7
 800215a:	f7fe fb5d 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800215e:	4622      	mov	r2, r4
 8002160:	4621      	mov	r1, r4
 8002162:	f06f 000b 	mvn.w	r0, #11
 8002166:	f7fe fb69 	bl	800083c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800216a:	4622      	mov	r2, r4
 800216c:	4621      	mov	r1, r4
 800216e:	f06f 000a 	mvn.w	r0, #10
 8002172:	f7fe fb63 	bl	800083c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002176:	4622      	mov	r2, r4
 8002178:	4621      	mov	r1, r4
 800217a:	f06f 0009 	mvn.w	r0, #9
 800217e:	f7fe fb5d 	bl	800083c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002182:	4622      	mov	r2, r4
 8002184:	4621      	mov	r1, r4
 8002186:	f06f 0004 	mvn.w	r0, #4
 800218a:	f7fe fb57 	bl	800083c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800218e:	4622      	mov	r2, r4
 8002190:	4621      	mov	r1, r4
 8002192:	f06f 0003 	mvn.w	r0, #3
 8002196:	f7fe fb51 	bl	800083c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800219a:	4622      	mov	r2, r4
 800219c:	4621      	mov	r1, r4
 800219e:	f06f 0001 	mvn.w	r0, #1
 80021a2:	f7fe fb4b 	bl	800083c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80021a6:	4622      	mov	r2, r4
 80021a8:	4621      	mov	r1, r4
 80021aa:	f04f 30ff 	mov.w	r0, #4294967295
 80021ae:	f7fe fb45 	bl	800083c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b2:	b002      	add	sp, #8
 80021b4:	bd10      	pop	{r4, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800

080021bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80021bc:	6802      	ldr	r2, [r0, #0]
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_SPI_MspInit+0x48>)
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d000      	beq.n	80021c6 <HAL_SPI_MspInit+0xa>
 80021c4:	4770      	bx	lr
{
 80021c6:	b500      	push	{lr}
 80021c8:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ca:	2100      	movs	r1, #0
 80021cc:	9100      	str	r1, [sp, #0]
 80021ce:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80021d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021d8:	645a      	str	r2, [r3, #68]	; 0x44
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin 	= GPIO_PIN_5|GPIO_PIN_5|GPIO_PIN_7;
 80021e4:	23a0      	movs	r3, #160	; 0xa0
 80021e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode 	= GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80021ec:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021f2:	2305      	movs	r3, #5
 80021f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	a901      	add	r1, sp, #4
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <HAL_SPI_MspInit+0x4c>)
 80021fa:	f7fe fb7f 	bl	80008fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021fe:	b007      	add	sp, #28
 8002200:	f85d fb04 	ldr.w	pc, [sp], #4
 8002204:	40013000 	.word	0x40013000
 8002208:	40020000 	.word	0x40020000

0800220c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800220c:	4770      	bx	lr

0800220e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800220e:	e7fe      	b.n	800220e <HardFault_Handler>

08002210 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler>

08002212 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler>

08002214 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002214:	e7fe      	b.n	8002214 <UsageFault_Handler>

08002216 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002216:	4770      	bx	lr

08002218 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002218:	4770      	bx	lr

0800221a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800221a:	4770      	bx	lr

0800221c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800221c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800221e:	f7fe fad5 	bl	80007cc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002222:	f7fe fb66 	bl	80008f2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002226:	bd08      	pop	{r3, pc}

08002228 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	490f      	ldr	r1, [pc, #60]	; (8002268 <SystemInit+0x40>)
 800222a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800222e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <SystemInit+0x44>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002240:	2000      	movs	r0, #0
 8002242:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800224a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800224e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <SystemInit+0x48>)
 8002252:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800225a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800225c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800225e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002262:	608b      	str	r3, [r1, #8]
#endif
}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00
 800226c:	40023800 	.word	0x40023800
 8002270:	24003010 	.word	0x24003010

08002274 <TP_Init>:
 * @parameters :None
 * @retvalue   :0-no calibration
								1-Has been calibrated
******************************************************************************/
uint8_t TP_Init(void)
{
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin 	= T_IRQ_Pin | T_DO_Pin;
 8002278:	2306      	movs	r3, #6
 800227a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 800227c:	2400      	movs	r4, #0
 800227e:	9402      	str	r4, [sp, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8002280:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8002282:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002284:	4e0c      	ldr	r6, [pc, #48]	; (80022b8 <TP_Init+0x44>)
 8002286:	a901      	add	r1, sp, #4
 8002288:	4630      	mov	r0, r6
 800228a:	f7fe fb37 	bl	80008fc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= T_CLK_Pin;
 800228e:	2501      	movs	r5, #1
 8002290:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8002292:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8002294:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8002296:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	a901      	add	r1, sp, #4
 800229a:	4630      	mov	r0, r6
 800229c:	f7fe fb2e 	bl	80008fc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= T_DIN_Pin | T_CS_Pin;
 80022a0:	2330      	movs	r3, #48	; 0x30
 80022a2:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 80022a4:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80022a6:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 80022a8:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022aa:	a901      	add	r1, sp, #4
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <TP_Init+0x48>)
 80022ae:	f7fe fb25 	bl	80008fc <HAL_GPIO_Init>

	return 1;
}
 80022b2:	4628      	mov	r0, r5
 80022b4:	b006      	add	sp, #24
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40020800 	.word	0x40020800

080022c0 <TP_Write_Byte>:
{
 80022c0:	b570      	push	{r4, r5, r6, lr}
 80022c2:	4605      	mov	r5, r0
	for(count = 0; count < 8; count++)
 80022c4:	2400      	movs	r4, #0
 80022c6:	e016      	b.n	80022f6 <TP_Write_Byte+0x36>
			T_DIN_ON;
 80022c8:	2201      	movs	r2, #1
 80022ca:	2110      	movs	r1, #16
 80022cc:	4810      	ldr	r0, [pc, #64]	; (8002310 <TP_Write_Byte+0x50>)
 80022ce:	f7fe fbee 	bl	8000aae <HAL_GPIO_WritePin>
		num <<= 1;
 80022d2:	006d      	lsls	r5, r5, #1
 80022d4:	b2ed      	uxtb	r5, r5
		T_CLK_OFF;
 80022d6:	4e0f      	ldr	r6, [pc, #60]	; (8002314 <TP_Write_Byte+0x54>)
 80022d8:	2200      	movs	r2, #0
 80022da:	2101      	movs	r1, #1
 80022dc:	4630      	mov	r0, r6
 80022de:	f7fe fbe6 	bl	8000aae <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f7fe fa84 	bl	80007f0 <HAL_Delay>
		T_CLK_ON;
 80022e8:	2201      	movs	r2, #1
 80022ea:	4611      	mov	r1, r2
 80022ec:	4630      	mov	r0, r6
 80022ee:	f7fe fbde 	bl	8000aae <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 80022f2:	3401      	adds	r4, #1
 80022f4:	b2e4      	uxtb	r4, r4
 80022f6:	2c07      	cmp	r4, #7
 80022f8:	d808      	bhi.n	800230c <TP_Write_Byte+0x4c>
		if(num & 0x80)
 80022fa:	f015 0f80 	tst.w	r5, #128	; 0x80
 80022fe:	d1e3      	bne.n	80022c8 <TP_Write_Byte+0x8>
			T_DIN_OFF;
 8002300:	2200      	movs	r2, #0
 8002302:	2110      	movs	r1, #16
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <TP_Write_Byte+0x50>)
 8002306:	f7fe fbd2 	bl	8000aae <HAL_GPIO_WritePin>
 800230a:	e7e2      	b.n	80022d2 <TP_Write_Byte+0x12>
}
 800230c:	bd70      	pop	{r4, r5, r6, pc}
 800230e:	bf00      	nop
 8002310:	40020800 	.word	0x40020800
 8002314:	40020400 	.word	0x40020400

08002318 <TP_Read_AD>:
{
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	4606      	mov	r6, r0
	T_CLK_OFF;
 800231c:	4c29      	ldr	r4, [pc, #164]	; (80023c4 <TP_Read_AD+0xac>)
 800231e:	2200      	movs	r2, #0
 8002320:	2101      	movs	r1, #1
 8002322:	4620      	mov	r0, r4
 8002324:	f7fe fbc3 	bl	8000aae <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8002328:	4d27      	ldr	r5, [pc, #156]	; (80023c8 <TP_Read_AD+0xb0>)
 800232a:	2200      	movs	r2, #0
 800232c:	2110      	movs	r1, #16
 800232e:	4628      	mov	r0, r5
 8002330:	f7fe fbbd 	bl	8000aae <HAL_GPIO_WritePin>
	T_CS_OFF;
 8002334:	2200      	movs	r2, #0
 8002336:	2120      	movs	r1, #32
 8002338:	4628      	mov	r0, r5
 800233a:	f7fe fbb8 	bl	8000aae <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 800233e:	4630      	mov	r0, r6
 8002340:	f7ff ffbe 	bl	80022c0 <TP_Write_Byte>
	HAL_Delay(6);
 8002344:	2006      	movs	r0, #6
 8002346:	f7fe fa53 	bl	80007f0 <HAL_Delay>
	T_CLK_OFF;
 800234a:	2200      	movs	r2, #0
 800234c:	2101      	movs	r1, #1
 800234e:	4620      	mov	r0, r4
 8002350:	f7fe fbad 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002354:	2001      	movs	r0, #1
 8002356:	f7fe fa4b 	bl	80007f0 <HAL_Delay>
	T_CLK_ON;
 800235a:	2201      	movs	r2, #1
 800235c:	4611      	mov	r1, r2
 800235e:	4620      	mov	r0, r4
 8002360:	f7fe fba5 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002364:	2001      	movs	r0, #1
 8002366:	f7fe fa43 	bl	80007f0 <HAL_Delay>
	T_CLK_OFF;
 800236a:	2200      	movs	r2, #0
 800236c:	2101      	movs	r1, #1
 800236e:	4620      	mov	r0, r4
 8002370:	f7fe fb9d 	bl	8000aae <HAL_GPIO_WritePin>
	uint16_t Num = 0;
 8002374:	2400      	movs	r4, #0
	for(count = 0; count < 16; count++)
 8002376:	4625      	mov	r5, r4
 8002378:	e001      	b.n	800237e <TP_Read_AD+0x66>
 800237a:	3501      	adds	r5, #1
 800237c:	b2ed      	uxtb	r5, r5
 800237e:	2d0f      	cmp	r5, #15
 8002380:	d818      	bhi.n	80023b4 <TP_Read_AD+0x9c>
		Num <<= 1;
 8002382:	0064      	lsls	r4, r4, #1
 8002384:	b2a4      	uxth	r4, r4
		T_CLK_OFF;
 8002386:	4e0f      	ldr	r6, [pc, #60]	; (80023c4 <TP_Read_AD+0xac>)
 8002388:	2200      	movs	r2, #0
 800238a:	2101      	movs	r1, #1
 800238c:	4630      	mov	r0, r6
 800238e:	f7fe fb8e 	bl	8000aae <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002392:	2001      	movs	r0, #1
 8002394:	f7fe fa2c 	bl	80007f0 <HAL_Delay>
		T_CLK_ON;
 8002398:	2201      	movs	r2, #1
 800239a:	4611      	mov	r1, r2
 800239c:	4630      	mov	r0, r6
 800239e:	f7fe fb86 	bl	8000aae <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 80023a2:	2104      	movs	r1, #4
 80023a4:	4630      	mov	r0, r6
 80023a6:	f7fe fb7b 	bl	8000aa0 <HAL_GPIO_ReadPin>
 80023aa:	2800      	cmp	r0, #0
 80023ac:	d0e5      	beq.n	800237a <TP_Read_AD+0x62>
 80023ae:	3401      	adds	r4, #1
 80023b0:	b2a4      	uxth	r4, r4
 80023b2:	e7e2      	b.n	800237a <TP_Read_AD+0x62>
	Num >>= 4;
 80023b4:	0924      	lsrs	r4, r4, #4
	T_CS_ON;
 80023b6:	2201      	movs	r2, #1
 80023b8:	2120      	movs	r1, #32
 80023ba:	4803      	ldr	r0, [pc, #12]	; (80023c8 <TP_Read_AD+0xb0>)
 80023bc:	f7fe fb77 	bl	8000aae <HAL_GPIO_WritePin>
}
 80023c0:	4620      	mov	r0, r4
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
 80023c4:	40020400 	.word	0x40020400
 80023c8:	40020800 	.word	0x40020800

080023cc <TP_Read_XOY>:
{
 80023cc:	b530      	push	{r4, r5, lr}
 80023ce:	b085      	sub	sp, #20
 80023d0:	4605      	mov	r5, r0
	for(i=0;i<READ_TIMES;i++) buf[i] = TP_Read_AD(xy);
 80023d2:	2400      	movs	r4, #0
 80023d4:	e009      	b.n	80023ea <TP_Read_XOY+0x1e>
 80023d6:	4628      	mov	r0, r5
 80023d8:	f7ff ff9e 	bl	8002318 <TP_Read_AD>
 80023dc:	ab04      	add	r3, sp, #16
 80023de:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80023e2:	f823 0c0c 	strh.w	r0, [r3, #-12]
 80023e6:	3401      	adds	r4, #1
 80023e8:	b2a4      	uxth	r4, r4
 80023ea:	2c04      	cmp	r4, #4
 80023ec:	d9f3      	bls.n	80023d6 <TP_Read_XOY+0xa>
	for(i=0;i<READ_TIMES-1; i++)
 80023ee:	2000      	movs	r0, #0
 80023f0:	e01b      	b.n	800242a <TP_Read_XOY+0x5e>
		for(j = i+1; j < READ_TIMES; j++)
 80023f2:	3301      	adds	r3, #1
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d816      	bhi.n	8002428 <TP_Read_XOY+0x5c>
			if(buf[i] > buf[j])
 80023fa:	aa04      	add	r2, sp, #16
 80023fc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002400:	f832 2c0c 	ldrh.w	r2, [r2, #-12]
 8002404:	a904      	add	r1, sp, #16
 8002406:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800240a:	f831 1c0c 	ldrh.w	r1, [r1, #-12]
 800240e:	428a      	cmp	r2, r1
 8002410:	d9ef      	bls.n	80023f2 <TP_Read_XOY+0x26>
				buf[i] = buf[j];
 8002412:	ad04      	add	r5, sp, #16
 8002414:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 8002418:	f825 1c0c 	strh.w	r1, [r5, #-12]
				buf[j] = temp;
 800241c:	a904      	add	r1, sp, #16
 800241e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8002422:	f821 2c0c 	strh.w	r2, [r1, #-12]
 8002426:	e7e4      	b.n	80023f2 <TP_Read_XOY+0x26>
	for(i=0;i<READ_TIMES-1; i++)
 8002428:	4620      	mov	r0, r4
 800242a:	2803      	cmp	r0, #3
 800242c:	d803      	bhi.n	8002436 <TP_Read_XOY+0x6a>
		for(j = i+1; j < READ_TIMES; j++)
 800242e:	1c44      	adds	r4, r0, #1
 8002430:	b2a4      	uxth	r4, r4
 8002432:	4623      	mov	r3, r4
 8002434:	e7df      	b.n	80023f6 <TP_Read_XOY+0x2a>
	sum = 0;
 8002436:	2000      	movs	r0, #0
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
 8002438:	2301      	movs	r3, #1
 800243a:	e008      	b.n	800244e <TP_Read_XOY+0x82>
 800243c:	aa04      	add	r2, sp, #16
 800243e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002442:	f832 2c0c 	ldrh.w	r2, [r2, #-12]
 8002446:	4410      	add	r0, r2
 8002448:	b280      	uxth	r0, r0
 800244a:	3301      	adds	r3, #1
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b03      	cmp	r3, #3
 8002450:	d9f4      	bls.n	800243c <TP_Read_XOY+0x70>
	temp = sum / (READ_TIMES - 2 * LOST_VAL);
 8002452:	4b03      	ldr	r3, [pc, #12]	; (8002460 <TP_Read_XOY+0x94>)
 8002454:	fba3 3000 	umull	r3, r0, r3, r0
}
 8002458:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800245c:	b005      	add	sp, #20
 800245e:	bd30      	pop	{r4, r5, pc}
 8002460:	aaaaaaab 	.word	0xaaaaaaab

08002464 <TP_Read_XY>:
{
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	4606      	mov	r6, r0
 8002468:	460d      	mov	r5, r1
	xtemp = TP_Read_XOY(CMD_RDX);
 800246a:	4c06      	ldr	r4, [pc, #24]	; (8002484 <TP_Read_XY+0x20>)
 800246c:	7820      	ldrb	r0, [r4, #0]
 800246e:	f7ff ffad 	bl	80023cc <TP_Read_XOY>
 8002472:	4607      	mov	r7, r0
	ytemp = TP_Read_XOY(CMD_RDY);
 8002474:	7860      	ldrb	r0, [r4, #1]
 8002476:	f7ff ffa9 	bl	80023cc <TP_Read_XOY>
	*x = xtemp;
 800247a:	8037      	strh	r7, [r6, #0]
	*y = ytemp;
 800247c:	8028      	strh	r0, [r5, #0]
}
 800247e:	2001      	movs	r0, #1
 8002480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002482:	bf00      	nop
 8002484:	20000014 	.word	0x20000014

08002488 <TP_Read_XY2>:
{
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	4605      	mov	r5, r0
 800248e:	460c      	mov	r4, r1
    flag = TP_Read_XY(&x1 ,&y1);
 8002490:	a901      	add	r1, sp, #4
 8002492:	f10d 0006 	add.w	r0, sp, #6
 8002496:	f7ff ffe5 	bl	8002464 <TP_Read_XY>
    if(flag == 0)
 800249a:	4603      	mov	r3, r0
 800249c:	b910      	cbnz	r0, 80024a4 <TP_Read_XY2+0x1c>
}
 800249e:	4618      	mov	r0, r3
 80024a0:	b002      	add	sp, #8
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
    flag = TP_Read_XY(&x2, &y2);
 80024a4:	4669      	mov	r1, sp
 80024a6:	f10d 0002 	add.w	r0, sp, #2
 80024aa:	f7ff ffdb 	bl	8002464 <TP_Read_XY>
    if(flag == 0)
 80024ae:	4603      	mov	r3, r0
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d0f4      	beq.n	800249e <TP_Read_XY2+0x16>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 80024b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80024b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d803      	bhi.n	80024c8 <TP_Read_XY2+0x40>
 80024c0:	f102 0132 	add.w	r1, r2, #50	; 0x32
 80024c4:	428b      	cmp	r3, r1
 80024c6:	db05      	blt.n	80024d4 <TP_Read_XY2+0x4c>
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d31e      	bcc.n	800250a <TP_Read_XY2+0x82>
 80024cc:	f103 0132 	add.w	r1, r3, #50	; 0x32
 80024d0:	428a      	cmp	r2, r1
 80024d2:	da1c      	bge.n	800250e <TP_Read_XY2+0x86>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 80024d4:	f8bd 0000 	ldrh.w	r0, [sp]
 80024d8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80024dc:	4288      	cmp	r0, r1
 80024de:	d803      	bhi.n	80024e8 <TP_Read_XY2+0x60>
 80024e0:	f100 0632 	add.w	r6, r0, #50	; 0x32
 80024e4:	42b1      	cmp	r1, r6
 80024e6:	db04      	blt.n	80024f2 <TP_Read_XY2+0x6a>
 80024e8:	4288      	cmp	r0, r1
 80024ea:	d312      	bcc.n	8002512 <TP_Read_XY2+0x8a>
 80024ec:	3132      	adds	r1, #50	; 0x32
 80024ee:	4288      	cmp	r0, r1
 80024f0:	da11      	bge.n	8002516 <TP_Read_XY2+0x8e>
        *x = (x1 + x2) / 2;
 80024f2:	4413      	add	r3, r2
 80024f4:	105b      	asrs	r3, r3, #1
 80024f6:	802b      	strh	r3, [r5, #0]
        *y = (y1 + y2) / 2;
 80024f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80024fc:	f8bd 2000 	ldrh.w	r2, [sp]
 8002500:	4413      	add	r3, r2
 8002502:	105b      	asrs	r3, r3, #1
 8002504:	8023      	strh	r3, [r4, #0]
        return 1;
 8002506:	2301      	movs	r3, #1
 8002508:	e7c9      	b.n	800249e <TP_Read_XY2+0x16>
    	return 0;
 800250a:	2300      	movs	r3, #0
 800250c:	e7c7      	b.n	800249e <TP_Read_XY2+0x16>
 800250e:	2300      	movs	r3, #0
 8002510:	e7c5      	b.n	800249e <TP_Read_XY2+0x16>
 8002512:	2300      	movs	r3, #0
 8002514:	e7c3      	b.n	800249e <TP_Read_XY2+0x16>
 8002516:	2300      	movs	r3, #0
 8002518:	e7c1      	b.n	800249e <TP_Read_XY2+0x16>
	...

0800251c <TP_Scan>:
{
 800251c:	b510      	push	{r4, lr}
 800251e:	4604      	mov	r4, r0
	if(T_IRQ == 0)
 8002520:	2102      	movs	r1, #2
 8002522:	4833      	ldr	r0, [pc, #204]	; (80025f0 <TP_Scan+0xd4>)
 8002524:	f7fe fabc 	bl	8000aa0 <HAL_GPIO_ReadPin>
 8002528:	2800      	cmp	r0, #0
 800252a:	d149      	bne.n	80025c0 <TP_Scan+0xa4>
		if(tp)
 800252c:	b194      	cbz	r4, 8002554 <TP_Scan+0x38>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 800252e:	4831      	ldr	r0, [pc, #196]	; (80025f4 <TP_Scan+0xd8>)
 8002530:	f100 0112 	add.w	r1, r0, #18
 8002534:	3010      	adds	r0, #16
 8002536:	f7ff ffa7 	bl	8002488 <TP_Read_XY2>
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 800253a:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <TP_Scan+0xd8>)
 800253c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db4a      	blt.n	80025da <TP_Scan+0xbe>
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <TP_Scan+0xd8>)
 8002546:	22c0      	movs	r2, #192	; 0xc0
 8002548:	751a      	strb	r2, [r3, #20]
			tp_dev.x0 = tp_dev.x;
 800254a:	8a1a      	ldrh	r2, [r3, #16]
 800254c:	819a      	strh	r2, [r3, #12]
			tp_dev.y0 = tp_dev.y;
 800254e:	8a5a      	ldrh	r2, [r3, #18]
 8002550:	81da      	strh	r2, [r3, #14]
 8002552:	e042      	b.n	80025da <TP_Scan+0xbe>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8002554:	4827      	ldr	r0, [pc, #156]	; (80025f4 <TP_Scan+0xd8>)
 8002556:	f100 0112 	add.w	r1, r0, #18
 800255a:	3010      	adds	r0, #16
 800255c:	f7ff ff94 	bl	8002488 <TP_Read_XY2>
 8002560:	2800      	cmp	r0, #0
 8002562:	d0ea      	beq.n	800253a <TP_Scan+0x1e>
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <TP_Scan+0xd8>)
 8002566:	ed93 7a06 	vldr	s14, [r3, #24]
 800256a:	8a1a      	ldrh	r2, [r3, #16]
 800256c:	ee07 2a90 	vmov	s15, r2
 8002570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002574:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002578:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800257c:	ee07 2a90 	vmov	s15, r2
 8002580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002584:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258c:	ee17 2a90 	vmov	r2, s15
 8002590:	821a      	strh	r2, [r3, #16]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8002592:	ed93 7a07 	vldr	s14, [r3, #28]
 8002596:	8a5a      	ldrh	r2, [r3, #18]
 8002598:	ee07 2a90 	vmov	s15, r2
 800259c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025a4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80025a8:	ee07 2a90 	vmov	s15, r2
 80025ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b8:	ee17 2a90 	vmov	r2, s15
 80025bc:	825a      	strh	r2, [r3, #18]
 80025be:	e7bc      	b.n	800253a <TP_Scan+0x1e>
		if(tp_dev.sta & TP_PRES_DOWN)
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <TP_Scan+0xd8>)
 80025c2:	7d1b      	ldrb	r3, [r3, #20]
 80025c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025c8:	d10c      	bne.n	80025e4 <TP_Scan+0xc8>
			tp_dev.x0 	= 0;
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <TP_Scan+0xd8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	819a      	strh	r2, [r3, #12]
			tp_dev.y0 	= 0;
 80025d0:	81da      	strh	r2, [r3, #14]
			tp_dev.x  	= 0xffff;
 80025d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d6:	821a      	strh	r2, [r3, #16]
			tp_dev.y 	= 0xffff;
 80025d8:	825a      	strh	r2, [r3, #18]
	return tp_dev.sta & TP_PRES_DOWN;
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <TP_Scan+0xd8>)
 80025dc:	7d18      	ldrb	r0, [r3, #20]
}
 80025de:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80025e2:	bd10      	pop	{r4, pc}
			tp_dev.sta&=~(1<<7);
 80025e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025e8:	4a02      	ldr	r2, [pc, #8]	; (80025f4 <TP_Scan+0xd8>)
 80025ea:	7513      	strb	r3, [r2, #20]
 80025ec:	e7f5      	b.n	80025da <TP_Scan+0xbe>
 80025ee:	bf00      	nop
 80025f0:	40020400 	.word	0x40020400
 80025f4:	20000014 	.word	0x20000014

080025f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002630 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025fe:	e003      	b.n	8002608 <LoopCopyDataInit>

08002600 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002602:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002604:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002606:	3104      	adds	r1, #4

08002608 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002608:	480b      	ldr	r0, [pc, #44]	; (8002638 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800260c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800260e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002610:	d3f6      	bcc.n	8002600 <CopyDataInit>
  ldr  r2, =_sbss
 8002612:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002614:	e002      	b.n	800261c <LoopFillZerobss>

08002616 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002616:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002618:	f842 3b04 	str.w	r3, [r2], #4

0800261c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800261e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002620:	d3f9      	bcc.n	8002616 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002622:	f7ff fe01 	bl	8002228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002626:	f000 f811 	bl	800264c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262a:	f7ff fcf1 	bl	8002010 <main>
  bx  lr    
 800262e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002630:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002634:	0803dce8 	.word	0x0803dce8
  ldr  r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800263c:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 8002640:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 8002644:	200000c0 	.word	0x200000c0

08002648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <ADC_IRQHandler>
	...

0800264c <__libc_init_array>:
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	4e0d      	ldr	r6, [pc, #52]	; (8002684 <__libc_init_array+0x38>)
 8002650:	4c0d      	ldr	r4, [pc, #52]	; (8002688 <__libc_init_array+0x3c>)
 8002652:	1ba4      	subs	r4, r4, r6
 8002654:	10a4      	asrs	r4, r4, #2
 8002656:	2500      	movs	r5, #0
 8002658:	42a5      	cmp	r5, r4
 800265a:	d109      	bne.n	8002670 <__libc_init_array+0x24>
 800265c:	4e0b      	ldr	r6, [pc, #44]	; (800268c <__libc_init_array+0x40>)
 800265e:	4c0c      	ldr	r4, [pc, #48]	; (8002690 <__libc_init_array+0x44>)
 8002660:	f000 f818 	bl	8002694 <_init>
 8002664:	1ba4      	subs	r4, r4, r6
 8002666:	10a4      	asrs	r4, r4, #2
 8002668:	2500      	movs	r5, #0
 800266a:	42a5      	cmp	r5, r4
 800266c:	d105      	bne.n	800267a <__libc_init_array+0x2e>
 800266e:	bd70      	pop	{r4, r5, r6, pc}
 8002670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002674:	4798      	blx	r3
 8002676:	3501      	adds	r5, #1
 8002678:	e7ee      	b.n	8002658 <__libc_init_array+0xc>
 800267a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800267e:	4798      	blx	r3
 8002680:	3501      	adds	r5, #1
 8002682:	e7f2      	b.n	800266a <__libc_init_array+0x1e>
 8002684:	0803dce0 	.word	0x0803dce0
 8002688:	0803dce0 	.word	0x0803dce0
 800268c:	0803dce0 	.word	0x0803dce0
 8002690:	0803dce4 	.word	0x0803dce4

08002694 <_init>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr

080026a0 <_fini>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr
